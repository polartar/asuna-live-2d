!function(){"use strict";var t={932:function(t,e,i){i.r(e),i.d(e,{CubismMatrix44:function(){return r},Live2DCubismFramework:function(){return s}});var s,a=i(932);class r{constructor(){this._tr=new Float32Array(16),this.loadIdentity()}static multiply(t,e,i){const s=new Float32Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]);for(let i=0;i<4;++i)for(let a=0;a<4;++a)for(let r=0;r<4;++r)s[a+4*i]+=t[r+4*i]*e[a+4*r];for(let t=0;t<16;++t)i[t]=s[t]}loadIdentity(){const t=new Float32Array([1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1]);this.setMatrix(t)}setMatrix(t){for(let e=0;e<16;++e)this._tr[e]=t[e]}getArray(){return this._tr}getScaleX(){return this._tr[0]}getScaleY(){return this._tr[5]}getTranslateX(){return this._tr[12]}getTranslateY(){return this._tr[13]}transformX(t){return this._tr[0]*t+this._tr[12]}transformY(t){return this._tr[5]*t+this._tr[13]}invertTransformX(t){return(t-this._tr[12])/this._tr[0]}invertTransformY(t){return(t-this._tr[13])/this._tr[5]}translateRelative(t,e){const i=new Float32Array([1,0,0,0,0,1,0,0,0,0,1,0,t,e,0,1]);r.multiply(i,this._tr,this._tr)}translate(t,e){this._tr[12]=t,this._tr[13]=e}translateX(t){this._tr[12]=t}translateY(t){this._tr[13]=t}scaleRelative(t,e){const i=new Float32Array([t,0,0,0,0,e,0,0,0,0,1,0,0,0,0,1]);r.multiply(i,this._tr,this._tr)}scale(t,e){this._tr[0]=t,this._tr[5]=e}multiplyByMatrix(t){r.multiply(t.getArray(),this._tr,this._tr)}clone(){const t=new r;for(let e=0;e<this._tr.length;e++)t._tr[e]=this._tr[e];return t}}!function(t){t.CubismMatrix44=a.CubismMatrix44}(s||(s={}))},375:function(t,e,i){i.r(e),i.d(e,{CubismPhysics:function(){return S},Live2DCubismFramework:function(){return F},Options:function(){return C}});class s{constructor(t=0,e=0){this.x=t,this.y=e}add(t){const e=new s(0,0);return e.x=this.x+t.x,e.y=this.y+t.y,e}substract(t){const e=new s(0,0);return e.x=this.x-t.x,e.y=this.y-t.y,e}multiply(t){const e=new s(0,0);return e.x=this.x*t.x,e.y=this.y*t.y,e}multiplyByScaler(t){return this.multiply(new s(t,t))}division(t){const e=new s(0,0);return e.x=this.x/t.x,e.y=this.y/t.y,e}divisionByScalar(t){return this.division(new s(t,t))}getLength(){return Math.sqrt(this.x*this.x+this.y*this.y)}getDistanceWith(t){return Math.sqrt((this.x-t.x)*(this.x-t.x)+(this.y-t.y)*(this.y-t.y))}dot(t){return this.x*t.x+this.y*t.y}normalize(){const t=Math.pow(this.x*this.x+this.y*this.y,.5);this.x=this.x/t,this.y=this.y/t}isEqual(t){return this.x==t.x&&this.y==t.y}isNotEqual(t){return!this.isEqual(t)}}var a,r;!function(t){t.CubismVector2=s}(a||(a={}));class o{static range(t,e,i){return t<e?t=e:t>i&&(t=i),t}static sin(t){return Math.sin(t)}static cos(t){return Math.cos(t)}static abs(t){return Math.abs(t)}static sqrt(t){return Math.sqrt(t)}static cbrt(t){if(0===t)return t;let e=t;const i=e<0;let s;return i&&(e=-e),e===1/0?s=1/0:(s=Math.exp(Math.log(e)/3),s=(e/(s*s)+2*s)/3),i?-s:s}static getEasingSine(t){return t<0?0:t>1?1:.5-.5*this.cos(t*Math.PI)}static max(t,e){return t>e?t:e}static min(t,e){return t>e?e:t}static degreesToRadian(t){return t/180*Math.PI}static radianToDegrees(t){return 180*t/Math.PI}static directionToRadian(t,e){let i=Math.atan2(e.y,e.x)-Math.atan2(t.y,t.x);for(;i<-Math.PI;)i+=2*Math.PI;for(;i>Math.PI;)i-=2*Math.PI;return i}static directionToDegrees(t,e){const i=this.directionToRadian(t,e);let s=this.radianToDegrees(i);return e.x-t.x>0&&(s=-s),s}static radianToDirection(t){const e=new s;return e.x=this.sin(t),e.y=this.cos(t),e}static quadraticEquation(t,e,i){return this.abs(t)<o.Epsilon?this.abs(e)<o.Epsilon?-i:-i/e:-(e+this.sqrt(e*e-4*t*i))/(2*t)}static cardanoAlgorithmForBezier(t,e,i,s){if(this.sqrt(t)<o.Epsilon)return this.range(this.quadraticEquation(e,i,s),0,1);const a=e/t,r=i/t,n=(3*r-a*a)/3,l=n/3,h=(2*a*a*a-9*a*r+s/t*27)/27,u=h/2,d=u*u+l*l*l,c=.51;if(d<0){const t=-n/3,e=t*t*t,i=this.sqrt(e),s=-h/(2*i),r=this.range(s,-1,1),o=Math.acos(r),l=2*this.cbrt(i),u=l*this.cos(o/3)-a/3;if(this.abs(u-.5)<c)return this.range(u,0,1);const d=l*this.cos((o+2*Math.PI)/3)-a/3;if(this.abs(d-.5)<c)return this.range(d,0,1);const g=l*this.cos((o+4*Math.PI)/3)-a/3;return this.range(g,0,1)}if(0==d){let t;t=u<0?this.cbrt(-u):-this.cbrt(u);const e=2*t-a/3;if(this.abs(e-.5)<c)return this.range(e,0,1);const i=-t-a/3;return this.range(i,0,1)}const g=this.sqrt(d),_=this.cbrt(g-u)-this.cbrt(g+u)-a/3;return this.range(_,0,1)}constructor(){}}o.Epsilon=1e-5,function(t){t.CubismMath=o}(r||(r={}));var n,l,h,u=i(175);!function(t){t[t.CubismPhysicsTargetType_Parameter=0]="CubismPhysicsTargetType_Parameter"}(n||(n={})),function(t){t[t.CubismPhysicsSource_X=0]="CubismPhysicsSource_X",t[t.CubismPhysicsSource_Y=1]="CubismPhysicsSource_Y",t[t.CubismPhysicsSource_Angle=2]="CubismPhysicsSource_Angle"}(l||(l={}));class d{constructor(){this.gravity=new s(0,0),this.wind=new s(0,0)}}class c{constructor(){this.id=void 0,this.targetType=void 0}}class g{constructor(){this.minimum=void 0,this.maximum=void 0,this.defalut=void 0}}class _{constructor(){this.initialPosition=new s(0,0),this.position=new s(0,0),this.lastPosition=new s(0,0),this.lastGravity=new s(0,0),this.force=new s(0,0),this.velocity=new s(0,0),this.mobility=void 0,this.delay=void 0,this.acceleration=void 0,this.radius=void 0}}class p{constructor(){this.normalizationPosition=new g,this.normalizationAngle=new g,this.inputCount=void 0,this.outputCount=void 0,this.particleCount=void 0,this.baseInputIndex=void 0,this.baseOutputIndex=void 0,this.baseParticleIndex=void 0}}class m{constructor(){this.source=new c,this.sourceParameterIndex=void 0,this.weight=void 0,this.type=void 0,this.reflect=void 0,this.getNormalizedParameterValue=void 0}}class f{constructor(){this.destination=new c,this.translationScale=new s(0,0),this.destinationParameterIndex=void 0,this.vertexIndex=void 0,this.angleScale=void 0,this.weight=void 0,this.type=void 0,this.reflect=void 0,this.valueBelowMinimum=void 0,this.valueExceededMaximum=void 0,this.getValue=void 0,this.getScale=void 0}}class x{constructor(){this.subRigCount=0,this.settings=new u.S3,this.inputs=new u.S3,this.outputs=new u.S3,this.particles=new u.S3,this.gravity=new s(0,0),this.wind=new s(0,0)}}!function(t){t.CubismPhysicsInput=m,t.CubismPhysicsNormalization=g,t.CubismPhysicsOutput=f,t.CubismPhysicsParameter=c,t.CubismPhysicsParticle=_,t.CubismPhysicsRig=x,t.CubismPhysicsSource=l,t.CubismPhysicsSubRig=p,t.CubismPhysicsTargetType=n,t.PhysicsJsonEffectiveForces=d}(h||(h={}));const y="Angle";class S{static create(t){const e=new S;return e.parse(t),e._physicsRig.gravity.y=0,e}static delete(t){null!=t&&(t.release(),t=null)}evaluate(t,e){let i,a,r,n;const l=new s;let h,u,d,c,g,_,p,m;g=t._model.parameters.values,_=t._model.parameters.maximumValues,p=t._model.parameters.minimumValues,m=t._model.parameters.defaultValues;for(let f=0;f<this._physicsRig.subRigCount;++f){i={angle:0},l.x=0,l.y=0,h=this._physicsRig.settings.at(f),u=this._physicsRig.inputs.get(h.baseInputIndex),d=this._physicsRig.outputs.get(h.baseOutputIndex),c=this._physicsRig.particles.get(h.baseParticleIndex);for(let e=0;e<h.inputCount;++e)a=u[e].weight/100,-1==u[e].sourceParameterIndex&&(u[e].sourceParameterIndex=t.getParameterIndex(u[e].source.id)),u[e].getNormalizedParameterValue(l,i,g[u[e].sourceParameterIndex],p[u[e].sourceParameterIndex],_[u[e].sourceParameterIndex],m[u[e].sourceParameterIndex],h.normalizationPosition,h.normalizationAngle,u[e].reflect,a);r=o.degreesToRadian(-i.angle),l.x=l.x*o.cos(r)-l.y*o.sin(r),l.y=l.x*o.sin(r)+l.y*o.cos(r),T(c,h.particleCount,l,i.angle,this._options.wind,.001*h.normalizationPosition.maximum,e,5);for(let e=0;e<h.outputCount;++e){const i=d[e].vertexIndex;if(i<1||i>=h.particleCount)break;-1==d[e].destinationParameterIndex&&(d[e].destinationParameterIndex=t.getParameterIndex(d[e].destination.id));const a=new s;a.x=c[i].position.x-c[i-1].position.x,a.y=c[i].position.y-c[i-1].position.y,n=d[e].getValue(a,c,i,d[e].reflect,this._options.gravity);const r=d[e].destinationParameterIndex,o=!Float32Array.prototype.slice&&"subarray"in Float32Array.prototype?JSON.parse(JSON.stringify(g.subarray(r))):g.slice(r);E(o,p[r],_[r],n,d[e]);for(let t=r,e=0;t<g.length;t++,e++)g[t]=o[e]}}}setOptions(t){this._options=t}getOption(){return this._options}constructor(){this._physicsRig=null,this._options=new C,this._options.gravity.y=-1,this._options.gravity.x=0,this._options.wind.x=0,this._options.wind.y=0}release(){this._physicsRig=void 0,this._physicsRig=null}parse(t){this._physicsRig=new x,this._physicsRig.gravity=new s(t.Meta.EffectiveForces.Gravity.X,t.Meta.EffectiveForces.Gravity.Y),this._physicsRig.wind=new s(t.Meta.EffectiveForces.Wind.X,t.Meta.EffectiveForces.Wind.Y),this._physicsRig.subRigCount=t.Meta.PhysicsSettingCount,this._physicsRig.settings.updateSize(this._physicsRig.subRigCount,p,!0),this._physicsRig.inputs.updateSize(t.Meta.TotalInputCount,m,!0),this._physicsRig.outputs.updateSize(t.Meta.TotalOutputCount,f,!0),this._physicsRig.particles.updateSize(t.Meta.VertexCount,_,!0);let e=0,i=0,a=0;for(let r=0;r<this._physicsRig.settings.getSize();++r){this._physicsRig.settings.at(r).normalizationPosition.minimum=t.PhysicsSettings[r].Normalization.Position.Minimum,this._physicsRig.settings.at(r).normalizationPosition.maximum=t.PhysicsSettings[r].Normalization.Position.Maximum,this._physicsRig.settings.at(r).normalizationPosition.defalut=t.PhysicsSettings[r].Normalization.Position.Default,this._physicsRig.settings.at(r).normalizationAngle.minimum=t.PhysicsSettings[r].Normalization.Angle.Minimum,this._physicsRig.settings.at(r).normalizationAngle.maximum=t.PhysicsSettings[r].Normalization.Angle.Maximum,this._physicsRig.settings.at(r).normalizationAngle.defalut=t.PhysicsSettings[r].Normalization.Angle.Default,this._physicsRig.settings.at(r).inputCount=t.PhysicsSettings[r].Input.length,this._physicsRig.settings.at(r).baseInputIndex=e;for(let i=0;i<this._physicsRig.settings.at(r).inputCount;++i)this._physicsRig.inputs.at(e+i).sourceParameterIndex=-1,this._physicsRig.inputs.at(e+i).weight=t.PhysicsSettings[r].Input[i].Weight,this._physicsRig.inputs.at(e+i).reflect=t.PhysicsSettings[r].Input[i].Reflect,"X"==t.PhysicsSettings[r].Input[i].Type?(this._physicsRig.inputs.at(e+i).type=l.CubismPhysicsSource_X,this._physicsRig.inputs.at(e+i).getNormalizedParameterValue=M):"Y"==t.PhysicsSettings[r].Input[i].Type?(this._physicsRig.inputs.at(e+i).type=l.CubismPhysicsSource_Y,this._physicsRig.inputs.at(e+i).getNormalizedParameterValue=b):t.PhysicsSettings[r].Input[i].Type==y&&(this._physicsRig.inputs.at(e+i).type=l.CubismPhysicsSource_Angle,this._physicsRig.inputs.at(e+i).getNormalizedParameterValue=w),this._physicsRig.inputs.at(e+i).source.targetType=n.CubismPhysicsTargetType_Parameter,this._physicsRig.inputs.at(e+i).source.id=t.PhysicsSettings[r].Input[i].Source.Id;e+=this._physicsRig.settings.at(r).inputCount,this._physicsRig.settings.at(r).outputCount=t.PhysicsSettings[r].Output.length,this._physicsRig.settings.at(r).baseOutputIndex=i;for(let e=0;e<this._physicsRig.settings.at(r).outputCount;++e)this._physicsRig.outputs.at(i+e).destinationParameterIndex=-1,this._physicsRig.outputs.at(i+e).vertexIndex=t.PhysicsSettings[r].Output[e].VertexIndex,this._physicsRig.outputs.at(i+e).angleScale=t.PhysicsSettings[r].Output[e].Scale,this._physicsRig.outputs.at(i+e).weight=t.PhysicsSettings[r].Output[e].Weight,this._physicsRig.outputs.at(i+e).destination.targetType=n.CubismPhysicsTargetType_Parameter,this._physicsRig.outputs.at(i+e).destination.id=t.PhysicsSettings[r].Output[e].Destination.Id,"X"==t.PhysicsSettings[r].Output[e].Type?(this._physicsRig.outputs.at(i+e).type=l.CubismPhysicsSource_X,this._physicsRig.outputs.at(i+e).getValue=v,this._physicsRig.outputs.at(i+e).getScale=R):"Y"==t.PhysicsSettings[r].Output[e].Type?(this._physicsRig.outputs.at(i+e).type=l.CubismPhysicsSource_Y,this._physicsRig.outputs.at(i+e).getValue=P,this._physicsRig.outputs.at(i+e).getScale=A):t.PhysicsSettings[r].Output[e].Type==y&&(this._physicsRig.outputs.at(i+e).type=l.CubismPhysicsSource_Angle,this._physicsRig.outputs.at(i+e).getValue=L,this._physicsRig.outputs.at(i+e).getScale=D),this._physicsRig.outputs.at(i+e).reflect=t.PhysicsSettings[r].Output[e].Reflect;i+=this._physicsRig.settings.at(r).outputCount,this._physicsRig.settings.at(r).particleCount=t.PhysicsSettings[r].Vertices.length,this._physicsRig.settings.at(r).baseParticleIndex=a;for(let e=0;e<this._physicsRig.settings.at(r).particleCount;++e)this._physicsRig.particles.at(a+e).mobility=t.PhysicsSettings[r].Vertices[e].Mobility,this._physicsRig.particles.at(a+e).delay=t.PhysicsSettings[r].Vertices[e].Delay,this._physicsRig.particles.at(a+e).acceleration=t.PhysicsSettings[r].Vertices[e].Acceleration,this._physicsRig.particles.at(a+e).radius=t.PhysicsSettings[r].Vertices[e].Radius,this._physicsRig.particles.at(a+e).position=new s(t.PhysicsSettings[r].Vertices[e].Position.X,t.PhysicsSettings[r].Vertices[e].Position.Y);a+=this._physicsRig.settings.at(r).particleCount}this.initialize()}initialize(){let t,e,i;for(let a=0;a<this._physicsRig.subRigCount;++a){e=this._physicsRig.settings.at(a),t=this._physicsRig.particles.get(e.baseParticleIndex),t[0].initialPosition=new s(0,0),t[0].lastPosition=new s(t[0].initialPosition.x,t[0].initialPosition.y),t[0].lastGravity=new s(0,-1),t[0].lastGravity.y*=-1,t[0].velocity=new s(0,0),t[0].force=new s(0,0);for(let a=1;a<e.particleCount;++a)i=new s(0,0),i.y=t[a].radius,t[a].initialPosition=new s(t[a-1].initialPosition.x+i.x,t[a-1].initialPosition.y+i.y),t[a].position=new s(t[a].initialPosition.x,t[a].initialPosition.y),t[a].lastPosition=new s(t[a].initialPosition.x,t[a].initialPosition.y),t[a].lastGravity=new s(0,-1),t[a].lastGravity.y*=-1,t[a].velocity=new s(0,0),t[a].force=new s(0,0)}}}class C{constructor(){this.gravity=new s(0,0),this.wind=new s(0,0)}}function M(t,e,i,s,a,r,o,n,l,h){t.x+=B(i,s,a,0,o.minimum,o.maximum,o.defalut,l)*h}function b(t,e,i,s,a,r,o,n,l,h){t.y+=B(i,s,a,0,o.minimum,o.maximum,o.defalut,l)*h}function w(t,e,i,s,a,r,o,n,l,h){e.angle+=B(i,s,a,0,n.minimum,n.maximum,n.defalut,l)*h}function v(t,e,i,s,a){let r=t.x;return s&&(r*=-1),r}function P(t,e,i,s,a){let r=t.y;return s&&(r*=-1),r}function L(t,e,i,s,a){let r;return a=i>=2?e[i-1].position.substract(e[i-2].position):a.multiplyByScaler(-1),r=o.directionToRadian(a,t),s&&(r*=-1),r}function R(t,e){return JSON.parse(JSON.stringify(t.x))}function A(t,e){return JSON.parse(JSON.stringify(t.y))}function D(t,e){return JSON.parse(JSON.stringify(e))}function T(t,e,i,a,r,n,l,h){let u,d,c,g,_=new s(0,0),p=new s(0,0),m=new s(0,0),f=new s(0,0);t[0].position=new s(i.x,i.y),u=o.degreesToRadian(a),g=o.radianToDirection(u),g.normalize();for(let i=1;i<e;++i)t[i].force=g.multiplyByScaler(t[i].acceleration).add(r),t[i].lastPosition=new s(t[i].position.x,t[i].position.y),d=t[i].delay*l*30,_=t[i].position.substract(t[i-1].position),c=o.directionToRadian(t[i].lastGravity,g)/h,_.x=o.cos(c)*_.x-_.y*o.sin(c),_.y=o.sin(c)*_.x+_.y*o.cos(c),t[i].position=t[i-1].position.add(_),p=t[i].velocity.multiplyByScaler(d),m=t[i].force.multiplyByScaler(d).multiplyByScaler(d),t[i].position=t[i].position.add(p).add(m),f=t[i].position.substract(t[i-1].position),f.normalize(),t[i].position=t[i-1].position.add(f.multiplyByScaler(t[i].radius)),o.abs(t[i].position.x)<n&&(t[i].position.x=0),0!=d&&(t[i].velocity=t[i].position.substract(t[i].lastPosition),t[i].velocity=t[i].velocity.divisionByScalar(d),t[i].velocity=t[i].velocity.multiplyByScaler(t[i].mobility)),t[i].force=new s(0,0),t[i].lastGravity=new s(g.x,g.y)}function E(t,e,i,s,a){let r,o,n;r=a.getScale(a.translationScale,a.angleScale),o=s*r,o<e?(o<a.valueBelowMinimum&&(a.valueBelowMinimum=o),o=e):o>i&&(o>a.valueExceededMaximum&&(a.valueExceededMaximum=o),o=i),n=a.weight/100,n>=1||(o=t[0]*(1-n)+o*n),t[0]=o}function B(t,e,i,s,a,r,n,l){let h=0;const u=o.max(i,e);u<t&&(t=u);const d=o.min(i,e);d>t&&(t=d);const c=o.min(a,r),g=o.max(a,r),_=n,p=(f=d,x=u,o.min(f,x)+function(t,e){const i=o.max(t,e),s=o.min(t,e);return o.abs(i-s)}(f,x)/2),m=t-p;var f,x;switch(function(t){let e=0;return t>0?e=1:t<0&&(e=-1),e}(m)){case 1:{const t=g-_,e=u-p;0!=e&&(h=m*(t/e),h+=_);break}case-1:{const t=c-_,e=d-p;0!=e&&(h=m*(t/e),h+=_);break}case 0:h=_}return l?h:-1*h}var F;!function(t){t.CubismPhysics=S,t.Options=C}(F||(F={}))},175:function(t,e,i){i.d(e,{S3:function(){return r},hZ:function(){return o}});var s,a=i(175);class r{constructor(t=0){t<1?(this._ptr=[],this._capacity=0,this._size=0):(this._ptr=new Array(t),this._capacity=t,this._size=0)}at(t){return this._ptr[t]}set(t,e){this._ptr[t]=e}get(t=0){const e=new Array;for(let i=t;i<this._size;i++)e.push(this._ptr[i]);return e}pushBack(t){this._size>=this._capacity&&this.prepareCapacity(0==this._capacity?r.s_defaultSize:2*this._capacity),this._ptr[this._size++]=t}clear(){this._ptr.length=0,this._size=0}getSize(){return this._size}assign(t,e){this._size<t&&this.prepareCapacity(t);for(let i=0;i<t;i++)this._ptr[i]=e;this._size=t}resize(t,e){this.updateSize(t,e,!0)}updateSize(t,e=null,i=!0){if(this._size<t)if(this.prepareCapacity(t),i)for(let i=this._size;i<t;i++)this._ptr[i]="function"==typeof e?JSON.parse(JSON.stringify(new e)):e;else for(let i=this._size;i<t;i++)this._ptr[i]=e;else{const e=this._size-t;this._ptr.splice(this._size-e,e)}this._size=t}insert(t,e,i){let s=t._index;const a=e._index,r=i._index,o=r-a;this.prepareCapacity(this._size+o);const n=this._size-s;if(n>0)for(let t=0;t<n;t++)this._ptr.splice(s+t,0,null);for(let t=a;t<r;t++,s++)this._ptr[s]=e._vector._ptr[t];this._size=this._size+o}remove(t){return!(t<0||this._size<=t||(this._ptr.splice(t,1),--this._size,0))}erase(t){const e=t._index;return e<0||this._size<=e?t:(this._ptr.splice(e,1),--this._size,new o(this,e))}prepareCapacity(t){t>this._capacity&&(0==this._capacity?(this._ptr=new Array(t),this._capacity=t):(this._ptr.length=t,this._capacity=t))}begin(){return 0==this._size?this.end():new o(this,0)}end(){return new o(this,this._size)}getOffset(t){const e=new r;return e._ptr=this.get(t),e._size=this.get(t).length,e._capacity=this.get(t).length,e}}r.s_defaultSize=10;class o{constructor(t,e){this._vector=null!=t?t:null,this._index=null!=e?e:0}set(t){return this._index=t._index,this._vector=t._vector,this}preIncrement(){return++this._index,this}preDecrement(){return--this._index,this}increment(){return new o(this._vector,this._index++)}decrement(){return new o(this._vector,this._index--)}ptr(){return this._vector._ptr[this._index]}substitution(t){return this._index=t._index,this._vector=t._vector,this}notEqual(t){return this._index!=t._index||this._vector!=t._vector}}!function(t){t.csmVector=a.S3,t.iterator=a.hZ}(s||(s={}))},49:function(t,e,i){i.r(e),i.d(e,{Model:function(){return I}});var s,a,r=i(932);class o{initialize(t){this._model=t}drawModel(){null!=this.getModel()&&this.doDrawModel()}setMvpMatrix(t){this._mvpMatrix4x4.setMatrix(t.getArray())}getMvpMatrix(){return this._mvpMatrix4x4}setModelColor(t,e,i,s){t<0?t=0:t>1&&(t=1),e<0?e=0:e>1&&(e=1),i<0?i=0:i>1&&(i=1),s<0?s=0:s>1&&(s=1),this._modelColor.R=t,this._modelColor.G=e,this._modelColor.B=i,this._modelColor.A=s}getModelColor(){return JSON.parse(JSON.stringify(this._modelColor))}setIsPremultipliedAlpha(t){this._isPremultipliedAlpha=t}isPremultipliedAlpha(){return this._isPremultipliedAlpha}setIsCulling(t){this._isCulling=t}isCulling(){return this._isCulling}setAnisotropy(t){this._anisortopy=t}getAnisotropy(){return this._anisortopy}getModel(){return this._model}constructor(){this._isCulling=!1,this._isPremultipliedAlpha=!1,this._anisortopy=0,this._model=null,this._modelColor=new n,this._mvpMatrix4x4=new r.CubismMatrix44,this._mvpMatrix4x4.loadIdentity()}}!function(t){t[t.CubismBlendMode_Normal=0]="CubismBlendMode_Normal",t[t.CubismBlendMode_Additive=1]="CubismBlendMode_Additive",t[t.CubismBlendMode_Multiplicative=2]="CubismBlendMode_Multiplicative"}(s||(s={}));class n{constructor(){this.R=1,this.G=1,this.B=1,this.A=1}}!function(t){t.CubismBlendMode=s,t.CubismRenderer=o,t.CubismTextureColor=n}(a||(a={}));const l=Object.freeze({vertexOffset:0,vertexStep:2});class h{constructor(t,e){this.first=null==t?null:t,this.second=null==e?null:e}}class u{constructor(t){null!=t?t<1?(this._keyValues=[],this._size=0):(this._keyValues=new Array(t),this._size=t):(this._keyValues=[],this._size=0),this._dummyValue=null}release(){this.clear()}appendKey(t){this.prepareCapacity(this._size+1,!1),this._keyValues[this._size]=new h(t),this._size+=1}getValue(t){let e=-1;for(let i=0;i<this._size;i++)if(this._keyValues[i].first==t){e=i;break}return e>=0?this._keyValues[e].second:(this.appendKey(t),this._keyValues[this._size-1].second)}setValue(t,e){let i=-1;for(let e=0;e<this._size;e++)if(this._keyValues[e].first==t){i=e;break}i>=0?this._keyValues[i].second=e:(this.appendKey(t),this._keyValues[this._size-1].second=e)}isExist(t){for(let e=0;e<this._size;e++)if(this._keyValues[e].first==t)return!0;return!1}clear(){this._keyValues=void 0,this._keyValues=null,this._keyValues=[],this._size=0}getSize(){return this._size}prepareCapacity(t,e){t>this._keyValues.length&&(0==this._keyValues.length?(!e&&t<u.DefaultSize&&(t=u.DefaultSize),this._keyValues.length=t):(!e&&t<2*this._keyValues.length&&(t=2*this._keyValues.length),this._keyValues.length=t))}begin(){return new d(this,0)}end(){return new d(this,this._size)}erase(t){const e=t._index;return e<0||this._size<=e?t:(this._keyValues.splice(e,1),--this._size,new d(this,e))}dumpAsInt(){for(let t=0;t<this._size;t++);}}u.DefaultSize=10;class d{constructor(t,e){this._map=null!=t?t:new u,this._index=null!=e?e:0}set(t){return this._index=t._index,this._map=t._map,this}preIncrement(){return++this._index,this}preDecrement(){return--this._index,this}increment(){return new d(this._map,this._index++)}decrement(){const t=new d(this._map,this._index);return this._map=t._map,this._index=t._index,this}ptr(){return this._map._keyValues[this._index]}notEqual(t){return this._index!=t._index||this._map!=t._map}}var c,g;!function(t){t.csmMap=u,t.csmPair=h,t.iterator=d}(c||(c={}));class _{constructor(t,e,i,s){this.x=t||0,this.y=e||0,this.width=i||0,this.height=s||0}getCenterX(){return this.x+.5*this.width}getCenterY(){return this.y+.5*this.height}getRight(){return this.x+this.width}getBottom(){return this.y+this.height}setRect(t){this.x=t.x,this.y=t.y,this.width=t.width,this.height=t.height}expand(t,e){this.x-=t,this.y-=e,this.width+=2*t,this.height+=2*e}}!function(t){t.csmRect=_}(g||(g={}));var p=i(175);function m(...t){console.log(...t)}let f,x,y;class S{getChannelFlagAsColor(t){return this._channelColors.at(t)}getMaskRenderTexture(){let t=0;if(this._maskTexture&&0!=this._maskTexture.texture&&(this._maskTexture.frameNo=this._currentFrameNo,t=this._maskTexture.texture),0==t){const e=this._clippingMaskBufferSize;this._colorBuffer=this.gl.createTexture(),this.gl.bindTexture(this.gl.TEXTURE_2D,this._colorBuffer),this.gl.texImage2D(this.gl.TEXTURE_2D,0,this.gl.RGBA,e,e,0,this.gl.RGBA,this.gl.UNSIGNED_BYTE,null),this.gl.texParameteri(this.gl.TEXTURE_2D,this.gl.TEXTURE_WRAP_S,this.gl.CLAMP_TO_EDGE),this.gl.texParameteri(this.gl.TEXTURE_2D,this.gl.TEXTURE_WRAP_T,this.gl.CLAMP_TO_EDGE),this.gl.texParameteri(this.gl.TEXTURE_2D,this.gl.TEXTURE_MIN_FILTER,this.gl.LINEAR),this.gl.texParameteri(this.gl.TEXTURE_2D,this.gl.TEXTURE_MAG_FILTER,this.gl.LINEAR),this.gl.bindTexture(this.gl.TEXTURE_2D,null),t=this.gl.createFramebuffer(),this.gl.bindFramebuffer(this.gl.FRAMEBUFFER,t),this.gl.framebufferTexture2D(this.gl.FRAMEBUFFER,this.gl.COLOR_ATTACHMENT0,this.gl.TEXTURE_2D,this._colorBuffer,0),this.gl.bindFramebuffer(this.gl.FRAMEBUFFER,y),this._maskTexture=new C(this._currentFrameNo,t)}return t}setGL(t){this.gl=t}calcClippedDrawTotalBounds(t,e){let i=Number.MAX_VALUE,s=Number.MAX_VALUE,a=Number.MIN_VALUE,r=Number.MIN_VALUE;const o=e._clippedDrawableIndexList.length;for(let n=0;n<o;n++){const o=e._clippedDrawableIndexList[n],h=t.getDrawableVertexCount(o),u=t.getDrawableVertices(o);let d=Number.MAX_VALUE,c=Number.MAX_VALUE,g=Number.MIN_VALUE,_=Number.MIN_VALUE;const p=h*l.vertexStep;for(let t=l.vertexOffset;t<p;t+=l.vertexStep){const e=u[t],i=u[t+1];e<d&&(d=e),e>g&&(g=e),i<c&&(c=i),i>_&&(_=i)}if(d!=Number.MAX_VALUE)if(d<i&&(i=d),c<s&&(s=c),g>a&&(a=g),_>r&&(r=_),i==Number.MAX_VALUE)e._allClippedDrawRect.x=0,e._allClippedDrawRect.y=0,e._allClippedDrawRect.width=0,e._allClippedDrawRect.height=0,e._isUsing=!1;else{e._isUsing=!0;const t=a-i,o=r-s;e._allClippedDrawRect.x=i,e._allClippedDrawRect.y=s,e._allClippedDrawRect.width=t,e._allClippedDrawRect.height=o}}}constructor(){this.gl=null,this._maskRenderTexture=null,this._colorBuffer=null,this._currentFrameNo=0,this._clippingMaskBufferSize=256,this._clippingContextListForMask=new p.S3,this._clippingContextListForDraw=new p.S3,this._channelColors=new p.S3,this._tmpBoundsOnModel=new _,this._tmpMatrix=new r.CubismMatrix44,this._tmpMatrixForMask=new r.CubismMatrix44,this._tmpMatrixForDraw=new r.CubismMatrix44,this._maskTexture=null;let t=new n;t.R=1,t.G=0,t.B=0,t.A=0,this._channelColors.pushBack(t),t=new n,t.R=0,t.G=1,t.B=0,t.A=0,this._channelColors.pushBack(t),t=new n,t.R=0,t.G=0,t.B=1,t.A=0,this._channelColors.pushBack(t),t=new n,t.R=0,t.G=0,t.B=0,t.A=1,this._channelColors.pushBack(t)}release(){for(let t=0;t<this._clippingContextListForMask.getSize();t++)this._clippingContextListForMask.at(t)&&(this._clippingContextListForMask.at(t).release(),this._clippingContextListForMask.set(t,void 0)),this._clippingContextListForMask.set(t,null);this._clippingContextListForMask=null;for(let t=0;t<this._clippingContextListForDraw.getSize();t++)this._clippingContextListForDraw.set(t,null);this._clippingContextListForDraw=null,this._maskTexture&&(this.gl.deleteFramebuffer(this._maskTexture.texture),this._maskTexture=null);for(let t=0;t<this._channelColors.getSize();t++)this._channelColors.set(t,null);this._channelColors=null,this.gl.deleteTexture(this._colorBuffer),this._colorBuffer=null}initialize(t,e,i,s){for(let t=0;t<e;t++){if(s[t]<=0){this._clippingContextListForDraw.pushBack(null);continue}let e=this.findSameClip(i[t],s[t]);null==e&&(e=new M(this,i[t],s[t]),this._clippingContextListForMask.pushBack(e)),e.addClippedDrawable(t),this._clippingContextListForDraw.pushBack(e)}}setupClippingContext(t,e){this._currentFrameNo++;let i=0;for(let e=0;e<this._clippingContextListForMask.getSize();e++){const s=this._clippingContextListForMask.at(e);this.calcClippedDrawTotalBounds(t,s),s._isUsing&&i++}if(i>0){this.gl.viewport(0,0,this._clippingMaskBufferSize,this._clippingMaskBufferSize),this._maskRenderTexture=this.getMaskRenderTexture(),e.getMvpMatrix(),e.preDraw(),this.setupLayoutBounds(i),this.gl.bindFramebuffer(this.gl.FRAMEBUFFER,this._maskRenderTexture),this.gl.clearColor(1,1,1,1),this.gl.clear(this.gl.COLOR_BUFFER_BIT);for(let i=0;i<this._clippingContextListForMask.getSize();i++){const a=this._clippingContextListForMask.at(i),r=a._allClippedDrawRect,o=a._layoutBounds,n=.05;this._tmpBoundsOnModel.setRect(r),this._tmpBoundsOnModel.expand(r.width*n,r.height*n);const l=o.width/this._tmpBoundsOnModel.width,h=o.height/this._tmpBoundsOnModel.height;this._tmpMatrix.loadIdentity(),this._tmpMatrix.translateRelative(-1,-1),this._tmpMatrix.scaleRelative(2,2),this._tmpMatrix.translateRelative(o.x,o.y),this._tmpMatrix.scaleRelative(l,h),this._tmpMatrix.translateRelative(-this._tmpBoundsOnModel.x,-this._tmpBoundsOnModel.y),this._tmpMatrixForMask.setMatrix(this._tmpMatrix.getArray()),this._tmpMatrix.loadIdentity(),this._tmpMatrix.translateRelative(o.x,o.y),this._tmpMatrix.scaleRelative(l,h),this._tmpMatrix.translateRelative(-this._tmpBoundsOnModel.x,-this._tmpBoundsOnModel.y),this._tmpMatrixForDraw.setMatrix(this._tmpMatrix.getArray()),a._matrixForMask.setMatrix(this._tmpMatrixForMask.getArray()),a._matrixForDraw.setMatrix(this._tmpMatrixForDraw.getArray());const u=a._clippingIdCount;for(let i=0;i<u;i++){const r=a._clippingIdList[i];t.getDrawableDynamicFlagVertexPositionsDidChange(r)&&(e.setIsCulling(0!=t.getDrawableCulling(r)),e.setClippingContextBufferForMask(a),e.drawMesh(t.getDrawableTextureIndices(r),t.getDrawableVertexIndexCount(r),t.getDrawableVertexCount(r),t.getDrawableVertexIndices(r),t.getDrawableVertices(r),t.getDrawableVertexUvs(r),t.getDrawableOpacity(r),s.CubismBlendMode_Normal,!1))}}this.gl.bindFramebuffer(this.gl.FRAMEBUFFER,y),e.setClippingContextBufferForMask(null),this.gl.viewport(x[0],x[1],x[2],x[3])}}findSameClip(t,e){for(let i=0;i<this._clippingContextListForMask.getSize();i++){const s=this._clippingContextListForMask.at(i),a=s._clippingIdCount;if(a!=e)continue;let r=0;for(let e=0;e<a;e++){const i=s._clippingIdList[e];for(let e=0;e<a;e++)if(t[e]==i){r++;break}}if(r==a)return s}return null}setupLayoutBounds(t){let e=t/4,i=t%4;e=~~e,i=~~i;let s=0;for(let t=0;t<4;t++){const a=e+(t<i?1:0);if(0==a);else if(1==a){const e=this._clippingContextListForMask.at(s++);e._layoutChannelNo=t,e._layoutBounds.x=0,e._layoutBounds.y=0,e._layoutBounds.width=1,e._layoutBounds.height=1}else if(2==a)for(let e=0;e<a;e++){let i=e%2;i=~~i;const a=this._clippingContextListForMask.at(s++);a._layoutChannelNo=t,a._layoutBounds.x=.5*i,a._layoutBounds.y=0,a._layoutBounds.width=.5,a._layoutBounds.height=1}else if(a<=4)for(let e=0;e<a;e++){let i=e%2,a=e/2;i=~~i,a=~~a;const r=this._clippingContextListForMask.at(s++);r._layoutChannelNo=t,r._layoutBounds.x=.5*i,r._layoutBounds.y=.5*a,r._layoutBounds.width=.5,r._layoutBounds.height=.5}else if(a<=9)for(let e=0;e<a;e++){let i=e%3,a=e/3;i=~~i,a=~~a;const r=this._clippingContextListForMask.at(s++);r._layoutChannelNo=t,r._layoutBounds.x=i/3,r._layoutBounds.y=a/3,r._layoutBounds.width=1/3,r._layoutBounds.height=1/3}else m("not supported mask count : {0}",a)}}getColorBuffer(){return this._colorBuffer}getClippingContextListForDraw(){return this._clippingContextListForDraw}setClippingMaskBufferSize(t){this._clippingMaskBufferSize=t}getClippingMaskBufferSize(){return this._clippingMaskBufferSize}}class C{constructor(t,e){this.frameNo=t,this.texture=e}}class M{constructor(t,e,i){this._owner=t,this._isUsing=!1,this._layoutChannelNo=0,this._clippingIdList=e,this._clippingIdCount=i,this._allClippedDrawRect=new _,this._layoutBounds=new _,this._clippedDrawableIndexList=[],this._matrixForMask=new r.CubismMatrix44,this._matrixForDraw=new r.CubismMatrix44}release(){null!=this._layoutBounds&&(this._layoutBounds=null),null!=this._allClippedDrawRect&&(this._allClippedDrawRect=null),null!=this._clippedDrawableIndexList&&(this._clippedDrawableIndexList=null)}addClippedDrawable(t){this._clippedDrawableIndexList.push(t)}getClippingManager(){return this._owner}setGl(t){this._owner.setGL(t)}}class b{static getInstance(){return null==f?(f=new b,f):f}static deleteInstance(){f&&(f.release(),f=null)}constructor(){this.gl=null,this._shaderSets=new p.S3}release(){this.releaseShaderProgram()}setupShaderProgram(t,e,i,a,r,o,n,l,h,u,d,c,g){let _,p,f,x;if(d||m("NoPremultipliedAlpha is not allowed"),0==this._shaderSets.getSize()&&this.generateShaders(),null!=t.getClippingContextBufferForMask()){const i=this._shaderSets.at(v.ShaderNames_SetupMask);this.gl.useProgram(i.shaderProgram),this.gl.activeTexture(this.gl.TEXTURE0),this.gl.bindTexture(this.gl.TEXTURE_2D,e),this.gl.uniform1i(i.samplerTexture0Location,0),null==n.vertex&&(n.vertex=this.gl.createBuffer()),this.gl.bindBuffer(this.gl.ARRAY_BUFFER,n.vertex),this.gl.bufferData(this.gl.ARRAY_BUFFER,a,this.gl.DYNAMIC_DRAW),this.gl.enableVertexAttribArray(i.attributePositionLocation),this.gl.vertexAttribPointer(i.attributePositionLocation,2,this.gl.FLOAT,!1,0,0),null==n.uv&&(n.uv=this.gl.createBuffer()),this.gl.bindBuffer(this.gl.ARRAY_BUFFER,n.uv),this.gl.bufferData(this.gl.ARRAY_BUFFER,o,this.gl.DYNAMIC_DRAW),this.gl.enableVertexAttribArray(i.attributeTexCoordLocation),this.gl.vertexAttribPointer(i.attributeTexCoordLocation,2,this.gl.FLOAT,!1,0,0);const s=t.getClippingContextBufferForMask()._layoutChannelNo,r=t.getClippingContextBufferForMask().getClippingManager().getChannelFlagAsColor(s);this.gl.uniform4f(i.uniformChannelFlagLocation,r.R,r.G,r.B,r.A),this.gl.uniformMatrix4fv(i.uniformClipMatrixLocation,!1,t.getClippingContextBufferForMask()._matrixForMask.getArray());const l=t.getClippingContextBufferForMask()._layoutBounds;this.gl.uniform4f(i.uniformBaseColorLocation,2*l.x-1,2*l.y-1,2*l.getRight()-1,2*l.getBottom()-1),_=this.gl.ZERO,p=this.gl.ONE_MINUS_SRC_COLOR,f=this.gl.ZERO,x=this.gl.ONE_MINUS_SRC_ALPHA}else{const i=null!=t.getClippingContextBufferForDraw(),r=i?g?2:1:0;let l=new w;switch(h){case s.CubismBlendMode_Normal:default:l=this._shaderSets.at(v.ShaderNames_NormalPremultipliedAlpha+r),_=this.gl.ONE,p=this.gl.ONE_MINUS_SRC_ALPHA,f=this.gl.ONE,x=this.gl.ONE_MINUS_SRC_ALPHA;break;case s.CubismBlendMode_Additive:l=this._shaderSets.at(v.ShaderNames_AddPremultipliedAlpha+r),_=this.gl.ONE,p=this.gl.ONE,f=this.gl.ZERO,x=this.gl.ONE;break;case s.CubismBlendMode_Multiplicative:l=this._shaderSets.at(v.ShaderNames_MultPremultipliedAlpha+r),_=this.gl.DST_COLOR,p=this.gl.ONE_MINUS_SRC_ALPHA,f=this.gl.ZERO,x=this.gl.ONE}if(this.gl.useProgram(l.shaderProgram),null==n.vertex&&(n.vertex=this.gl.createBuffer()),this.gl.bindBuffer(this.gl.ARRAY_BUFFER,n.vertex),this.gl.bufferData(this.gl.ARRAY_BUFFER,a,this.gl.DYNAMIC_DRAW),this.gl.enableVertexAttribArray(l.attributePositionLocation),this.gl.vertexAttribPointer(l.attributePositionLocation,2,this.gl.FLOAT,!1,0,0),null==n.uv&&(n.uv=this.gl.createBuffer()),this.gl.bindBuffer(this.gl.ARRAY_BUFFER,n.uv),this.gl.bufferData(this.gl.ARRAY_BUFFER,o,this.gl.DYNAMIC_DRAW),this.gl.enableVertexAttribArray(l.attributeTexCoordLocation),this.gl.vertexAttribPointer(l.attributeTexCoordLocation,2,this.gl.FLOAT,!1,0,0),i){this.gl.activeTexture(this.gl.TEXTURE1);const e=t.getClippingContextBufferForDraw().getClippingManager().getColorBuffer();this.gl.bindTexture(this.gl.TEXTURE_2D,e),this.gl.uniform1i(l.samplerTexture1Location,1),this.gl.uniformMatrix4fv(l.uniformClipMatrixLocation,!1,t.getClippingContextBufferForDraw()._matrixForDraw.getArray());const i=t.getClippingContextBufferForDraw()._layoutChannelNo,s=t.getClippingContextBufferForDraw().getClippingManager().getChannelFlagAsColor(i);this.gl.uniform4f(l.uniformChannelFlagLocation,s.R,s.G,s.B,s.A)}this.gl.activeTexture(this.gl.TEXTURE0),this.gl.bindTexture(this.gl.TEXTURE_2D,e),this.gl.uniform1i(l.samplerTexture0Location,0),this.gl.uniformMatrix4fv(l.uniformMatrixLocation,!1,c.getArray()),this.gl.uniform4f(l.uniformBaseColorLocation,u.R,u.G,u.B,u.A)}null==n.index&&(n.index=this.gl.createBuffer()),this.gl.bindBuffer(this.gl.ELEMENT_ARRAY_BUFFER,n.index),this.gl.bufferData(this.gl.ELEMENT_ARRAY_BUFFER,r,this.gl.DYNAMIC_DRAW),this.gl.blendFuncSeparate(_,p,f,x)}releaseShaderProgram(){for(let t=0;t<this._shaderSets.getSize();t++)this.gl.deleteProgram(this._shaderSets.at(t).shaderProgram),this._shaderSets.at(t).shaderProgram=0,this._shaderSets.set(t,void 0),this._shaderSets.set(t,null)}generateShaders(){for(let t=0;t<10;t++)this._shaderSets.pushBack(new w);this._shaderSets.at(0).shaderProgram=this.loadShaderProgram(P,L),this._shaderSets.at(1).shaderProgram=this.loadShaderProgram(R,D),this._shaderSets.at(2).shaderProgram=this.loadShaderProgram(A,T),this._shaderSets.at(3).shaderProgram=this.loadShaderProgram(A,E),this._shaderSets.at(4).shaderProgram=this._shaderSets.at(1).shaderProgram,this._shaderSets.at(5).shaderProgram=this._shaderSets.at(2).shaderProgram,this._shaderSets.at(6).shaderProgram=this._shaderSets.at(3).shaderProgram,this._shaderSets.at(7).shaderProgram=this._shaderSets.at(1).shaderProgram,this._shaderSets.at(8).shaderProgram=this._shaderSets.at(2).shaderProgram,this._shaderSets.at(9).shaderProgram=this._shaderSets.at(3).shaderProgram,this._shaderSets.at(0).attributePositionLocation=this.gl.getAttribLocation(this._shaderSets.at(0).shaderProgram,"a_position"),this._shaderSets.at(0).attributeTexCoordLocation=this.gl.getAttribLocation(this._shaderSets.at(0).shaderProgram,"a_texCoord"),this._shaderSets.at(0).samplerTexture0Location=this.gl.getUniformLocation(this._shaderSets.at(0).shaderProgram,"s_texture0"),this._shaderSets.at(0).uniformClipMatrixLocation=this.gl.getUniformLocation(this._shaderSets.at(0).shaderProgram,"u_clipMatrix"),this._shaderSets.at(0).uniformChannelFlagLocation=this.gl.getUniformLocation(this._shaderSets.at(0).shaderProgram,"u_channelFlag"),this._shaderSets.at(0).uniformBaseColorLocation=this.gl.getUniformLocation(this._shaderSets.at(0).shaderProgram,"u_baseColor"),this._shaderSets.at(1).attributePositionLocation=this.gl.getAttribLocation(this._shaderSets.at(1).shaderProgram,"a_position"),this._shaderSets.at(1).attributeTexCoordLocation=this.gl.getAttribLocation(this._shaderSets.at(1).shaderProgram,"a_texCoord"),this._shaderSets.at(1).samplerTexture0Location=this.gl.getUniformLocation(this._shaderSets.at(1).shaderProgram,"s_texture0"),this._shaderSets.at(1).uniformMatrixLocation=this.gl.getUniformLocation(this._shaderSets.at(1).shaderProgram,"u_matrix"),this._shaderSets.at(1).uniformBaseColorLocation=this.gl.getUniformLocation(this._shaderSets.at(1).shaderProgram,"u_baseColor"),this._shaderSets.at(2).attributePositionLocation=this.gl.getAttribLocation(this._shaderSets.at(2).shaderProgram,"a_position"),this._shaderSets.at(2).attributeTexCoordLocation=this.gl.getAttribLocation(this._shaderSets.at(2).shaderProgram,"a_texCoord"),this._shaderSets.at(2).samplerTexture0Location=this.gl.getUniformLocation(this._shaderSets.at(2).shaderProgram,"s_texture0"),this._shaderSets.at(2).samplerTexture1Location=this.gl.getUniformLocation(this._shaderSets.at(2).shaderProgram,"s_texture1"),this._shaderSets.at(2).uniformMatrixLocation=this.gl.getUniformLocation(this._shaderSets.at(2).shaderProgram,"u_matrix"),this._shaderSets.at(2).uniformClipMatrixLocation=this.gl.getUniformLocation(this._shaderSets.at(2).shaderProgram,"u_clipMatrix"),this._shaderSets.at(2).uniformChannelFlagLocation=this.gl.getUniformLocation(this._shaderSets.at(2).shaderProgram,"u_channelFlag"),this._shaderSets.at(2).uniformBaseColorLocation=this.gl.getUniformLocation(this._shaderSets.at(2).shaderProgram,"u_baseColor"),this._shaderSets.at(3).attributePositionLocation=this.gl.getAttribLocation(this._shaderSets.at(3).shaderProgram,"a_position"),this._shaderSets.at(3).attributeTexCoordLocation=this.gl.getAttribLocation(this._shaderSets.at(3).shaderProgram,"a_texCoord"),this._shaderSets.at(3).samplerTexture0Location=this.gl.getUniformLocation(this._shaderSets.at(3).shaderProgram,"s_texture0"),this._shaderSets.at(3).samplerTexture1Location=this.gl.getUniformLocation(this._shaderSets.at(3).shaderProgram,"s_texture1"),this._shaderSets.at(3).uniformMatrixLocation=this.gl.getUniformLocation(this._shaderSets.at(3).shaderProgram,"u_matrix"),this._shaderSets.at(3).uniformClipMatrixLocation=this.gl.getUniformLocation(this._shaderSets.at(3).shaderProgram,"u_clipMatrix"),this._shaderSets.at(3).uniformChannelFlagLocation=this.gl.getUniformLocation(this._shaderSets.at(3).shaderProgram,"u_channelFlag"),this._shaderSets.at(3).uniformBaseColorLocation=this.gl.getUniformLocation(this._shaderSets.at(3).shaderProgram,"u_baseColor"),this._shaderSets.at(4).attributePositionLocation=this.gl.getAttribLocation(this._shaderSets.at(4).shaderProgram,"a_position"),this._shaderSets.at(4).attributeTexCoordLocation=this.gl.getAttribLocation(this._shaderSets.at(4).shaderProgram,"a_texCoord"),this._shaderSets.at(4).samplerTexture0Location=this.gl.getUniformLocation(this._shaderSets.at(4).shaderProgram,"s_texture0"),this._shaderSets.at(4).uniformMatrixLocation=this.gl.getUniformLocation(this._shaderSets.at(4).shaderProgram,"u_matrix"),this._shaderSets.at(4).uniformBaseColorLocation=this.gl.getUniformLocation(this._shaderSets.at(4).shaderProgram,"u_baseColor"),this._shaderSets.at(5).attributePositionLocation=this.gl.getAttribLocation(this._shaderSets.at(5).shaderProgram,"a_position"),this._shaderSets.at(5).attributeTexCoordLocation=this.gl.getAttribLocation(this._shaderSets.at(5).shaderProgram,"a_texCoord"),this._shaderSets.at(5).samplerTexture0Location=this.gl.getUniformLocation(this._shaderSets.at(5).shaderProgram,"s_texture0"),this._shaderSets.at(5).samplerTexture1Location=this.gl.getUniformLocation(this._shaderSets.at(5).shaderProgram,"s_texture1"),this._shaderSets.at(5).uniformMatrixLocation=this.gl.getUniformLocation(this._shaderSets.at(5).shaderProgram,"u_matrix"),this._shaderSets.at(5).uniformClipMatrixLocation=this.gl.getUniformLocation(this._shaderSets.at(5).shaderProgram,"u_clipMatrix"),this._shaderSets.at(5).uniformChannelFlagLocation=this.gl.getUniformLocation(this._shaderSets.at(5).shaderProgram,"u_channelFlag"),this._shaderSets.at(5).uniformBaseColorLocation=this.gl.getUniformLocation(this._shaderSets.at(5).shaderProgram,"u_baseColor"),this._shaderSets.at(6).attributePositionLocation=this.gl.getAttribLocation(this._shaderSets.at(6).shaderProgram,"a_position"),this._shaderSets.at(6).attributeTexCoordLocation=this.gl.getAttribLocation(this._shaderSets.at(6).shaderProgram,"a_texCoord"),this._shaderSets.at(6).samplerTexture0Location=this.gl.getUniformLocation(this._shaderSets.at(6).shaderProgram,"s_texture0"),this._shaderSets.at(6).samplerTexture1Location=this.gl.getUniformLocation(this._shaderSets.at(6).shaderProgram,"s_texture1"),this._shaderSets.at(6).uniformMatrixLocation=this.gl.getUniformLocation(this._shaderSets.at(6).shaderProgram,"u_matrix"),this._shaderSets.at(6).uniformClipMatrixLocation=this.gl.getUniformLocation(this._shaderSets.at(6).shaderProgram,"u_clipMatrix"),this._shaderSets.at(6).uniformChannelFlagLocation=this.gl.getUniformLocation(this._shaderSets.at(6).shaderProgram,"u_channelFlag"),this._shaderSets.at(6).uniformBaseColorLocation=this.gl.getUniformLocation(this._shaderSets.at(6).shaderProgram,"u_baseColor"),this._shaderSets.at(7).attributePositionLocation=this.gl.getAttribLocation(this._shaderSets.at(7).shaderProgram,"a_position"),this._shaderSets.at(7).attributeTexCoordLocation=this.gl.getAttribLocation(this._shaderSets.at(7).shaderProgram,"a_texCoord"),this._shaderSets.at(7).samplerTexture0Location=this.gl.getUniformLocation(this._shaderSets.at(7).shaderProgram,"s_texture0"),this._shaderSets.at(7).uniformMatrixLocation=this.gl.getUniformLocation(this._shaderSets.at(7).shaderProgram,"u_matrix"),this._shaderSets.at(7).uniformBaseColorLocation=this.gl.getUniformLocation(this._shaderSets.at(7).shaderProgram,"u_baseColor"),this._shaderSets.at(8).attributePositionLocation=this.gl.getAttribLocation(this._shaderSets.at(8).shaderProgram,"a_position"),this._shaderSets.at(8).attributeTexCoordLocation=this.gl.getAttribLocation(this._shaderSets.at(8).shaderProgram,"a_texCoord"),this._shaderSets.at(8).samplerTexture0Location=this.gl.getUniformLocation(this._shaderSets.at(8).shaderProgram,"s_texture0"),this._shaderSets.at(8).samplerTexture1Location=this.gl.getUniformLocation(this._shaderSets.at(8).shaderProgram,"s_texture1"),this._shaderSets.at(8).uniformMatrixLocation=this.gl.getUniformLocation(this._shaderSets.at(8).shaderProgram,"u_matrix"),this._shaderSets.at(8).uniformClipMatrixLocation=this.gl.getUniformLocation(this._shaderSets.at(8).shaderProgram,"u_clipMatrix"),this._shaderSets.at(8).uniformChannelFlagLocation=this.gl.getUniformLocation(this._shaderSets.at(8).shaderProgram,"u_channelFlag"),this._shaderSets.at(8).uniformBaseColorLocation=this.gl.getUniformLocation(this._shaderSets.at(8).shaderProgram,"u_baseColor"),this._shaderSets.at(9).attributePositionLocation=this.gl.getAttribLocation(this._shaderSets.at(9).shaderProgram,"a_position"),this._shaderSets.at(9).attributeTexCoordLocation=this.gl.getAttribLocation(this._shaderSets.at(9).shaderProgram,"a_texCoord"),this._shaderSets.at(9).samplerTexture0Location=this.gl.getUniformLocation(this._shaderSets.at(9).shaderProgram,"s_texture0"),this._shaderSets.at(9).samplerTexture1Location=this.gl.getUniformLocation(this._shaderSets.at(9).shaderProgram,"s_texture1"),this._shaderSets.at(9).uniformMatrixLocation=this.gl.getUniformLocation(this._shaderSets.at(9).shaderProgram,"u_matrix"),this._shaderSets.at(9).uniformClipMatrixLocation=this.gl.getUniformLocation(this._shaderSets.at(9).shaderProgram,"u_clipMatrix"),this._shaderSets.at(9).uniformChannelFlagLocation=this.gl.getUniformLocation(this._shaderSets.at(9).shaderProgram,"u_channelFlag"),this._shaderSets.at(9).uniformBaseColorLocation=this.gl.getUniformLocation(this._shaderSets.at(9).shaderProgram,"u_baseColor")}loadShaderProgram(t,e){let i=this.gl.createProgram(),s=this.compileShaderSource(this.gl.VERTEX_SHADER,t);if(!s)return m("Vertex shader compile error!"),0;let a=this.compileShaderSource(this.gl.FRAGMENT_SHADER,e);return a?(this.gl.attachShader(i,s),this.gl.attachShader(i,a),this.gl.linkProgram(i),this.gl.getProgramParameter(i,this.gl.LINK_STATUS)?(this.gl.deleteShader(s),this.gl.deleteShader(a),i):(m("Failed to link program: {0}",i),this.gl.deleteShader(s),s=0,this.gl.deleteShader(a),a=0,i&&(this.gl.deleteProgram(i),i=0),0)):(m("Vertex shader compile error!"),0)}compileShaderSource(t,e){const i=e,s=this.gl.createShader(t);return this.gl.shaderSource(s,i),this.gl.compileShader(s),s||m("Shader compile log: {0} ",this.gl.getShaderInfoLog(s)),this.gl.getShaderParameter(s,this.gl.COMPILE_STATUS)?s:(this.gl.deleteShader(s),null)}setGl(t){this.gl=t}}class w{constructor(){this.shaderProgram=null,this.attributePositionLocation=null,this.attributeTexCoordLocation=null,this.uniformMatrixLocation=null,this.uniformClipMatrixLocation=null,this.uniformClipMatrixLocation=null,this.samplerTexture0Location=null,this.samplerTexture1Location=null,this.uniformBaseColorLocation=null,this.uniformChannelFlagLocation=null}}var v;!function(t){t[t.ShaderNames_SetupMask=0]="ShaderNames_SetupMask",t[t.ShaderNames_NormalPremultipliedAlpha=1]="ShaderNames_NormalPremultipliedAlpha",t[t.ShaderNames_NormalMaskedPremultipliedAlpha=2]="ShaderNames_NormalMaskedPremultipliedAlpha",t[t.ShaderNames_NomralMaskedInvertedPremultipliedAlpha=3]="ShaderNames_NomralMaskedInvertedPremultipliedAlpha",t[t.ShaderNames_AddPremultipliedAlpha=4]="ShaderNames_AddPremultipliedAlpha",t[t.ShaderNames_AddMaskedPremultipliedAlpha=5]="ShaderNames_AddMaskedPremultipliedAlpha",t[t.ShaderNames_AddMaskedPremultipliedAlphaInverted=6]="ShaderNames_AddMaskedPremultipliedAlphaInverted",t[t.ShaderNames_MultPremultipliedAlpha=7]="ShaderNames_MultPremultipliedAlpha",t[t.ShaderNames_MultMaskedPremultipliedAlpha=8]="ShaderNames_MultMaskedPremultipliedAlpha",t[t.ShaderNames_MultMaskedPremultipliedAlphaInverted=9]="ShaderNames_MultMaskedPremultipliedAlphaInverted"}(v||(v={}));const P="attribute vec4     a_position;attribute vec2     a_texCoord;varying vec2       v_texCoord;varying vec4       v_myPos;uniform mat4       u_clipMatrix;void main(){   gl_Position = u_clipMatrix * a_position;   v_myPos = u_clipMatrix * a_position;   v_texCoord = a_texCoord; v_texCoord.y = 1.0 - v_texCoord.y;}",L="precision mediump float;varying vec2       v_texCoord;varying vec4       v_myPos;uniform vec4       u_baseColor;uniform vec4       u_channelFlag;uniform sampler2D  s_texture0;void main(){float isInside =       step(u_baseColor.x, v_myPos.x/v_myPos.w)       * step(u_baseColor.y, v_myPos.y/v_myPos.w)       * step(v_myPos.x/v_myPos.w, u_baseColor.z)       * step(v_myPos.y/v_myPos.w, u_baseColor.w);   gl_FragColor = u_channelFlag * texture2D(s_texture0, v_texCoord).a * isInside;}",R="attribute vec4     a_position;attribute vec2     a_texCoord;varying vec2       v_texCoord;uniform mat4       u_matrix;void main(){   gl_Position = u_matrix * a_position;   v_texCoord = a_texCoord; v_texCoord.y = 1.0 - v_texCoord.y;}",A="attribute vec4     a_position;attribute vec2     a_texCoord;varying vec2       v_texCoord;varying vec4       v_clipPos;uniform mat4       u_matrix;uniform mat4       u_clipMatrix;void main(){   gl_Position = u_matrix * a_position;   v_clipPos = u_clipMatrix * a_position;   v_texCoord = a_texCoord; v_texCoord.y = 1.0 - v_texCoord.y;}",D="precision mediump float;varying vec2       v_texCoord;uniform vec4       u_baseColor;uniform sampler2D  s_texture0;void main(){   gl_FragColor = texture2D(s_texture0 , v_texCoord) * u_baseColor;}",T="precision mediump float;varying vec2       v_texCoord;varying vec4       v_clipPos;uniform vec4       u_baseColor;uniform vec4       u_channelFlag;uniform sampler2D  s_texture0;uniform sampler2D  s_texture1;void main(){   vec4 col_formask = texture2D(s_texture0 , v_texCoord) * u_baseColor;   vec4 clipMask = (1.0 - texture2D(s_texture1, v_clipPos.xy / v_clipPos.w)) * u_channelFlag;   float maskVal = clipMask.r + clipMask.g + clipMask.b + clipMask.a;col_formask = col_formask * maskVal;   gl_FragColor = col_formask;}",E="precision mediump float;varying vec2 v_texCoord;varying vec4 v_clipPos;uniform sampler2D s_texture0;uniform sampler2D s_texture1;uniform vec4 u_channelFlag;uniform vec4 u_baseColor;void main(){vec4 col_formask = texture2D(s_texture0, v_texCoord) * u_baseColor;vec4 clipMask = (1.0 - texture2D(s_texture1, v_clipPos.xy / v_clipPos.w)) * u_channelFlag;float maskVal = clipMask.r + clipMask.g + clipMask.b + clipMask.a;col_formask = col_formask * (1.0 - maskVal);gl_FragColor = col_formask;}";class B extends o{initialize(t){t.isUsingMasking()&&(this._clippingManager=new S,this._clippingManager.initialize(t,t.getDrawableCount(),t.getDrawableMasks(),t.getDrawableMaskCounts())),this._sortedDrawableIndexList.resize(t.getDrawableCount(),0),super.initialize(t)}bindTexture(t,e){this._textures.setValue(t,e)}getBindedTextures(){return this._textures}setClippingMaskBufferSize(t){this._clippingManager.release(),this._clippingManager=void 0,this._clippingManager=null,this._clippingManager=new S,this._clippingManager.setClippingMaskBufferSize(t),this._clippingManager.initialize(this.getModel(),this.getModel().getDrawableCount(),this.getModel().getDrawableMasks(),this.getModel().getDrawableMaskCounts())}getClippingMaskBufferSize(){return this._clippingManager.getClippingMaskBufferSize()}constructor(){super(),this.gl=null,this._clippingContextBufferForMask=null,this._clippingContextBufferForDraw=null,this._clippingManager=new S,this.firstDraw=!0,this._textures=new u,this._sortedDrawableIndexList=new p.S3,this._bufferData={vertex:WebGLBuffer=null,uv:WebGLBuffer=null,index:WebGLBuffer=null},this._textures.prepareCapacity(32,!0)}release(){this._clippingManager.release(),this._clippingManager=void 0,this._clippingManager=null,this.gl.deleteBuffer(this._bufferData.vertex),this._bufferData.vertex=null,this.gl.deleteBuffer(this._bufferData.uv),this._bufferData.uv=null,this.gl.deleteBuffer(this._bufferData.index),this._bufferData.index=null,this._bufferData=null,this._textures=null}doDrawModel(){null!=this._clippingManager&&(this.preDraw(),this._clippingManager.setupClippingContext(this.getModel(),this)),this.preDraw();const t=this.getModel().getDrawableCount(),e=this.getModel().getDrawableRenderOrders();for(let i=0;i<t;++i){const t=e[i];this._sortedDrawableIndexList.set(t,i)}for(let e=0;e<t;++e){const t=this._sortedDrawableIndexList.at(e);this.getModel().getDrawableDynamicFlagIsVisible(t)&&(this.setClippingContextBufferForDraw(null!=this._clippingManager?this._clippingManager.getClippingContextListForDraw().at(t):null),this.setIsCulling(this.getModel().getDrawableCulling(t)),this.drawMesh(this.getModel().getDrawableTextureIndices(t),this.getModel().getDrawableVertexIndexCount(t),this.getModel().getDrawableVertexCount(t),this.getModel().getDrawableVertexIndices(t),this.getModel().getDrawableVertices(t),this.getModel().getDrawableVertexUvs(t),this.getModel().getDrawableOpacity(t),this.getModel().getDrawableBlendMode(t),this.getModel().getDrawableInvertedMaskBit(t)))}}drawMesh(t,e,i,s,a,r,o,n,l){this.isCulling()?this.gl.enable(this.gl.CULL_FACE):this.gl.disable(this.gl.CULL_FACE),this.gl.frontFace(this.gl.CCW);const h=this.getModelColor();let u;null==this.getClippingContextBufferForMask()&&(h.A*=o,this.isPremultipliedAlpha()&&(h.R*=h.A,h.G*=h.A,h.B*=h.A)),u=null!=this._textures.getValue(t)?this._textures.getValue(t):null,b.getInstance().setupShaderProgram(this,u,i,a,s,r,this._bufferData,o,n,h,this.isPremultipliedAlpha(),this.getMvpMatrix(),l),this.gl.drawElements(this.gl.TRIANGLES,e,this.gl.UNSIGNED_SHORT,0),this.gl.useProgram(null),this.setClippingContextBufferForDraw(null),this.setClippingContextBufferForMask(null)}static doStaticRelease(){b.deleteInstance()}setRenderState(t,e){y=t,x=e}preDraw(){this.firstDraw&&(this.firstDraw=!1,this._anisortopy=this.gl.getExtension("EXT_texture_filter_anisotropic")||this.gl.getExtension("WEBKIT_EXT_texture_filter_anisotropic")||this.gl.getExtension("MOZ_EXT_texture_filter_anisotropic")),this.gl.disable(this.gl.SCISSOR_TEST),this.gl.disable(this.gl.STENCIL_TEST),this.gl.disable(this.gl.DEPTH_TEST),this.gl.frontFace(this.gl.CW),this.gl.enable(this.gl.BLEND),this.gl.colorMask(!0,!0,!0,!0),this.gl.bindBuffer(this.gl.ARRAY_BUFFER,null),this.gl.bindBuffer(this.gl.ELEMENT_ARRAY_BUFFER,null)}setClippingContextBufferForMask(t){this._clippingContextBufferForMask=t}getClippingContextBufferForMask(){return this._clippingContextBufferForMask}setClippingContextBufferForDraw(t){this._clippingContextBufferForDraw=t}getClippingContextBufferForDraw(){return this._clippingContextBufferForDraw}startUp(t){this.gl=t,this._clippingManager.setGL(t),b.getInstance().setGl(t)}}var F;o.staticRelease=()=>{B.doStaticRelease()},function(t){t.CubismClippingContext=M,t.CubismClippingManager_WebGL=S,t.CubismRenderTextureResource=C,t.CubismRenderer_WebGL=B,t.CubismShaderSet=w,t.CubismShader_WebGL=b,t.ShaderNames=v}(F||(F={}));class I extends class{constructor(){this._model=null}initialize(t){this._model=t}getParameterIndex(t){let e=this._model.parameters.ids.indexOf(t);return e>=0?e:this._model.parameters.count}getDrawableDrawOrders(){return this._model.drawables.drawOrders}getDrawableRenderOrders(){return this._model.drawables.renderOrders}getDrawableTextureIndices(t){return this._model.drawables.textureIndices[t]}getDrawableVertexUvs(t){return this._model.drawables.vertexUvs[t]}getDrawableVertexIndexCount(t){return this._model.drawables.indexCounts[t]}getDrawableVertexIndices(t){return this._model.drawables.indices[t]}getDrawableVertexCount(t){return this._model.drawables.vertexCounts[t]}getDrawableVertices(t){return this._model.drawables.vertexPositions[t]}getDrawableCulling(t){const e=this._model.drawables.constantFlags;return!Live2DCubismCore.Utils.hasIsDoubleSidedBit(e[t])}getDrawableOpacity(t){return this._model.drawables.opacities[t]}getDrawableCount(){return this._model.drawables.count}getDrawableMasks(){return this._model.drawables.masks}getDrawableMaskCounts(){return this._model.drawables.maskCounts}isUsingMasking(){for(let t=0;t<this._model.drawables.count;++t)if(!(this._model.drawables.maskCounts[t]<=0))return!0;return!1}getDrawableBlendMode(t){const e=this._model.drawables.constantFlags;return Live2DCubismCore.Utils.hasBlendAdditiveBit(e[t])?s.CubismBlendMode_Additive:Live2DCubismCore.Utils.hasBlendMultiplicativeBit(e[t])?s.CubismBlendMode_Multiplicative:s.CubismBlendMode_Normal}getDrawableInvertedMaskBit(t){const e=this._model.drawables.constantFlags;return Live2DCubismCore.Utils.hasIsInvertedMaskBit(e[t])}getDrawableDynamicFlagVertexPositionsDidChange(t){const e=this._model.drawables.dynamicFlags;return Live2DCubismCore.Utils.hasVertexPositionsDidChangeBit(e[t])}getDrawableDynamicFlagIsVisible(t){const e=this._model.drawables.dynamicFlags;return Live2DCubismCore.Utils.hasIsVisibleBit(e[t])}}{constructor(t,e){super();const i=Live2DCubismCore.Moc.fromArrayBuffer(t);this._model=Live2DCubismCore.Model.fromMoc(i),this.initialize(this._model),this.renderer=new B,this.renderer.initialize(this),this.renderer.setIsPremultipliedAlpha(!0),this.renderer.startUp(e)}release(){this._model.release(),this.renderer.release()}setParam(t,e){let i=this._model.parameters.ids.indexOf(t);e=Math.max(e,this._model.parameters.minimumValues[i]),e=Math.min(e,this._model.parameters.maximumValues[i]),this._model.parameters.values[i]=e}}},178:function(t,e,i){Object.defineProperty(e,"__esModule",{value:!0});const s=i(629),a=i(675),r=i(464),o=i(859),n=i(889),l=i(972),h=i(35),u=i(334),d=i(351),c=i(518),g=i(409),_=i(379),p=1/59,m=1/61;let f=0;e.default=new class{constructor(){this.assets=new o.AssetStore,this.state=new l.WorldState(this.assets),this.canvas=new s.Canvas(this.state),this.events=new c.Events(this.state.input),this.webgl=new r.WebGL(this.canvas.element),this.loader=new a.Loader(this.webgl,this.assets,this.state.models,this.state.motions,this.state.loader),this.messenger=new d.Messenger(this.state,this.loader,this.assets),this.setupScene().then((()=>{this.messenger.sendMessage(d.MessageType.CS_Loaded,null),this.run()})),this.loadMetadata()}getLayer(t){return g.ModelLayer[t]}getValue(t){if("Outfit"===t)return"Outfit/"+["Ace_Of_Spades","Magic_Apprentice","Silverhorn","Sweater_Vest","White_Tank_Top"][Math.floor(100*Math.random())%5]}async loadMetadata(){const t=window.location.pathname;if(t.includes("embed")){const e=t.split("/")[2];try{const t=await fetch(`https://regen.asunaverse.com/api/metadata/${e}`);if(200===t.status){(await t.json()).attributes.forEach((async t=>{const e=`model/${this.getValue(t.trait_type)}`,i=this.getLayer(t.trait_type);if(!e.includes("undefined")&&i){console.log({layer:i}),console.log({id:e});const t={id:0,type:d.MessageType.SC_SwapModel,payload:{layer:i,id:e}};await this.messenger.updateModel(t)}}))}}catch(t){console.log(t)}}}async setupScene(){this.loader.resetLoader(n.LoaderStatus.PRELOAD),await this.loader.loadAll([this.loader.loadModelAsset("model/Body/Body"),this.loader.loadModelAsset("model/Outfit/Ace_Of_Spades")]),this.loader.reinitialize(),this.state.models.data[g.ModelLayer.Outfit]=new _.Model(this.assets.get("model/Outfit/Ace_Of_Spades"))}run(){let t=performance.now();const e=i=>{const s=(i-t)/1e3;t=i,f+=s,f>m&&((0,h.update)(this.state,p),(0,u.render)(this.webgl,this.state),f-=p,f=Math.max(Math.min(f,m),0)),requestAnimationFrame(e)};requestAnimationFrame(e)}teardown(){}}},629:function(t,e,i){Object.defineProperty(e,"__esModule",{value:!0}),e.Canvas=void 0;const s=i(287);e.Canvas=class{constructor(t){this.state=t,this.element=document.createElement("canvas"),this.resizeCanvas(),this.state.input.x=this.state.view.width/2,this.state.input.y=this.state.view.height/2,document.body.appendChild(this.element),window.onresize=this.resizeCanvas.bind(this)}resizeCanvas(){this.element.width=s.ENHANCE_RES*window.innerWidth,this.element.height=s.ENHANCE_RES*window.innerHeight,this.state.view.width=this.element.width,this.state.view.height=this.element.height,this.element.style.width=`${window.innerWidth}px`,this.element.style.height=`${window.innerHeight}px`,this.state.view.mvp.loadIdentity(),this.state.view.mvp.scale(s.MVP_SCALE*this.state.view.height/this.state.view.width,1*s.MVP_SCALE),this.state.view.mvp.translateY(.2)}}},518:function(t,e,i){Object.defineProperty(e,"__esModule",{value:!0}),e.Events=void 0;const s=i(287);e.Events=class{constructor(t){this.inputState=t,window.addEventListener("mousedown",(t=>{this.inputState.mouseDown=!0,this.inputState.drag=!0})),window.addEventListener("mouseup",(t=>{this.inputState.drag=!1})),window.addEventListener("mousemove",(t=>{this.inputState.x=s.ENHANCE_RES*t.offsetX,this.inputState.y=s.ENHANCE_RES*t.offsetY,this.inputState.lastUpdated=Date.now()}))}}},675:function(t,e,i){var s=this&&this.__createBinding||(Object.create?function(t,e,i,s){void 0===s&&(s=i),Object.defineProperty(t,s,{enumerable:!0,get:function(){return e[i]}})}:function(t,e,i,s){void 0===s&&(s=i),t[s]=e[i]}),a=this&&this.__setModuleDefault||(Object.create?function(t,e){Object.defineProperty(t,"default",{enumerable:!0,value:e})}:function(t,e){t.default=e}),r=this&&this.__importStar||function(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var i in t)"default"!==i&&Object.prototype.hasOwnProperty.call(t,i)&&s(e,t,i);return a(e,t),e};Object.defineProperty(e,"__esModule",{value:!0}),e.Loader=e.FetchFormat=void 0;const o=r(i(287)),n=i(762),l=i(355),h=i(889),u=i(409),d=i(379);var c;!function(t){t[t.Buffer=0]="Buffer",t[t.JSON=1]="JSON",t[t.Image=2]="Image"}(c=e.FetchFormat||(e.FetchFormat={})),e.Loader=class{constructor(t,e,i,s,a){this.webgl=t,this.assetStore=e,this.models=i,this.motions=s,this.loaderState=a,this.lastId=0}resetLoader(t){this.loaderState.status=t,this.loaderState.errorStatus=!1,this.loaderState.error="",this.loaderState.done=0,this.loaderState.total=0}async loadAll(t){try{let e=await Promise.all(t);return this.loaderState.status=h.LoaderStatus.READY,e}catch(t){throw this.loaderState.status=h.LoaderStatus.ERROR,this.loaderState.errorStatus=!0,this.loaderState.error=`Failed to load resources: ${t}`,console.error(this.loaderState.error),t}}async loadModelAsset(t){if(this.assetStore.has(t))return Promise.resolve(this.assetStore.get(t));this.incTotalProgress(10);const e=`${o.URL_CDN}${t}/`,i=t.split("/")[2],s=await this.fetchResource(`${e}${i}${o.EXT_MANIFEST}`,c.JSON),a=s.FileReferences.Motions?Object.values(s.FileReferences.Motions).flat().map((t=>e+t.File)):[],r=e+s.FileReferences.Moc,l=[e+s.FileReferences.Physics,...a],h=s.FileReferences.Textures.map(((e,s)=>`${t}/${i}.00/texture_${String(s).padStart(2,"0")}`)),u=await Promise.all([this.fetchResource(r,c.Buffer),...l.map((t=>this.fetchResource(t,c.JSON))),...h.map(this.loadTexture.bind(this))]),d=u[0],g=u[1],_=(u.slice(2,2+a.length),u.slice(2+a.length)),p=new n.Live2dModel({id:t,setting:s,physicsJSON:g||null,modelData:d,gl:this.webgl.gl});return _.map(((t,e)=>{p.renderer.bindTexture(e,t.data)})),console.log(p._model),this.assetStore.set(t,p),p}async loadTexture(t){const e=`${o.URL_CDN}${t}`,i=await this.fetchResource(`${e}${o.EXT_TEXTURE}`,c.Image),s=this.webgl.bindTexture(i,!0),a=new l.Texture({id:t,width:i.width,height:i.height,data:s,elem:i,premultiply:!0});return this.assetStore.set(t,a),a}async fetchResource(t,e){try{if(e===c.Buffer)return(await fetch(t)).arrayBuffer();if(e===c.JSON)return(await fetch(t)).json();if(e===c.Image){let e=new Image;return new Promise(((i,s)=>{e.onload=()=>i(e),e.onerror=()=>s("Error loading image"),e.crossOrigin="anonymous",e.src=t}))}}catch(e){throw`Failed to fetch ${t}`}}async reinitialize(){let t=this.models.data;for(let e of Object.keys(t))null!==t[e]&&(this.assetStore.delete(t[e].asset.id),t[e]=null);await this.loadModelAsset("model/Body/Body"),t[u.ModelLayer.Body]=new d.Model(this.assetStore.get("model/Body/Body"))}incProgress(t=1){this.loaderState.status!==h.LoaderStatus.PRELOAD&&this.loaderState.status!==h.LoaderStatus.LOAD||(this.loaderState.done+=t)}incTotalProgress(t=1){this.loaderState.status!==h.LoaderStatus.PRELOAD&&this.loaderState.status!==h.LoaderStatus.LOAD||(this.loaderState.total+=t)}release(t){}}},464:function(t,e){Object.defineProperty(e,"__esModule",{value:!0}),e.WebGL=void 0,e.WebGL=class{constructor(t){if(this.gl=t.getContext("webgl")||t.getContext("experimental-webgl"),!this.gl)throw document.body.innerHTML="WebGL failed to initialize.",new Error("unable to init webgl");this.framebuffer=this.gl.getParameter(this.gl.FRAMEBUFFER_BINDING)}bindTexture(t,e){const i=this.gl;let s=i.createTexture();return i.bindTexture(i.TEXTURE_2D,s),i.texParameteri(i.TEXTURE_2D,i.TEXTURE_MIN_FILTER,i.LINEAR_MIPMAP_LINEAR),i.texParameteri(i.TEXTURE_2D,i.TEXTURE_MAG_FILTER,i.LINEAR),e&&i.pixelStorei(i.UNPACK_PREMULTIPLY_ALPHA_WEBGL,1),i.texImage2D(i.TEXTURE_2D,0,i.RGBA,i.RGBA,i.UNSIGNED_BYTE,t),i.generateMipmap(i.TEXTURE_2D),i.bindTexture(i.TEXTURE_2D,null),s}}},859:function(t,e){var i;Object.defineProperty(e,"__esModule",{value:!0}),e.AssetStore=void 0,function(t){t.Model="model",t.Texture="texture"}(i||(i={})),e.AssetStore=class{constructor(){this.modelRegistry={},this.textureRegistry={}}has(t){const e=this.getAssetType(t);return e===i.Model?t in this.modelRegistry:e===i.Texture&&t in this.textureRegistry}get(t){const e=this.getAssetType(t);if(e===i.Model){if(!(t in this.modelRegistry))throw`Asset not found ${t}`;return this.modelRegistry[t]}if(e===i.Texture){if(!(t in this.textureRegistry))throw`Asset not found ${t}`;return this.textureRegistry[t]}}set(t,e){const s=this.getAssetType(t);return s===i.Model?this.modelRegistry[t]=e:s===i.Texture&&(this.textureRegistry[t]=e),e}delete(t){this.getAssetType(t)===i.Model&&(this.modelRegistry[t].release(),delete this.modelRegistry[t])}getAssetType(t){if(t.startsWith(i.Model))return i.Model;if(t.startsWith(i.Texture))return i.Texture;throw`Unknown asset type ${t}`}}},762:function(t,e,i){Object.defineProperty(e,"__esModule",{value:!0}),e.Live2dModel=void 0;const s=i(375),a=i(49);class r extends a.Model{constructor(t){super(t.modelData,t.gl),this.physics=t.physicsJSON?s.CubismPhysics.create(t.physicsJSON):null,this.id=t.id,this.setting=t.setting,this.motions={}}release(){super.release()}}e.Live2dModel=r},355:function(t,e){Object.defineProperty(e,"__esModule",{value:!0}),e.Texture=void 0,e.Texture=class{constructor({id:t,width:e,height:i,data:s,elem:a,premultiply:r=!0}){this.id=t,this.width=e,this.height=i,this.data=s,this.elem=a,this.premultiply=r}}},287:function(t,e){Object.defineProperty(e,"__esModule",{value:!0}),e.MVP_SCALE=e.ENHANCE_RES=e.EXT_TEXTURE=e.EXT_MANIFEST=e.URL_CDN=void 0,e.URL_CDN="/assets/",e.EXT_MANIFEST=".model3.json",e.EXT_TEXTURE=".png",e.ENHANCE_RES=2,e.MVP_SCALE=2.55},247:function(t,e){Object.defineProperty(e,"__esModule",{value:!0})},351:function(t,e,i){Object.defineProperty(e,"__esModule",{value:!0}),e.Messenger=e.MessageType=void 0;const s=i(379),a=window.location.origin;var r;!function(t){t[t.CS_Loaded=0]="CS_Loaded",t[t.CS_Complete=1]="CS_Complete",t[t.SC_SwapModel=2]="SC_SwapModel",t[t.SC_SwapTexture=3]="SC_SwapTexture",t[t.SC_SetParameterOverride=4]="SC_SetParameterOverride",t[t.SC_SetParameters=5]="SC_SetParameters"}(r=e.MessageType||(e.MessageType={})),e.Messenger=class{constructor(t,e,i){this.state=t,this.loader=e,this.assetStore=i,this.parentWindow=window.parent||null,this.parentWindow&&window.addEventListener("message",(async t=>{var o;if(t.origin!==a)throw"Message origin does not match";const n=t.data;if(n.type===r.SC_SwapModel){const t=n.payload;await this.loader.reinitialize(),await this.loader.loadModelAsset(t.id);let e=new s.Model(this.assetStore.get(t.id));this.state.models.data[t.layer]=e,this.sendMessage(r.CS_Complete,null,n.id)}else if(n.type===r.SC_SwapTexture){const t=n.payload;if(!i.has(t.modelId))throw`Asset '${t.modelId}' not found`;const s=i.get(t.modelId),a=`texture/${t.modelId.split("/")[1]}.${t.index}/${String(t.variant).padStart(2,"0")}`,l=await e.loadTexture(a);null===(o=s.renderer)||void 0===o||o.bindTexture(t.index,l.data),this.sendMessage(r.CS_Complete,null,n.id)}else if(n.type===r.SC_SetParameterOverride){const t=n.payload;this.state.external.override=t.override,this.sendMessage(r.CS_Complete,null,n.id)}else if(n.type===r.SC_SetParameters){const t=n.payload;this.state.external.faceX=t.faceX/50-1,this.state.external.faceY=t.faceY/50-1,this.state.external.bodyX=t.bodyX/50-1,this.state.external.bodyY=t.bodyY/50-1,this.sendMessage(r.CS_Complete,null,n.id)}}))}sendMessage(t,e,i){if(!this.parentWindow)return;const s={id:i||0,type:t,payload:e};this.parentWindow.postMessage(s,a)}async updateModel(t){console.log("Update model",t);const e=t.payload;await this.loader.reinitialize(),await this.loader.loadModelAsset(e.id);let i=new s.Model(this.assetStore.get(e.id));this.state.models.data[e.layer]=i,this.sendMessage(r.CS_Complete,null,t.id)}}},607:function(t,e,i){var s=this&&this.__createBinding||(Object.create?function(t,e,i,s){void 0===s&&(s=i),Object.defineProperty(t,s,{enumerable:!0,get:function(){return e[i]}})}:function(t,e,i,s){void 0===s&&(s=i),t[s]=e[i]}),a=this&&this.__exportStar||function(t,e){for(var i in t)"default"===i||Object.prototype.hasOwnProperty.call(e,i)||s(e,t,i)};Object.defineProperty(e,"__esModule",{value:!0}),i(178),a(i(351),e),a(i(247),e)},334:function(t,e){Object.defineProperty(e,"__esModule",{value:!0}),e.render=void 0,e.render=function({gl:t,framebuffer:e},i){for(let t of Object.values(i.models.data)){if(null===t)continue;t.asset.renderer.setMvpMatrix(i.view.mvp),t.asset.renderer.setRenderState(e,[0,0,i.view.width,i.view.height]);let s=t.asset.renderer;null!=s._clippingManager&&(s.preDraw(),s._clippingManager.setupClippingContext(s.getModel(),s)),s.preDraw()}let s=[];for(let[t,e]of Object.values(i.models.data).entries()){if(null===e)continue;let t=e.asset.renderer,i=t.getModel().getDrawableDrawOrders(),a=t.getModel().getDrawableRenderOrders();for(let e=0;e<i.length;e++)s.push({r:t,i:e,rr:a[e],d:i[e]})}s.sort(((t,e)=>t.d===e.d?t.rr-e.rr:t.d-e.d));for(let t of s){let e=t.r;e.getModel().getDrawableDynamicFlagIsVisible(t.i)&&(e.setClippingContextBufferForDraw(null!=e._clippingManager?e._clippingManager.getClippingContextListForDraw().at(t.i):null),e.setIsCulling(e.getModel().getDrawableCulling(t.i)),e.drawMesh(e.getModel().getDrawableTextureIndices(t.i),e.getModel().getDrawableVertexIndexCount(t.i),e.getModel().getDrawableVertexCount(t.i),e.getModel().getDrawableVertexIndices(t.i),e.getModel().getDrawableVertices(t.i),e.getModel().getDrawableVertexUvs(t.i),e.getModel().getDrawableOpacity(t.i),e.getModel().getDrawableBlendMode(t.i),e.getModel().getDrawableInvertedMaskBit(t.i)))}}},166:function(t,e){Object.defineProperty(e,"__esModule",{value:!0}),e.ExternalState=void 0,e.ExternalState=class{constructor(){this.override=!1,this.faceX=0,this.faceY=0,this.bodyX=0,this.bodyY=0}}},321:function(t,e){Object.defineProperty(e,"__esModule",{value:!0}),e.InputState=void 0,e.InputState=class{constructor(){this.x=0,this.y=0,this.mouseDown=!1,this.drag=!1,this.lastUpdated=Date.now()}}},889:function(t,e){var i;Object.defineProperty(e,"__esModule",{value:!0}),e.LoaderState=e.LoaderStatus=void 0,function(t){t[t.PRELOAD=0]="PRELOAD",t[t.LOAD=1]="LOAD",t[t.READY=2]="READY",t[t.ERROR=3]="ERROR"}(i=e.LoaderStatus||(e.LoaderStatus={})),e.LoaderState=class{constructor(){this.status=i.PRELOAD,this.errorStatus=!1,this.error="",this.done=0,this.total=0}getProgress(){return 0===this.total?0:Math.max(0,Math.min(100,Math.floor(100*this.done/this.total)))}}},409:function(t,e){var i;Object.defineProperty(e,"__esModule",{value:!0}),e.ModelState=e.ModelLayer=void 0,function(t){t[t.BackHair=0]="BackHair",t[t.Body=1]="Body",t[t.Eyes=2]="Eyes",t[t.FrontHair=3]="FrontHair",t[t.Outfit=4]="Outfit"}(i=e.ModelLayer||(e.ModelLayer={})),e.ModelState=class{constructor(t){this.assets=t,this.data={[i.BackHair]:null,[i.Body]:null,[i.Eyes]:null,[i.FrontHair]:null,[i.Outfit]:null}}}},436:function(t,e,i){Object.defineProperty(e,"__esModule",{value:!0}),e.ViewState=void 0;const s=i(932);e.ViewState=class{constructor(){this.width=0,this.height=0,this.mvp=new s.CubismMatrix44}}},972:function(t,e,i){Object.defineProperty(e,"__esModule",{value:!0}),e.WorldState=void 0;const s=i(436),a=i(889),r=i(321),o=i(166),n=i(409);e.WorldState=class{constructor(t){this.lastId=0,this.loader=new a.LoaderState,this.view=new s.ViewState,this.input=new r.InputState,this.external=new o.ExternalState,this.models=new n.ModelState(t),this.motions={},this.params={}}}},379:function(t,e){Object.defineProperty(e,"__esModule",{value:!0}),e.Model=void 0,e.Model=class{constructor(t){this.asset=t}syncParams(t){}}},781:function(t,e){Object.defineProperty(e,"__esModule",{value:!0}),e.handleInput=void 0,e.handleInput=function(t,e){Date.now()-t.input.lastUpdated>1e4&&(t.input.x=t.view.width/2,t.input.y=t.view.height/2),t.input.mouseDown&&(t.input.mouseDown=!1)}},35:function(t,e,i){Object.defineProperty(e,"__esModule",{value:!0}),e.update=void 0;const s=i(781),a=i(497);e.update=function(t,e){(0,a.updateModel)(t,e),(0,s.handleInput)(t,e)}},497:function(t,e){Object.defineProperty(e,"__esModule",{value:!0}),e.updateModel=void 0;let i=0,s=0,a=0;e.updateModel=function(t,e){for(let r of Object.values(t.models.data)){if(null===r)continue;let o=2*(t.input.x/t.view.width-.5),n=2*(.5-t.input.y/t.view.height);{let t=o-i,e=n-s,r=t*t+e*e,l=r<.5?r*r*r+.2:1;a=Math.min(.2*l,a+.003),r<a*a?(a=0,i=o,s=n):(i+=a*t/Math.sqrt(r),s+=a*e/Math.sqrt(r))}r.asset.setParam("ParamAngleX",30*i),r.asset.setParam("ParamAngleY",30*s),r.asset.setParam("ParamBodyAngleX",10*i),r.asset.setParam("ParamBodyAngleY",10*s),null!=r.asset.physics&&r.asset.physics.evaluate(r.asset,e),r.asset._model.update()}}}},e={};function i(s){var a=e[s];if(void 0!==a)return a.exports;var r=e[s]={exports:{}};return t[s].call(r.exports,r,r.exports,i),r.exports}i.d=function(t,e){for(var s in e)i.o(e,s)&&!i.o(t,s)&&Object.defineProperty(t,s,{enumerable:!0,get:e[s]})},i.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},i.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},i(607)}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
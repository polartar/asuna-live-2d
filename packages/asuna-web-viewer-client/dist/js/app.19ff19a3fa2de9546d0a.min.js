!function(){"use strict";var e={8770:function(e,t,n){n.r(t),n.d(t,{MessageType:function(){return r.Cs},Messenger:function(){return r.Pf},__esModule:function(){return r.X$}});var r=n(7566);n(4951)},4501:function(e,t,n){function r(e){for(var t=arguments.length,n=Array(t>1?t-1:0),r=1;r<t;r++)n[r-1]=arguments[r];throw Error("[Immer] minified error nr: "+e+(n.length?" "+n.map((function(e){return"'"+e+"'"})).join(","):"")+". Find the full error at: https://bit.ly/3cXEKWf")}function o(e){return!!e&&!!e[G]}function i(e){return!!e&&(function(e){if(!e||"object"!=typeof e)return!1;var t=Object.getPrototypeOf(e);if(null===t)return!0;var n=Object.hasOwnProperty.call(t,"constructor")&&t.constructor;return n===Object||"function"==typeof n&&Function.toString.call(n)===H}(e)||Array.isArray(e)||!!e[q]||!!e.constructor[q]||d(e)||p(e))}function a(e){return o(e)||r(23,e),e[G].t}function u(e,t,n){void 0===n&&(n=!1),0===l(e)?(n?Object.keys:W)(e).forEach((function(r){n&&"symbol"==typeof r||t(r,e[r],e)})):e.forEach((function(n,r){return t(r,n,e)}))}function l(e){var t=e[G];return t?t.i>3?t.i-4:t.i:Array.isArray(e)?1:d(e)?2:p(e)?3:0}function c(e,t){return 2===l(e)?e.has(t):Object.prototype.hasOwnProperty.call(e,t)}function s(e,t,n){var r=l(e);2===r?e.set(t,n):3===r?(e.delete(t),e.add(n)):e[t]=n}function f(e,t){return e===t?0!==e||1/e==1/t:e!=e&&t!=t}function d(e){return B&&e instanceof Map}function p(e){return $&&e instanceof Set}function v(e){return e.o||e.t}function h(e){if(Array.isArray(e))return Array.prototype.slice.call(e);var t=Y(e);delete t[G];for(var n=W(t),r=0;r<n.length;r++){var o=n[r],i=t[o];!1===i.writable&&(i.writable=!0,i.configurable=!0),(i.get||i.set)&&(t[o]={configurable:!0,writable:!0,enumerable:i.enumerable,value:e[o]})}return Object.create(Object.getPrototypeOf(e),t)}function m(e,t){return void 0===t&&(t=!1),g(e)||o(e)||!i(e)||(l(e)>1&&(e.set=e.add=e.clear=e.delete=y),Object.freeze(e),t&&u(e,(function(e,t){return m(t,!0)}),!0)),e}function y(){r(2)}function g(e){return null==e||"object"!=typeof e||Object.isFrozen(e)}function b(e){var t=V[e];return t||r(18,e),t}function w(){return z}function O(e,t){t&&(b("Patches"),e.u=[],e.s=[],e.v=t)}function x(e){S(e),e.p.forEach(_),e.p=null}function S(e){e===z&&(z=e.l)}function P(e){return z={p:[],l:z,h:e,m:!0,_:0}}function _(e){var t=e[G];0===t.i||1===t.i?t.j():t.O=!0}function j(e,t){t._=t.p.length;var n=t.p[0],o=void 0!==e&&e!==n;return t.h.g||b("ES5").S(t,e,o),o?(n[G].P&&(x(t),r(4)),i(e)&&(e=E(t,e),t.l||A(t,e)),t.u&&b("Patches").M(n[G].t,e,t.u,t.s)):e=E(t,n,[]),x(t),t.u&&t.v(t.u,t.s),e!==X?e:void 0}function E(e,t,n){if(g(t))return t;var r=t[G];if(!r)return u(t,(function(o,i){return M(e,r,t,o,i,n)}),!0),t;if(r.A!==e)return t;if(!r.P)return A(e,r.t,!0),r.t;if(!r.I){r.I=!0,r.A._--;var o=4===r.i||5===r.i?r.o=h(r.k):r.o;u(3===r.i?new Set(o):o,(function(t,i){return M(e,r,o,t,i,n)})),A(e,o,!1),n&&e.u&&b("Patches").R(r,n,e.u,e.s)}return r.o}function M(e,t,n,r,a,u){if(o(a)){var l=E(e,a,u&&t&&3!==t.i&&!c(t.D,r)?u.concat(r):void 0);if(s(n,r,l),!o(l))return;e.m=!1}if(i(a)&&!g(a)){if(!e.h.F&&e._<1)return;E(e,a),t&&t.A.l||A(e,a)}}function A(e,t,n){void 0===n&&(n=!1),e.h.F&&e.m&&m(t,n)}function C(e,t){var n=e[G];return(n?v(n):e)[t]}function I(e,t){if(t in e)for(var n=Object.getPrototypeOf(e);n;){var r=Object.getOwnPropertyDescriptor(n,t);if(r)return r;n=Object.getPrototypeOf(n)}}function k(e){e.P||(e.P=!0,e.l&&k(e.l))}function T(e){e.o||(e.o=h(e.t))}function D(e,t,n){var r=d(t)?b("MapSet").N(t,n):p(t)?b("MapSet").T(t,n):e.g?function(e,t){var n=Array.isArray(e),r={i:n?1:0,A:t?t.A:w(),P:!1,I:!1,D:{},l:t,t:e,k:null,o:null,j:null,C:!1},o=r,i=K;n&&(o=[r],i=J);var a=Proxy.revocable(o,i),u=a.revoke,l=a.proxy;return r.k=l,r.j=u,l}(t,n):b("ES5").J(t,n);return(n?n.A:w()).p.push(r),r}function R(e){return o(e)||r(22,e),function e(t){if(!i(t))return t;var n,r=t[G],o=l(t);if(r){if(!r.P&&(r.i<4||!b("ES5").K(r)))return r.t;r.I=!0,n=N(t,o),r.I=!1}else n=N(t,o);return u(n,(function(t,o){r&&function(e,t){return 2===l(e)?e.get(t):e[t]}(r.t,t)===o||s(n,t,e(o))})),3===o?new Set(n):n}(e)}function N(e,t){switch(t){case 2:return new Map(e);case 3:return Array.from(e)}return h(e)}n.r(t),n.d(t,{MiddlewareArray:function(){return Be},TaskAbortError:function(){return Nt},__DO_NOT_USE__ActionTypes:function(){return le},addListener:function(){return Kt},applyMiddleware:function(){return ve},bindActionCreators:function(){return de},clearAllListeners:function(){return Jt},combineReducers:function(){return se},compose:function(){return pe},configureStore:function(){return Ye},createAction:function(){return Ve},createAsyncThunk:function(){return dt},createDraftSafeSelector:function(){return Fe},createEntityAdapter:function(){return at},createImmutableStateInvariantMiddleware:function(){return Ue},createListenerMiddleware:function(){return tn},createNextState:function(){return te},createReducer:function(){return Ze},createSelector:function(){return be},createSerializableStateInvariantMiddleware:function(){return Ge},createSlice:function(){return et},createStore:function(){return ce},current:function(){return R},findNonSerializableValue:function(){return qe},freeze:function(){return m},getDefaultMiddleware:function(){return He},getType:function(){return Je},isAllOf:function(){return mt},isAnyOf:function(){return ht},isAsyncThunkAction:function(){return St},isDraft:function(){return o},isFulfilled:function(){return xt},isImmutableDefault:function(){return $e},isPending:function(){return bt},isPlain:function(){return Xe},isPlainObject:function(){return Le},isRejected:function(){return wt},isRejectedWithValue:function(){return Ot},miniSerializeError:function(){return ft},nanoid:function(){return ut},original:function(){return a},removeListener:function(){return Qt},unwrapResult:function(){return pt}});var F,z,L="undefined"!=typeof Symbol&&"symbol"==typeof Symbol("x"),B="undefined"!=typeof Map,$="undefined"!=typeof Set,U="undefined"!=typeof Proxy&&void 0!==Proxy.revocable&&"undefined"!=typeof Reflect,X=L?Symbol.for("immer-nothing"):((F={})["immer-nothing"]=!0,F),q=L?Symbol.for("immer-draftable"):"__$immer_draftable",G=L?Symbol.for("immer-state"):"__$immer_state",H=("undefined"!=typeof Symbol&&Symbol.iterator,""+Object.prototype.constructor),W="undefined"!=typeof Reflect&&Reflect.ownKeys?Reflect.ownKeys:void 0!==Object.getOwnPropertySymbols?function(e){return Object.getOwnPropertyNames(e).concat(Object.getOwnPropertySymbols(e))}:Object.getOwnPropertyNames,Y=Object.getOwnPropertyDescriptors||function(e){var t={};return W(e).forEach((function(n){t[n]=Object.getOwnPropertyDescriptor(e,n)})),t},V={},K={get:function(e,t){if(t===G)return e;var n=v(e);if(!c(n,t))return function(e,t,n){var r,o=I(t,n);return o?"value"in o?o.value:null===(r=o.get)||void 0===r?void 0:r.call(e.k):void 0}(e,n,t);var r=n[t];return e.I||!i(r)?r:r===C(e.t,t)?(T(e),e.o[t]=D(e.A.h,r,e)):r},has:function(e,t){return t in v(e)},ownKeys:function(e){return Reflect.ownKeys(v(e))},set:function(e,t,n){var r=I(v(e),t);if(null==r?void 0:r.set)return r.set.call(e.k,n),!0;if(!e.P){var o=C(v(e),t),i=null==o?void 0:o[G];if(i&&i.t===n)return e.o[t]=n,e.D[t]=!1,!0;if(f(n,o)&&(void 0!==n||c(e.t,t)))return!0;T(e),k(e)}return e.o[t]===n&&"number"!=typeof n&&(void 0!==n||t in e.o)||(e.o[t]=n,e.D[t]=!0,!0)},deleteProperty:function(e,t){return void 0!==C(e.t,t)||t in e.t?(e.D[t]=!1,T(e),k(e)):delete e.D[t],e.o&&delete e.o[t],!0},getOwnPropertyDescriptor:function(e,t){var n=v(e),r=Reflect.getOwnPropertyDescriptor(n,t);return r?{writable:!0,configurable:1!==e.i||"length"!==t,enumerable:r.enumerable,value:n[t]}:r},defineProperty:function(){r(11)},getPrototypeOf:function(e){return Object.getPrototypeOf(e.t)},setPrototypeOf:function(){r(12)}},J={};u(K,(function(e,t){J[e]=function(){return arguments[0]=arguments[0][0],t.apply(this,arguments)}})),J.deleteProperty=function(e,t){return J.set.call(this,e,t,void 0)},J.set=function(e,t,n){return K.set.call(this,e[0],t,n,e[0])};var Q=function(){function e(e){var t=this;this.g=U,this.F=!0,this.produce=function(e,n,o){if("function"==typeof e&&"function"!=typeof n){var a=n;n=e;var u=t;return function(e){var t=this;void 0===e&&(e=a);for(var r=arguments.length,o=Array(r>1?r-1:0),i=1;i<r;i++)o[i-1]=arguments[i];return u.produce(e,(function(e){var r;return(r=n).call.apply(r,[t,e].concat(o))}))}}var l;if("function"!=typeof n&&r(6),void 0!==o&&"function"!=typeof o&&r(7),i(e)){var c=P(t),s=D(t,e,void 0),f=!0;try{l=n(s),f=!1}finally{f?x(c):S(c)}return"undefined"!=typeof Promise&&l instanceof Promise?l.then((function(e){return O(c,o),j(e,c)}),(function(e){throw x(c),e})):(O(c,o),j(l,c))}if(!e||"object"!=typeof e){if(void 0===(l=n(e))&&(l=e),l===X&&(l=void 0),t.F&&m(l,!0),o){var d=[],p=[];b("Patches").M(e,l,d,p),o(d,p)}return l}r(21,e)},this.produceWithPatches=function(e,n){if("function"==typeof e)return function(n){for(var r=arguments.length,o=Array(r>1?r-1:0),i=1;i<r;i++)o[i-1]=arguments[i];return t.produceWithPatches(n,(function(t){return e.apply(void 0,[t].concat(o))}))};var r,o,i=t.produce(e,n,(function(e,t){r=e,o=t}));return"undefined"!=typeof Promise&&i instanceof Promise?i.then((function(e){return[e,r,o]})):[i,r,o]},"boolean"==typeof(null==e?void 0:e.useProxies)&&this.setUseProxies(e.useProxies),"boolean"==typeof(null==e?void 0:e.autoFreeze)&&this.setAutoFreeze(e.autoFreeze)}var t=e.prototype;return t.createDraft=function(e){i(e)||r(8),o(e)&&(e=R(e));var t=P(this),n=D(this,e,void 0);return n[G].C=!0,S(t),n},t.finishDraft=function(e,t){var n=(e&&e[G]).A;return O(n,t),j(void 0,n)},t.setAutoFreeze=function(e){this.F=e},t.setUseProxies=function(e){e&&!U&&r(20),this.g=e},t.applyPatches=function(e,t){var n;for(n=t.length-1;n>=0;n--){var r=t[n];if(0===r.path.length&&"replace"===r.op){e=r.value;break}}n>-1&&(t=t.slice(n+1));var i=b("Patches").$;return o(e)?i(e,t):this.produce(e,(function(e){return i(e,t)}))},e}(),Z=new Q,ee=Z.produce,te=(Z.produceWithPatches.bind(Z),Z.setAutoFreeze.bind(Z),Z.setUseProxies.bind(Z),Z.applyPatches.bind(Z),Z.createDraft.bind(Z),Z.finishDraft.bind(Z),ee);function ne(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function re(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function oe(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?re(Object(n),!0).forEach((function(t){ne(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):re(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function ie(e){return"Minified Redux error #"+e+"; visit https://redux.js.org/Errors?code="+e+" for the full message or use the non-minified dev environment for full errors. "}var ae="function"==typeof Symbol&&Symbol.observable||"@@observable",ue=function(){return Math.random().toString(36).substring(7).split("").join(".")},le={INIT:"@@redux/INIT"+ue(),REPLACE:"@@redux/REPLACE"+ue(),PROBE_UNKNOWN_ACTION:function(){return"@@redux/PROBE_UNKNOWN_ACTION"+ue()}};function ce(e,t,n){var r;if("function"==typeof t&&"function"==typeof n||"function"==typeof n&&"function"==typeof arguments[3])throw new Error(ie(0));if("function"==typeof t&&void 0===n&&(n=t,t=void 0),void 0!==n){if("function"!=typeof n)throw new Error(ie(1));return n(ce)(e,t)}if("function"!=typeof e)throw new Error(ie(2));var o=e,i=t,a=[],u=a,l=!1;function c(){u===a&&(u=a.slice())}function s(){if(l)throw new Error(ie(3));return i}function f(e){if("function"!=typeof e)throw new Error(ie(4));if(l)throw new Error(ie(5));var t=!0;return c(),u.push(e),function(){if(t){if(l)throw new Error(ie(6));t=!1,c();var n=u.indexOf(e);u.splice(n,1),a=null}}}function d(e){if(!function(e){if("object"!=typeof e||null===e)return!1;for(var t=e;null!==Object.getPrototypeOf(t);)t=Object.getPrototypeOf(t);return Object.getPrototypeOf(e)===t}(e))throw new Error(ie(7));if(void 0===e.type)throw new Error(ie(8));if(l)throw new Error(ie(9));try{l=!0,i=o(i,e)}finally{l=!1}for(var t=a=u,n=0;n<t.length;n++)(0,t[n])();return e}return d({type:le.INIT}),(r={dispatch:d,subscribe:f,getState:s,replaceReducer:function(e){if("function"!=typeof e)throw new Error(ie(10));o=e,d({type:le.REPLACE})}})[ae]=function(){var e,t=f;return(e={subscribe:function(e){if("object"!=typeof e||null===e)throw new Error(ie(11));function n(){e.next&&e.next(s())}return n(),{unsubscribe:t(n)}}})[ae]=function(){return this},e},r}function se(e){for(var t=Object.keys(e),n={},r=0;r<t.length;r++){var o=t[r];"function"==typeof e[o]&&(n[o]=e[o])}var i,a=Object.keys(n);try{!function(e){Object.keys(e).forEach((function(t){var n=e[t];if(void 0===n(void 0,{type:le.INIT}))throw new Error(ie(12));if(void 0===n(void 0,{type:le.PROBE_UNKNOWN_ACTION()}))throw new Error(ie(13))}))}(n)}catch(e){i=e}return function(e,t){if(void 0===e&&(e={}),i)throw i;for(var r=!1,o={},u=0;u<a.length;u++){var l=a[u],c=n[l],s=e[l],f=c(s,t);if(void 0===f)throw t&&t.type,new Error(ie(14));o[l]=f,r=r||f!==s}return(r=r||a.length!==Object.keys(e).length)?o:e}}function fe(e,t){return function(){return t(e.apply(this,arguments))}}function de(e,t){if("function"==typeof e)return fe(e,t);if("object"!=typeof e||null===e)throw new Error(ie(16));var n={};for(var r in e){var o=e[r];"function"==typeof o&&(n[r]=fe(o,t))}return n}function pe(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];return 0===t.length?function(e){return e}:1===t.length?t[0]:t.reduce((function(e,t){return function(){return e(t.apply(void 0,arguments))}}))}function ve(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];return function(e){return function(){var n=e.apply(void 0,arguments),r=function(){throw new Error(ie(15))},o={getState:n.getState,dispatch:function(){return r.apply(void 0,arguments)}},i=t.map((function(e){return e(o)}));return r=pe.apply(void 0,i)(n.dispatch),oe(oe({},n),{},{dispatch:r})}}}var he="NOT_FOUND",me=function(e,t){return e===t};function ye(e,t){var n,r,o="object"==typeof t?t:{equalityCheck:t},i=o.equalityCheck,a=void 0===i?me:i,u=o.maxSize,l=void 0===u?1:u,c=o.resultEqualityCheck,s=function(e){return function(t,n){if(null===t||null===n||t.length!==n.length)return!1;for(var r=t.length,o=0;o<r;o++)if(!e(t[o],n[o]))return!1;return!0}}(a),f=1===l?(n=s,{get:function(e){return r&&n(r.key,e)?r.value:he},put:function(e,t){r={key:e,value:t}},getEntries:function(){return r?[r]:[]},clear:function(){r=void 0}}):function(e,t){var n=[];function r(e){var r=n.findIndex((function(n){return t(e,n.key)}));if(r>-1){var o=n[r];return r>0&&(n.splice(r,1),n.unshift(o)),o.value}return he}return{get:r,put:function(t,o){r(t)===he&&(n.unshift({key:t,value:o}),n.length>e&&n.pop())},getEntries:function(){return n},clear:function(){n=[]}}}(l,s);function d(){var t=f.get(arguments);if(t===he){if(t=e.apply(null,arguments),c){var n=f.getEntries().find((function(e){return c(e.value,t)}));n&&(t=n.value)}f.put(arguments,t)}return t}return d.clearCache=function(){return f.clear()},d}function ge(e){for(var t=arguments.length,n=new Array(t>1?t-1:0),r=1;r<t;r++)n[r-1]=arguments[r];return function(){for(var t=arguments.length,r=new Array(t),o=0;o<t;o++)r[o]=arguments[o];var i,a=0,u={memoizeOptions:void 0},l=r.pop();if("object"==typeof l&&(u=l,l=r.pop()),"function"!=typeof l)throw new Error("createSelector expects an output function after the inputs, but received: ["+typeof l+"]");var c=u.memoizeOptions,s=void 0===c?n:c,f=Array.isArray(s)?s:[s],d=function(e){var t=Array.isArray(e[0])?e[0]:e;if(!t.every((function(e){return"function"==typeof e}))){var n=t.map((function(e){return"function"==typeof e?"function "+(e.name||"unnamed")+"()":typeof e})).join(", ");throw new Error("createSelector expects all input-selectors to be functions, but received the following types: ["+n+"]")}return t}(r),p=e.apply(void 0,[function(){return a++,l.apply(null,arguments)}].concat(f)),v=e((function(){for(var e=[],t=d.length,n=0;n<t;n++)e.push(d[n].apply(null,arguments));return i=p.apply(null,e)}));return Object.assign(v,{resultFunc:l,memoizedResultFunc:p,dependencies:d,lastResult:function(){return i},recomputations:function(){return a},resetRecomputations:function(){return a=0}}),v}}var be=ge(ye);function we(e){return function(t){var n=t.dispatch,r=t.getState;return function(t){return function(o){return"function"==typeof o?o(n,r,e):t(o)}}}}var Oe=we();Oe.withExtraArgument=we;var xe,Se=Oe,Pe=(xe=function(e,t){return xe=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n])},xe(e,t)},function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function n(){this.constructor=e}xe(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)}),_e=function(e,t){var n,r,o,i,a={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:u(0),throw:u(1),return:u(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function u(i){return function(u){return function(i){if(n)throw new TypeError("Generator is already executing.");for(;a;)try{if(n=1,r&&(o=2&i[0]?r.return:i[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,i[1])).done)return o;switch(r=0,o&&(i=[2&i[0],o.value]),i[0]){case 0:case 1:o=i;break;case 4:return a.label++,{value:i[1],done:!1};case 5:a.label++,r=i[1],i=[0];continue;case 7:i=a.ops.pop(),a.trys.pop();continue;default:if(!((o=(o=a.trys).length>0&&o[o.length-1])||6!==i[0]&&2!==i[0])){a=0;continue}if(3===i[0]&&(!o||i[1]>o[0]&&i[1]<o[3])){a.label=i[1];break}if(6===i[0]&&a.label<o[1]){a.label=o[1],o=i;break}if(o&&a.label<o[2]){a.label=o[2],a.ops.push(i);break}o[2]&&a.ops.pop(),a.trys.pop();continue}i=t.call(e,a)}catch(e){i=[6,e],r=0}finally{n=o=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,u])}}},je=function(e,t){for(var n=0,r=t.length,o=e.length;n<r;n++,o++)e[o]=t[n];return e},Ee=Object.defineProperty,Me=Object.defineProperties,Ae=Object.getOwnPropertyDescriptors,Ce=Object.getOwnPropertySymbols,Ie=Object.prototype.hasOwnProperty,ke=Object.prototype.propertyIsEnumerable,Te=function(e,t,n){return t in e?Ee(e,t,{enumerable:!0,configurable:!0,writable:!0,value:n}):e[t]=n},De=function(e,t){for(var n in t||(t={}))Ie.call(t,n)&&Te(e,n,t[n]);if(Ce)for(var r=0,o=Ce(t);r<o.length;r++)n=o[r],ke.call(t,n)&&Te(e,n,t[n]);return e},Re=function(e,t){return Me(e,Ae(t))},Ne=function(e,t,n){return new Promise((function(r,o){var i=function(e){try{u(n.next(e))}catch(e){o(e)}},a=function(e){try{u(n.throw(e))}catch(e){o(e)}},u=function(e){return e.done?r(e.value):Promise.resolve(e.value).then(i,a)};u((n=n.apply(e,t)).next())}))},Fe=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];var n=be.apply(void 0,e);return function(e){for(var t=[],r=1;r<arguments.length;r++)t[r-1]=arguments[r];return n.apply(void 0,je([o(e)?R(e):e],t))}},ze="undefined"!=typeof window&&window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__?window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__:function(){if(0!==arguments.length)return"object"==typeof arguments[0]?pe:pe.apply(null,arguments)};function Le(e){if("object"!=typeof e||null===e)return!1;var t=Object.getPrototypeOf(e);if(null===t)return!0;for(var n=t;null!==Object.getPrototypeOf(n);)n=Object.getPrototypeOf(n);return t===n}"undefined"!=typeof window&&window.__REDUX_DEVTOOLS_EXTENSION__&&window.__REDUX_DEVTOOLS_EXTENSION__;var Be=function(e){function t(){for(var n=[],r=0;r<arguments.length;r++)n[r]=arguments[r];var o=e.apply(this,n)||this;return Object.setPrototypeOf(o,t.prototype),o}return Pe(t,e),Object.defineProperty(t,Symbol.species,{get:function(){return t},enumerable:!1,configurable:!0}),t.prototype.concat=function(){for(var t=[],n=0;n<arguments.length;n++)t[n]=arguments[n];return e.prototype.concat.apply(this,t)},t.prototype.prepend=function(){for(var e=[],n=0;n<arguments.length;n++)e[n]=arguments[n];return 1===e.length&&Array.isArray(e[0])?new(t.bind.apply(t,je([void 0],e[0].concat(this)))):new(t.bind.apply(t,je([void 0],e.concat(this))))},t}(Array);function $e(e){return"object"!=typeof e||null==e||Object.isFrozen(e)}function Ue(e){return void 0===e&&(e={}),function(){return function(e){return function(t){return e(t)}}}}function Xe(e){var t=typeof e;return"undefined"===t||null===e||"string"===t||"boolean"===t||"number"===t||Array.isArray(e)||Le(e)}function qe(e,t,n,r,o){var i;if(void 0===t&&(t=""),void 0===n&&(n=Xe),void 0===o&&(o=[]),!n(e))return{keyPath:t||"<root>",value:e};if("object"!=typeof e||null===e)return!1;for(var a=null!=r?r(e):Object.entries(e),u=o.length>0,l=0,c=a;l<c.length;l++){var s=c[l],f=s[0],d=s[1],p=t?t+"."+f:f;if(!(u&&o.indexOf(p)>=0)){if(!n(d))return{keyPath:p,value:d};if("object"==typeof d&&(i=qe(d,p,n,r,o)))return i}}return!1}function Ge(e){return void 0===e&&(e={}),function(){return function(e){return function(t){return e(t)}}}}function He(e){void 0===e&&(e={});var t=e.thunk,n=void 0===t||t,r=(e.immutableCheck,e.serializableCheck,new Be);return n&&(function(e){return"boolean"==typeof e}(n)?r.push(Se):r.push(Se.withExtraArgument(n.extraArgument))),r}var We=!0;function Ye(e){var t,n=function(e){return He(e)},r=e||{},o=r.reducer,i=void 0===o?void 0:o,a=r.middleware,u=void 0===a?n():a,l=r.devTools,c=void 0===l||l,s=r.preloadedState,f=void 0===s?void 0:s,d=r.enhancers,p=void 0===d?void 0:d;if("function"==typeof i)t=i;else{if(!Le(i))throw new Error('"reducer" is a required argument, and must be a function or an object of functions that can be passed to combineReducers');t=se(i)}var v=u;if("function"==typeof v&&(v=v(n),!We&&!Array.isArray(v)))throw new Error("when using a middleware builder function, an array of middleware must be returned");if(!We&&v.some((function(e){return"function"!=typeof e})))throw new Error("each middleware provided to configureStore must be a function");var h=ve.apply(void 0,v),m=pe;c&&(m=ze(De({trace:!We},"object"==typeof c&&c)));var y=[h];return Array.isArray(p)?y=je([h],p):"function"==typeof p&&(y=p(y)),ce(t,f,m.apply(void 0,y))}function Ve(e,t){function n(){for(var n=[],r=0;r<arguments.length;r++)n[r]=arguments[r];if(t){var o=t.apply(void 0,n);if(!o)throw new Error("prepareAction did not return an object");return De(De({type:e,payload:o.payload},"meta"in o&&{meta:o.meta}),"error"in o&&{error:o.error})}return{type:e,payload:n[0]}}return n.toString=function(){return""+e},n.type=e,n.match=function(t){return t.type===e},n}function Ke(e){return["type","payload","error","meta"].indexOf(e)>-1}function Je(e){return""+e}function Qe(e){var t,n={},r=[],o={addCase:function(e,t){var r="string"==typeof e?e:e.type;if(r in n)throw new Error("addCase cannot be called with two reducers for the same action type");return n[r]=t,o},addMatcher:function(e,t){return r.push({matcher:e,reducer:t}),o},addDefaultCase:function(e){return t=e,o}};return e(o),[n,r,t]}function Ze(e,t,n,r){void 0===n&&(n=[]);var a,u="function"==typeof t?Qe(t):[t,n,r],l=u[0],c=u[1],s=u[2];if(function(e){return"function"==typeof e}(e))a=function(){return te(e(),(function(){}))};else{var f=te(e,(function(){}));a=function(){return f}}function d(e,t){void 0===e&&(e=a());var n=je([l[t.type]],c.filter((function(e){return(0,e.matcher)(t)})).map((function(e){return e.reducer})));return 0===n.filter((function(e){return!!e})).length&&(n=[s]),n.reduce((function(e,n){if(n){var r;if(o(e))return void 0===(r=n(e,t))?e:r;if(i(e))return te(e,(function(e){return n(e,t)}));if(void 0===(r=n(e,t))){if(null===e)return e;throw Error("A case reducer on a non-draftable value must not return undefined")}return r}return e}),e)}return d.getInitialState=a,d}function et(e){var t=e.name;if(!t)throw new Error("`name` is a required option for createSlice");var n,r="function"==typeof e.initialState?e.initialState:te(e.initialState,(function(){})),o=e.reducers||{},i=Object.keys(o),a={},u={},l={};function c(){var t="function"==typeof e.extraReducers?Qe(e.extraReducers):[e.extraReducers],n=t[0],o=void 0===n?{}:n,i=t[1],a=void 0===i?[]:i,l=t[2],c=void 0===l?void 0:l,s=De(De({},o),u);return Ze(r,s,a,c)}return i.forEach((function(e){var n,r,i=o[e],c=t+"/"+e;"reducer"in i?(n=i.reducer,r=i.prepare):n=i,a[e]=n,u[c]=n,l[e]=r?Ve(c,r):Ve(c)})),{name:t,reducer:function(e,t){return n||(n=c()),n(e,t)},actions:l,caseReducers:a,getInitialState:function(){return n||(n=c()),n.getInitialState()}}}function tt(e){return function(t,n){var r=function(t){var r;Le(r=n)&&"string"==typeof r.type&&Object.keys(r).every(Ke)?e(n.payload,t):e(n,t)};return o(t)?(r(t),t):te(t,r)}}function nt(e,t){return t(e)}function rt(e){return Array.isArray(e)||(e=Object.values(e)),e}function ot(e,t,n){for(var r=[],o=[],i=0,a=e=rt(e);i<a.length;i++){var u=a[i],l=nt(u,t);l in n.entities?o.push({id:l,changes:u}):r.push(u)}return[r,o]}function it(e){function t(t,n){var r=nt(t,e);r in n.entities||(n.ids.push(r),n.entities[r]=t)}function n(e,n){for(var r=0,o=e=rt(e);r<o.length;r++)t(o[r],n)}function r(t,n){var r=nt(t,e);r in n.entities||n.ids.push(r),n.entities[r]=t}function o(e,t){var n=!1;e.forEach((function(e){e in t.entities&&(delete t.entities[e],n=!0)})),n&&(t.ids=t.ids.filter((function(e){return e in t.entities})))}function i(t,n){var r={},o={};if(t.forEach((function(e){e.id in n.entities&&(o[e.id]={id:e.id,changes:De(De({},o[e.id]?o[e.id].changes:null),e.changes)})})),(t=Object.values(o)).length>0){var i=t.filter((function(t){return function(t,n,r){var o=r.entities[n.id],i=Object.assign({},o,n.changes),a=nt(i,e),u=a!==n.id;return u&&(t[n.id]=a,delete r.entities[n.id]),r.entities[a]=i,u}(r,t,n)})).length>0;i&&(n.ids=n.ids.map((function(e){return r[e]||e})))}}function a(t,r){var o=ot(t,e,r),a=o[0];i(o[1],r),n(a,r)}return{removeAll:(u=function(e){Object.assign(e,{ids:[],entities:{}})},l=tt((function(e,t){return u(t)})),function(e){return l(e,void 0)}),addOne:tt(t),addMany:tt(n),setOne:tt(r),setMany:tt((function(e,t){for(var n=0,o=e=rt(e);n<o.length;n++)r(o[n],t)})),setAll:tt((function(e,t){e=rt(e),t.ids=[],t.entities={},n(e,t)})),updateOne:tt((function(e,t){return i([e],t)})),updateMany:tt(i),upsertOne:tt((function(e,t){return a([e],t)})),upsertMany:tt(a),removeOne:tt((function(e,t){return o([e],t)})),removeMany:tt(o)};var u,l}function at(e){void 0===e&&(e={});var t=De({sortComparer:!1,selectId:function(e){return e.id}},e),n=t.selectId,r=t.sortComparer,o={getInitialState:function(e){return void 0===e&&(e={}),Object.assign({ids:[],entities:{}},e)}},i={getSelectors:function(e){var t=function(e){return e.ids},n=function(e){return e.entities},r=Fe(t,n,(function(e,t){return e.map((function(e){return t[e]}))})),o=function(e,t){return t},i=function(e,t){return e[t]},a=Fe(t,(function(e){return e.length}));if(!e)return{selectIds:t,selectEntities:n,selectAll:r,selectTotal:a,selectById:Fe(n,o,i)};var u=Fe(e,n);return{selectIds:Fe(e,t),selectEntities:u,selectAll:Fe(e,r),selectTotal:Fe(e,a),selectById:Fe(u,o,i)}}},a=r?function(e,t){var n=it(e);function r(t,n){var r=(t=rt(t)).filter((function(t){return!(nt(t,e)in n.entities)}));0!==r.length&&u(r,n)}function o(e,t){0!==(e=rt(e)).length&&u(e,t)}function i(t,n){var r=[];t.forEach((function(t){return function(t,n,r){if(!(n.id in r.entities))return!1;var o=r.entities[n.id],i=Object.assign({},o,n.changes),a=nt(i,e);return delete r.entities[n.id],t.push(i),a!==n.id}(r,t,n)})),0!==r.length&&u(r,n)}function a(t,n){var o=ot(t,e,n),a=o[0];i(o[1],n),r(a,n)}function u(n,r){n.forEach((function(t){r.entities[e(t)]=t}));var o=Object.values(r.entities);o.sort(t);var i=o.map(e);(function(e,t){if(e.length!==t.length)return!1;for(var n=0;n<e.length&&n<t.length;n++)if(e[n]!==t[n])return!1;return!0})(r.ids,i)||(r.ids=i)}return{removeOne:n.removeOne,removeMany:n.removeMany,removeAll:n.removeAll,addOne:tt((function(e,t){return r([e],t)})),updateOne:tt((function(e,t){return i([e],t)})),upsertOne:tt((function(e,t){return a([e],t)})),setOne:tt((function(e,t){return o([e],t)})),setMany:tt(o),setAll:tt((function(e,t){e=rt(e),t.entities={},t.ids=[],r(e,t)})),addMany:tt(r),updateMany:tt(i),upsertMany:tt(a)}}(n,r):it(n);return De(De(De({selectId:n,sortComparer:r},o),i),a)}var ut=function(e){void 0===e&&(e=21);for(var t="",n=e;n--;)t+="ModuleSymbhasOwnPr-0123456789ABCDEFGHNRVfgctiUvz_KqYTJkLxpZXIjQW"[64*Math.random()|0];return t},lt=["name","message","stack","code"],ct=function(e,t){this.payload=e,this.meta=t},st=function(e,t){this.payload=e,this.meta=t},ft=function(e){if("object"==typeof e&&null!==e){for(var t={},n=0,r=lt;n<r.length;n++){var o=r[n];"string"==typeof e[o]&&(t[o]=e[o])}return t}return{message:String(e)}};function dt(e,t,n){var r=Ve(e+"/fulfilled",(function(e,t,n,r){return{payload:e,meta:Re(De({},r||{}),{arg:n,requestId:t,requestStatus:"fulfilled"})}})),o=Ve(e+"/pending",(function(e,t,n){return{payload:void 0,meta:Re(De({},n||{}),{arg:t,requestId:e,requestStatus:"pending"})}})),i=Ve(e+"/rejected",(function(e,t,r,o,i){return{payload:o,error:(n&&n.serializeError||ft)(e||"Rejected"),meta:Re(De({},i||{}),{arg:r,requestId:t,rejectedWithValue:!!o,requestStatus:"rejected",aborted:"AbortError"===(null==e?void 0:e.name),condition:"ConditionError"===(null==e?void 0:e.name)})}})),a="undefined"!=typeof AbortController?AbortController:function(){function e(){this.signal={aborted:!1,addEventListener:function(){},dispatchEvent:function(){return!1},onabort:function(){},removeEventListener:function(){}}}return e.prototype.abort=function(){},e}();return Object.assign((function(e){return function(u,l,c){var s,f=(null==n?void 0:n.idGenerator)?n.idGenerator(e):ut(),d=new a,p=new Promise((function(e,t){return d.signal.addEventListener("abort",(function(){return t({name:"AbortError",message:s||"Aborted"})}))})),v=!1,h=function(){return Ne(this,null,(function(){var a,s,h,m,y;return _e(this,(function(g){switch(g.label){case 0:return g.trys.push([0,4,,5]),null===(b=m=null==(a=null==n?void 0:n.condition)?void 0:a.call(n,e,{getState:l,extra:c}))||"object"!=typeof b||"function"!=typeof b.then?[3,2]:[4,m];case 1:m=g.sent(),g.label=2;case 2:if(!1===m)throw{name:"ConditionError",message:"Aborted due to condition callback returning false."};return v=!0,u(o(f,e,null==(s=null==n?void 0:n.getPendingMeta)?void 0:s.call(n,{requestId:f,arg:e},{getState:l,extra:c}))),[4,Promise.race([p,Promise.resolve(t(e,{dispatch:u,getState:l,extra:c,requestId:f,signal:d.signal,rejectWithValue:function(e,t){return new ct(e,t)},fulfillWithValue:function(e,t){return new st(e,t)}})).then((function(t){if(t instanceof ct)throw t;return t instanceof st?r(t.payload,f,e,t.meta):r(t,f,e)}))])];case 3:return h=g.sent(),[3,5];case 4:return y=g.sent(),h=y instanceof ct?i(null,f,e,y.payload,y.meta):i(y,f,e),[3,5];case 5:return n&&!n.dispatchConditionRejection&&i.match(h)&&h.meta.condition||u(h),[2,h]}var b}))}))}();return Object.assign(h,{abort:function(e){v&&(s=e,d.abort())},requestId:f,arg:e,unwrap:function(){return h.then(pt)}})}}),{pending:o,rejected:i,fulfilled:r,typePrefix:e})}function pt(e){if(e.meta&&e.meta.rejectedWithValue)throw e.payload;if(e.error)throw e.error;return e.payload}var vt=function(e,t){return function(e){return e&&"function"==typeof e.match}(e)?e.match(t):e(t)};function ht(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];return function(t){return e.some((function(e){return vt(e,t)}))}}function mt(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];return function(t){return e.every((function(e){return vt(e,t)}))}}function yt(e,t){if(!e||!e.meta)return!1;var n="string"==typeof e.meta.requestId,r=t.indexOf(e.meta.requestStatus)>-1;return n&&r}function gt(e){return"function"==typeof e[0]&&"pending"in e[0]&&"fulfilled"in e[0]&&"rejected"in e[0]}function bt(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];return 0===e.length?function(e){return yt(e,["pending"])}:gt(e)?function(t){var n=e.map((function(e){return e.pending}));return ht.apply(void 0,n)(t)}:bt()(e[0])}function wt(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];return 0===e.length?function(e){return yt(e,["rejected"])}:gt(e)?function(t){var n=e.map((function(e){return e.rejected}));return ht.apply(void 0,n)(t)}:wt()(e[0])}function Ot(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];var n=function(e){return e&&e.meta&&e.meta.rejectedWithValue};return 0===e.length||gt(e)?function(t){return mt(wt.apply(void 0,e),n)(t)}:Ot()(e[0])}function xt(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];return 0===e.length?function(e){return yt(e,["fulfilled"])}:gt(e)?function(t){var n=e.map((function(e){return e.fulfilled}));return ht.apply(void 0,n)(t)}:xt()(e[0])}function St(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];return 0===e.length?function(e){return yt(e,["pending","fulfilled","rejected"])}:gt(e)?function(t){for(var n=[],r=0,o=e;r<o.length;r++){var i=o[r];n.push(i.pending,i.rejected,i.fulfilled)}return ht.apply(void 0,n)(t)}:St()(e[0])}var Pt=function(e,t){if("function"!=typeof e)throw new TypeError(t+" is not a function")},_t=function(){},jt=function(e,t){return void 0===t&&(t=_t),e.catch(t),e},Et=function(e,t){e.addEventListener("abort",t,{once:!0})},Mt=function(e,t){var n=e.signal;n.aborted||("reason"in n||Object.defineProperty(n,"reason",{enumerable:!0,value:t,configurable:!0,writable:!0}),e.abort(t))},At="listener",Ct="completed",It="cancelled",kt="task-"+It,Tt="task-"+Ct,Dt=At+"-"+It,Rt=At+"-"+Ct,Nt=function(e){this.code=e,this.name="TaskAbortError",this.message="task "+It+" (reason: "+e+")"},Ft=function(e){if(e.aborted)throw new Nt(e.reason)},zt=function(e){return jt(new Promise((function(t,n){var r=function(){return n(new Nt(e.reason))};e.aborted?r():Et(e,r)})))},Lt=function(e){return function(t){return jt(Promise.race([zt(e),t]).then((function(t){return Ft(e),t})))}},Bt=function(e){var t=Lt(e);return function(e){return t(new Promise((function(t){return setTimeout(t,e)})))}},$t=Object.assign,Ut={},Xt="listenerMiddleware",qt=function(e){return function(t){Pt(t,"taskExecutor");var n,r=new AbortController;n=r,Et(e,(function(){return Mt(n,e.reason)}));var o,i,a=(o=function(){return Ne(void 0,null,(function(){var n;return _e(this,(function(o){switch(o.label){case 0:return Ft(e),Ft(r.signal),[4,t({pause:Lt(r.signal),delay:Bt(r.signal),signal:r.signal})];case 1:return n=o.sent(),Ft(r.signal),[2,n]}}))}))},i=function(){return Mt(r,Tt)},Ne(void 0,null,(function(){var e;return _e(this,(function(t){switch(t.label){case 0:return t.trys.push([0,3,4,5]),[4,Promise.resolve()];case 1:return t.sent(),[4,o()];case 2:return[2,{status:"ok",value:t.sent()}];case 3:return[2,{status:(e=t.sent())instanceof Nt?"cancelled":"rejected",error:e}];case 4:return null==i||i(),[7];case 5:return[2]}}))})));return{result:Lt(e)(a),cancel:function(){Mt(r,kt)}}}},Gt=function(e,t){return function(n,r){return jt(function(n,r){return Ne(void 0,null,(function(){var o,i,a,u;return _e(this,(function(l){switch(l.label){case 0:Ft(t),o=function(){},i=new Promise((function(t){o=e({predicate:n,effect:function(e,n){n.unsubscribe(),t([e,n.getState(),n.getOriginalState()])}})})),a=[zt(t),i],null!=r&&a.push(new Promise((function(e){return setTimeout(e,r,null)}))),l.label=1;case 1:return l.trys.push([1,,3,4]),[4,Promise.race(a)];case 2:return u=l.sent(),Ft(t),[2,u];case 3:return o(),[7];case 4:return[2]}}))}))}(n,r))}},Ht=function(e){var t=e.type,n=e.actionCreator,r=e.matcher,o=e.predicate,i=e.effect;if(t)o=Ve(t).match;else if(n)t=n.type,o=n.match;else if(r)o=r;else if(!o)throw new Error("Creating or removing a listener requires one of the known fields for matching an action");return Pt(i,"options.listener"),{predicate:o,type:t,effect:i}},Wt=function(e){var t=Ht(e),n=t.type,r=t.predicate,o=t.effect;return{id:ut(),effect:o,type:n,predicate:r,pending:new Set,unsubscribe:function(){throw new Error("Unsubscribe not initialized")}}},Yt=function(e){return function(){e.forEach(en),e.clear()}},Vt=function(e,t,n){try{e(t,n)}catch(e){setTimeout((function(){throw e}),0)}},Kt=Ve(Xt+"/add"),Jt=Ve(Xt+"/removeAll"),Qt=Ve(Xt+"/remove"),Zt=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];console.error.apply(console,je([Xt+"/error"],e))},en=function(e){e.pending.forEach((function(e){Mt(e,Dt)}))};function tn(e){var t=this;void 0===e&&(e={});var n=new Map,r=e.extra,o=e.onError,i=void 0===o?Zt:o;Pt(i,"onError");var a=function(e){for(var t=0,r=n.values();t<r.length;t++){var o=r[t];if(e(o))return o}},u=function(e){var t=a((function(t){return t.effect===e.effect}));return t||(t=Wt(e)),function(e){return e.unsubscribe=function(){return n.delete(e.id)},n.set(e.id,e),function(t){e.unsubscribe(),(null==t?void 0:t.cancelActive)&&en(e)}}(t)},l=function(e){var t=Ht(e),n=t.type,r=t.effect,o=t.predicate,i=a((function(e){return("string"==typeof n?e.type===n:e.predicate===o)&&e.effect===r}));return i&&(i.unsubscribe(),e.cancelActive&&en(i)),!!i},c=function(e,o,a,l){return Ne(t,null,(function(){var t,c,s;return _e(this,(function(f){switch(f.label){case 0:t=new AbortController,c=Gt(u,t.signal),f.label=1;case 1:return f.trys.push([1,3,4,5]),e.pending.add(t),[4,Promise.resolve(e.effect(o,$t({},a,{getOriginalState:l,condition:function(e,t){return c(e,t).then(Boolean)},take:c,delay:Bt(t.signal),pause:Lt(t.signal),extra:r,signal:t.signal,fork:qt(t.signal),unsubscribe:e.unsubscribe,subscribe:function(){n.set(e.id,e)},cancelActiveListeners:function(){e.pending.forEach((function(e,n,r){e!==t&&(Mt(e,Dt),r.delete(e))}))}})))];case 2:return f.sent(),[3,5];case 3:return(s=f.sent())instanceof Nt||Vt(i,s,{raisedBy:"effect"}),[3,5];case 4:return Mt(t,Rt),e.pending.delete(t),[7];case 5:return[2]}}))}))},s=Yt(n);return{middleware:function(e){return function(t){return function(r){if(Kt.match(r))return u(r.payload);if(!Jt.match(r)){if(Qt.match(r))return l(r.payload);var o,a=e.getState(),f=function(){if(a===Ut)throw new Error(Xt+": getOriginalState can only be called synchronously");return a};try{if(o=t(r),n.size>0)for(var d=e.getState(),p=Array.from(n.values()),v=0,h=p;v<h.length;v++){var m=h[v],y=!1;try{y=m.predicate(r,d,a)}catch(e){y=!1,Vt(i,e,{raisedBy:"predicate"})}y&&c(m,r,e,f)}}finally{a=Ut}return o}s()}}},startListening:u,stopListening:l,clearListeners:s}}!function(){function e(e,t){var n=i[e];return n?n.enumerable=t:i[e]=n={configurable:!0,enumerable:t,get:function(){var t=this[G];return K.get(t,e)},set:function(t){var n=this[G];K.set(n,e,t)}},n}function t(e){for(var t=e.length-1;t>=0;t--){var o=e[t][G];if(!o.P)switch(o.i){case 5:r(o)&&k(o);break;case 4:n(o)&&k(o)}}}function n(e){for(var t=e.t,n=e.k,r=W(n),o=r.length-1;o>=0;o--){var i=r[o];if(i!==G){var a=t[i];if(void 0===a&&!c(t,i))return!0;var u=n[i],l=u&&u[G];if(l?l.t!==a:!f(u,a))return!0}}var s=!!t[G];return r.length!==W(t).length+(s?0:1)}function r(e){var t=e.k;if(t.length!==e.t.length)return!0;var n=Object.getOwnPropertyDescriptor(t,t.length-1);if(n&&!n.get)return!0;for(var r=0;r<t.length;r++)if(!t.hasOwnProperty(r))return!0;return!1}var i={};!function(e,t){V[e]||(V[e]=t)}("ES5",{J:function(t,n){var r=Array.isArray(t),o=function(t,n){if(t){for(var r=Array(n.length),o=0;o<n.length;o++)Object.defineProperty(r,""+o,e(o,!0));return r}var i=Y(n);delete i[G];for(var a=W(i),u=0;u<a.length;u++){var l=a[u];i[l]=e(l,t||!!i[l].enumerable)}return Object.create(Object.getPrototypeOf(n),i)}(r,t),i={i:r?5:4,A:n?n.A:w(),P:!1,I:!1,D:{},l:n,t:t,k:o,o:null,O:!1,C:!1};return Object.defineProperty(o,G,{value:i,writable:!0}),o},S:function(e,n,i){i?o(n)&&n[G].A===e&&t(e.p):(e.u&&function e(t){if(t&&"object"==typeof t){var n=t[G];if(n){var o=n.t,i=n.k,a=n.D,l=n.i;if(4===l)u(i,(function(t){t!==G&&(void 0!==o[t]||c(o,t)?a[t]||e(i[t]):(a[t]=!0,k(n)))})),u(o,(function(e){void 0!==i[e]||c(i,e)||(a[e]=!1,k(n))}));else if(5===l){if(r(n)&&(k(n),a.length=!0),i.length<o.length)for(var s=i.length;s<o.length;s++)a[s]=!1;else for(var f=o.length;f<i.length;f++)a[f]=!0;for(var d=Math.min(i.length,o.length),p=0;p<d;p++)i.hasOwnProperty(p)||(a[p]=!0),void 0===a[p]&&e(i[p])}}}}(e.p[0]),t(e.p))},K:function(e){return 4===e.i?n(e):r(e)}})}()},5346:function(e,t){Object.defineProperty(t,"__esModule",{value:!0});t.MithrilTsxComponent=function(){}},8018:function(e,t,n){var r=n(8178);e.exports=function(e,t,n){var o=[],i=!1,a=!1;function u(){if(i)throw new Error("Nested m.redraw.sync() call");i=!0;for(var t=0;t<o.length;t+=2)try{e(o[t],r(o[t+1]),l)}catch(e){n.error(e)}i=!1}function l(){a||(a=!0,t((function(){a=!1,u()})))}return l.sync=u,{mount:function(t,n){if(null!=n&&null==n.view&&"function"!=typeof n)throw new TypeError("m.mount(element, component) expects a component, not a vnode");var i=o.indexOf(t);i>=0&&(o.splice(i,2),e(t,[],l)),null!=n&&(o.push(t,n),e(t,r(n),l))},redraw:l}}},3223:function(e,t,n){var r=n(8178),o=n(373),i=n(5164),a=n(249),u=n(8561),l=n(7562),c=n(1127),s={};e.exports=function(e,t){var n;function f(t,r,o){if(t=a(t,r),null!=n){n();var i=o?o.state:null,u=o?o.title:null;o&&o.replace?e.history.replaceState(i,u,g.prefix+t):e.history.pushState(i,u,g.prefix+t)}else e.location.href=g.prefix+t}var d,p,v,h,m=s,y=g.SKIP={};function g(o,a,b){if(null==o)throw new Error("Ensure the DOM element that was passed to `m.route` is not undefined");var w,O=0,x=Object.keys(b).map((function(e){if("/"!==e[0])throw new SyntaxError("Routes must start with a `/`");if(/:([^\/\.-]+)(\.{3})?:/.test(e))throw new SyntaxError("Route parameter names must be separated with either `/`, `.`, or `-`");return{route:e,component:b[e],check:l(e)}})),S="function"==typeof setImmediate?setImmediate:setTimeout,P=i.resolve(),_=!1;if(n=null,null!=a){var j=u(a);if(!x.some((function(e){return e.check(j)})))throw new ReferenceError("Default route doesn't match any known routes")}function E(){_=!1;var n=e.location.hash;"#"!==g.prefix[0]&&(n=e.location.search+n,"?"!==g.prefix[0]&&"/"!==(n=e.location.pathname+n)[0]&&(n="/"+n));var r=n.concat().replace(/(?:%[a-f89][a-f0-9])+/gim,decodeURIComponent).slice(g.prefix.length),o=u(r);function i(){if(r===a)throw new Error("Could not resolve default route "+a);f(a,null,{replace:!0})}c(o.params,e.history.state),function e(n){for(;n<x.length;n++)if(x[n].check(o)){var a=x[n].component,u=x[n].route,l=a,c=h=function(i){if(c===h){if(i===y)return e(n+1);d=null==i||"function"!=typeof i.view&&"function"!=typeof i?"div":i,p=o.params,v=r,h=null,m=a.render?a:null,2===O?t.redraw():(O=2,t.redraw.sync())}};return void(a.view||"function"==typeof a?(a={},c(l)):a.onmatch?P.then((function(){return a.onmatch(o.params,r,u)})).then(c,i):c("div"))}i()}(0)}return n=function(){_||(_=!0,S(E))},"function"==typeof e.history.pushState?(w=function(){e.removeEventListener("popstate",n,!1)},e.addEventListener("popstate",n,!1)):"#"===g.prefix[0]&&(n=null,w=function(){e.removeEventListener("hashchange",E,!1)},e.addEventListener("hashchange",E,!1)),t.mount(o,{onbeforeupdate:function(){return!(!(O=O?2:1)||s===m)},oncreate:E,onremove:w,view:function(){if(O&&s!==m){var e=[r(d,p.key,p)];return m&&(e=m.render(e[0])),e}}})}return g.set=function(e,t,n){null!=h&&((n=n||{}).replace=!0),h=null,f(e,t,n)},g.get=function(){return v},g.prefix="#!",g.Link={view:function(e){var t,n,r=e.attrs.options,i={};c(i,e.attrs),i.selector=i.options=i.key=i.oninit=i.oncreate=i.onbeforeupdate=i.onupdate=i.onbeforeremove=i.onremove=null;var a=o(e.attrs.selector||"a",i,e.children);return(a.attrs.disabled=Boolean(a.attrs.disabled))?(a.attrs.href=null,a.attrs["aria-disabled"]="true",a.attrs.onclick=null):(t=a.attrs.onclick,n=a.attrs.href,a.attrs.href=g.prefix+n,a.attrs.onclick=function(e){var o;"function"==typeof t?o=t.call(e.currentTarget,e):null==t||"object"!=typeof t||"function"==typeof t.handleEvent&&t.handleEvent(e),!1===o||e.defaultPrevented||0!==e.button&&0!==e.which&&1!==e.which||e.currentTarget.target&&"_self"!==e.currentTarget.target||e.ctrlKey||e.metaKey||e.shiftKey||e.altKey||(e.preventDefault(),e.redraw=!1,g.set(n,null,r))}),a}},g.param=function(e){return p&&null!=e?p[e]:p},g}},1262:function(e,t,n){var r=n(373);r.trust=n(4742),r.fragment=n(9621),e.exports=r},865:function(e,t,n){var r=n(1262),o=n(9074),i=n(9165),a=function(){return r.apply(this,arguments)};a.m=r,a.trust=r.trust,a.fragment=r.fragment,a.mount=i.mount,a.route=n(843),a.render=n(5358),a.redraw=i.redraw,a.request=o.request,a.jsonp=o.jsonp,a.parseQueryString=n(9874),a.buildQueryString=n(478),a.parsePathname=n(8561),a.buildPathname=n(249),a.vnode=n(8178),a.PromisePolyfill=n(2803),e.exports=a},9165:function(e,t,n){var r=n(5358);e.exports=n(8018)(r,requestAnimationFrame,console)},1127:function(e){e.exports=Object.assign||function(e,t){t&&Object.keys(t).forEach((function(n){e[n]=t[n]}))}},249:function(e,t,n){var r=n(478),o=n(1127);e.exports=function(e,t){if(/:([^\/\.-]+)(\.{3})?:/.test(e))throw new SyntaxError("Template parameter names *must* be separated");if(null==t)return e;var n=e.indexOf("?"),i=e.indexOf("#"),a=i<0?e.length:i,u=n<0?a:n,l=e.slice(0,u),c={};o(c,t);var s=l.replace(/:([^\/\.-]+)(\.{3})?/g,(function(e,n,r){return delete c[n],null==t[n]?e:r?t[n]:encodeURIComponent(String(t[n]))})),f=s.indexOf("?"),d=s.indexOf("#"),p=d<0?s.length:d,v=f<0?p:f,h=s.slice(0,v);n>=0&&(h+=e.slice(n,a)),f>=0&&(h+=(n<0?"?":"&")+s.slice(f,p));var m=r(c);return m&&(h+=(n<0&&f<0?"?":"&")+m),i>=0&&(h+=e.slice(i)),d>=0&&(h+=(i<0?"":"&")+s.slice(d)),h}},7562:function(e,t,n){var r=n(8561);e.exports=function(e){var t=r(e),n=Object.keys(t.params),o=[],i=new RegExp("^"+t.path.replace(/:([^\/.-]+)(\.{3}|\.(?!\.)|-)?|[\\^$*+.()|\[\]{}]/g,(function(e,t,n){return null==t?"\\"+e:(o.push({k:t,r:"..."===n}),"..."===n?"(.*)":"."===n?"([^/]+)\\.":"([^/]+)"+(n||""))}))+"$");return function(e){for(var r=0;r<n.length;r++)if(t.params[n[r]]!==e.params[n[r]])return!1;if(!o.length)return i.test(e.path);var a=i.exec(e.path);if(null==a)return!1;for(r=0;r<o.length;r++)e.params[o[r].k]=o[r].r?a[r+1]:decodeURIComponent(a[r+1]);return!0}}},8561:function(e,t,n){var r=n(9874);e.exports=function(e){var t=e.indexOf("?"),n=e.indexOf("#"),o=n<0?e.length:n,i=t<0?o:t,a=e.slice(0,i).replace(/\/{2,}/g,"/");return a?("/"!==a[0]&&(a="/"+a),a.length>1&&"/"===a[a.length-1]&&(a=a.slice(0,-1))):a="/",{path:a,params:t<0?{}:r(e.slice(t+1,o))}}},2803:function(e){var t=function(e){if(!(this instanceof t))throw new Error("Promise must be called with `new`");if("function"!=typeof e)throw new TypeError("executor must be a function");var n=this,r=[],o=[],i=c(r,!0),a=c(o,!1),u=n._instance={resolvers:r,rejectors:o},l="function"==typeof setImmediate?setImmediate:setTimeout;function c(e,t){return function i(c){var f;try{if(!t||null==c||"object"!=typeof c&&"function"!=typeof c||"function"!=typeof(f=c.then))l((function(){t||0!==e.length||console.error("Possible unhandled promise rejection:",c);for(var n=0;n<e.length;n++)e[n](c);r.length=0,o.length=0,u.state=t,u.retry=function(){i(c)}}));else{if(c===n)throw new TypeError("Promise can't be resolved w/ itself");s(f.bind(c))}}catch(e){a(e)}}}function s(e){var t=0;function n(e){return function(n){t++>0||e(n)}}var r=n(a);try{e(n(i),r)}catch(e){r(e)}}s(e)};t.prototype.then=function(e,n){var r,o,i=this._instance;function a(e,t,n,a){t.push((function(t){if("function"!=typeof e)n(t);else try{r(e(t))}catch(e){o&&o(e)}})),"function"==typeof i.retry&&a===i.state&&i.retry()}var u=new t((function(e,t){r=e,o=t}));return a(e,i.resolvers,r,!0),a(n,i.rejectors,o,!1),u},t.prototype.catch=function(e){return this.then(null,e)},t.prototype.finally=function(e){return this.then((function(n){return t.resolve(e()).then((function(){return n}))}),(function(n){return t.resolve(e()).then((function(){return t.reject(n)}))}))},t.resolve=function(e){return e instanceof t?e:new t((function(t){t(e)}))},t.reject=function(e){return new t((function(t,n){n(e)}))},t.all=function(e){return new t((function(t,n){var r=e.length,o=0,i=[];if(0===e.length)t([]);else for(var a=0;a<e.length;a++)!function(a){function u(e){o++,i[a]=e,o===r&&t(i)}null==e[a]||"object"!=typeof e[a]&&"function"!=typeof e[a]||"function"!=typeof e[a].then?u(e[a]):e[a].then(u,n)}(a)}))},t.race=function(e){return new t((function(t,n){for(var r=0;r<e.length;r++)e[r].then(t,n)}))},e.exports=t},5164:function(e,t,n){var r=n(2803);"undefined"!=typeof window?(void 0===window.Promise?window.Promise=r:window.Promise.prototype.finally||(window.Promise.prototype.finally=r.prototype.finally),e.exports=window.Promise):void 0!==n.g?(void 0===n.g.Promise?n.g.Promise=r:n.g.Promise.prototype.finally||(n.g.Promise.prototype.finally=r.prototype.finally),e.exports=n.g.Promise):e.exports=r},478:function(e){e.exports=function(e){if("[object Object]"!==Object.prototype.toString.call(e))return"";var t=[];for(var n in e)r(n,e[n]);return t.join("&");function r(e,n){if(Array.isArray(n))for(var o=0;o<n.length;o++)r(e+"["+o+"]",n[o]);else if("[object Object]"===Object.prototype.toString.call(n))for(var o in n)r(e+"["+o+"]",n[o]);else t.push(encodeURIComponent(e)+(null!=n&&""!==n?"="+encodeURIComponent(n):""))}}},9874:function(e){e.exports=function(e){if(""===e||null==e)return{};"?"===e.charAt(0)&&(e=e.slice(1));for(var t=e.split("&"),n={},r={},o=0;o<t.length;o++){var i=t[o].split("="),a=decodeURIComponent(i[0]),u=2===i.length?decodeURIComponent(i[1]):"";"true"===u?u=!0:"false"===u&&(u=!1);var l=a.split(/\]\[?|\[/),c=r;a.indexOf("[")>-1&&l.pop();for(var s=0;s<l.length;s++){var f=l[s],d=l[s+1],p=""==d||!isNaN(parseInt(d,10));if(""===f)null==n[a=l.slice(0,s).join()]&&(n[a]=Array.isArray(c)?c.length:0),f=n[a]++;else if("__proto__"===f)break;if(s===l.length-1)c[f]=u;else{var v=Object.getOwnPropertyDescriptor(c,f);null!=v&&(v=v.value),null==v&&(c[f]=v=p?[]:{}),c=v}}}return r}},5358:function(e,t,n){e.exports=n(5452)(window)},9621:function(e,t,n){var r=n(8178),o=n(1359);e.exports=function(){var e=o.apply(0,arguments);return e.tag="[",e.children=r.normalizeChildren(e.children),e}},373:function(e,t,n){var r=n(8178),o=n(1359),i=/(?:(^|#|\.)([^#\.\[\]]+))|(\[(.+?)(?:\s*=\s*("|'|)((?:\\["'\]]|.)*?)\5)?\])/g,a={},u={}.hasOwnProperty;function l(e){for(var t in e)if(u.call(e,t))return!1;return!0}e.exports=function(e){if(null==e||"string"!=typeof e&&"function"!=typeof e&&"function"!=typeof e.view)throw Error("The selector must be either a string or a component.");var t=o.apply(1,arguments);return"string"==typeof e&&(t.children=r.normalizeChildren(t.children),"["!==e)?function(e,t){var n=t.attrs,o=r.normalizeChildren(t.children),i=u.call(n,"class"),a=i?n.class:n.className;if(t.tag=e.tag,t.attrs=null,t.children=void 0,!l(e.attrs)&&!l(n)){var c={};for(var s in n)u.call(n,s)&&(c[s]=n[s]);n=c}for(var s in e.attrs)u.call(e.attrs,s)&&"className"!==s&&!u.call(n,s)&&(n[s]=e.attrs[s]);for(var s in null==a&&null==e.attrs.className||(n.className=null!=a?null!=e.attrs.className?String(e.attrs.className)+" "+String(a):a:null!=e.attrs.className?e.attrs.className:null),i&&(n.class=null),n)if(u.call(n,s)&&"key"!==s){t.attrs=n;break}return Array.isArray(o)&&1===o.length&&null!=o[0]&&"#"===o[0].tag?t.text=o[0].children:t.children=o,t}(a[e]||function(e){for(var t,n="div",r=[],o={};t=i.exec(e);){var u=t[1],l=t[2];if(""===u&&""!==l)n=l;else if("#"===u)o.id=l;else if("."===u)r.push(l);else if("["===t[3][0]){var c=t[6];c&&(c=c.replace(/\\(["'])/g,"$1").replace(/\\\\/g,"\\")),"class"===t[4]?r.push(c):o[t[4]]=""===c?c:c||!0}}return r.length>0&&(o.className=r.join(" ")),a[e]={tag:n,attrs:o}}(e),t):(t.tag=e,t)}},1359:function(e,t,n){var r=n(8178);e.exports=function(){var e,t=arguments[this],n=this+1;if(null==t?t={}:("object"!=typeof t||null!=t.tag||Array.isArray(t))&&(t={},n=this),arguments.length===n+1)e=arguments[n],Array.isArray(e)||(e=[e]);else for(e=[];n<arguments.length;)e.push(arguments[n++]);return r("",t.key,t,e)}},5452:function(e,t,n){var r=n(8178);e.exports=function(e){var t,n=e&&e.document,o={svg:"http://www.w3.org/2000/svg",math:"http://www.w3.org/1998/Math/MathML"};function i(e){return e.attrs&&e.attrs.xmlns||o[e.tag]}function a(e,t){if(e.state!==t)throw new Error("`vnode.state` must not be modified")}function u(e){var t=e.state;try{return this.apply(t,arguments)}finally{a(e,t)}}function l(){try{return n.activeElement}catch(e){return null}}function c(e,t,n,r,o,i,a){for(var u=n;u<r;u++){var l=t[u];null!=l&&s(e,l,o,a,i)}}function s(e,t,o,a,l){var f=t.tag;if("string"==typeof f)switch(t.state={},null!=t.attrs&&F(t.attrs,t,o),f){case"#":!function(e,t,r){t.dom=n.createTextNode(t.children),w(e,t.dom,r)}(e,t,l);break;case"<":d(e,t,a,l);break;case"[":!function(e,t,r,o,i){var a=n.createDocumentFragment();if(null!=t.children){var u=t.children;c(a,u,0,u.length,r,null,o)}t.dom=a.firstChild,t.domSize=a.childNodes.length,w(e,a,i)}(e,t,o,a,l);break;default:!function(e,t,o,a,u){var l=t.tag,s=t.attrs,f=s&&s.is,d=(a=i(t)||a)?f?n.createElementNS(a,l,{is:f}):n.createElementNS(a,l):f?n.createElement(l,{is:f}):n.createElement(l);if(t.dom=d,null!=s&&function(e,t,n){for(var r in t)E(e,r,null,t[r],n)}(t,s,a),w(e,d,u),!O(t)&&(null!=t.text&&(""!==t.text?d.textContent=t.text:t.children=[r("#",void 0,void 0,t.text,void 0,void 0)]),null!=t.children)){var p=t.children;c(d,p,0,p.length,o,null,a),"select"===t.tag&&null!=s&&function(e,t){if("value"in t)if(null===t.value)-1!==e.dom.selectedIndex&&(e.dom.value=null);else{var n=""+t.value;e.dom.value===n&&-1!==e.dom.selectedIndex||(e.dom.value=n)}"selectedIndex"in t&&E(e,"selectedIndex",null,t.selectedIndex,void 0)}(t,s)}}(e,t,o,a,l)}else!function(e,t,n,o,i){(function(e,t){var n;if("function"==typeof e.tag.view){if(e.state=Object.create(e.tag),null!=(n=e.state.view).$$reentrantLock$$)return;n.$$reentrantLock$$=!0}else{if(e.state=void 0,null!=(n=e.tag).$$reentrantLock$$)return;n.$$reentrantLock$$=!0,e.state=null!=e.tag.prototype&&"function"==typeof e.tag.prototype.view?new e.tag(e):e.tag(e)}if(F(e.state,e,t),null!=e.attrs&&F(e.attrs,e,t),e.instance=r.normalize(u.call(e.state.view,e)),e.instance===e)throw Error("A view cannot return the vnode it received as argument");n.$$reentrantLock$$=null})(t,n),null!=t.instance?(s(e,t.instance,n,o,i),t.dom=t.instance.dom,t.domSize=null!=t.dom?t.instance.domSize:0):t.domSize=0}(e,t,o,a,l)}var f={caption:"table",thead:"table",tbody:"table",tfoot:"table",tr:"tbody",th:"tr",td:"tr",colgroup:"table",col:"colgroup"};function d(e,t,r,o){var i=t.children.match(/^\s*?<(\w+)/im)||[],a=n.createElement(f[i[1]]||"div");"http://www.w3.org/2000/svg"===r?(a.innerHTML='<svg xmlns="http://www.w3.org/2000/svg">'+t.children+"</svg>",a=a.firstChild):a.innerHTML=t.children,t.dom=a.firstChild,t.domSize=a.childNodes.length,t.instance=[];for(var u,l=n.createDocumentFragment();u=a.firstChild;)t.instance.push(u),l.appendChild(u);w(e,l,o)}function p(e,t,n,r,o,i){if(t!==n&&(null!=t||null!=n))if(null==t||0===t.length)c(e,n,0,n.length,r,o,i);else if(null==n||0===n.length)x(e,t,0,t.length);else{var a=null!=t[0]&&null!=t[0].key,u=null!=n[0]&&null!=n[0].key,l=0,f=0;if(!a)for(;f<t.length&&null==t[f];)f++;if(!u)for(;l<n.length&&null==n[l];)l++;if(null===u&&null==a)return;if(a!==u)x(e,t,f,t.length),c(e,n,l,n.length,r,o,i);else if(u){for(var d,p,b,w,O,P=t.length-1,_=n.length-1;P>=f&&_>=l&&(b=t[P],w=n[_],b.key===w.key);)b!==w&&v(e,b,w,r,o,i),null!=w.dom&&(o=w.dom),P--,_--;for(;P>=f&&_>=l&&(d=t[f],p=n[l],d.key===p.key);)f++,l++,d!==p&&v(e,d,p,r,y(t,f,o),i);for(;P>=f&&_>=l&&l!==_&&d.key===w.key&&b.key===p.key;)g(e,b,O=y(t,f,o)),b!==p&&v(e,b,p,r,O,i),++l<=--_&&g(e,d,o),d!==w&&v(e,d,w,r,o,i),null!=w.dom&&(o=w.dom),f++,b=t[--P],w=n[_],d=t[f],p=n[l];for(;P>=f&&_>=l&&b.key===w.key;)b!==w&&v(e,b,w,r,o,i),null!=w.dom&&(o=w.dom),_--,b=t[--P],w=n[_];if(l>_)x(e,t,f,P+1);else if(f>P)c(e,n,l,_+1,r,o,i);else{var j,E,M=o,A=_-l+1,C=new Array(A),I=0,k=0,T=2147483647,D=0;for(k=0;k<A;k++)C[k]=-1;for(k=_;k>=l;k--){null==j&&(j=h(t,f,P+1));var R=j[(w=n[k]).key];null!=R&&(T=R<T?R:-1,C[k-l]=R,b=t[R],t[R]=null,b!==w&&v(e,b,w,r,o,i),null!=w.dom&&(o=w.dom),D++)}if(o=M,D!==P-f+1&&x(e,t,f,P+1),0===D)c(e,n,l,_+1,r,o,i);else if(-1===T)for(E=function(e){var t=[0],n=0,r=0,o=0,i=m.length=e.length;for(o=0;o<i;o++)m[o]=e[o];for(o=0;o<i;++o)if(-1!==e[o]){var a=t[t.length-1];if(e[a]<e[o])m[o]=a,t.push(o);else{for(n=0,r=t.length-1;n<r;){var u=(n>>>1)+(r>>>1)+(n&r&1);e[t[u]]<e[o]?n=u+1:r=u}e[o]<e[t[n]]&&(n>0&&(m[o]=t[n-1]),t[n]=o)}}for(r=t[(n=t.length)-1];n-- >0;)t[n]=r,r=m[r];return m.length=0,t}(C),I=E.length-1,k=_;k>=l;k--)p=n[k],-1===C[k-l]?s(e,p,r,i,o):E[I]===k-l?I--:g(e,p,o),null!=p.dom&&(o=n[k].dom);else for(k=_;k>=l;k--)p=n[k],-1===C[k-l]&&s(e,p,r,i,o),null!=p.dom&&(o=n[k].dom)}}else{var N=t.length<n.length?t.length:n.length;for(l=l<f?l:f;l<N;l++)(d=t[l])===(p=n[l])||null==d&&null==p||(null==d?s(e,p,r,i,y(t,l+1,o)):null==p?S(e,d):v(e,d,p,r,y(t,l+1,o),i));t.length>N&&x(e,t,l,t.length),n.length>N&&c(e,n,l,n.length,r,o,i)}}}function v(e,t,n,o,a,l){var c=t.tag;if(c===n.tag){if(n.state=t.state,n.events=t.events,function(e,t){do{var n;if(null!=e.attrs&&"function"==typeof e.attrs.onbeforeupdate&&void 0!==(n=u.call(e.attrs.onbeforeupdate,e,t))&&!n)break;if("string"!=typeof e.tag&&"function"==typeof e.state.onbeforeupdate&&void 0!==(n=u.call(e.state.onbeforeupdate,e,t))&&!n)break;return!1}while(0);return e.dom=t.dom,e.domSize=t.domSize,e.instance=t.instance,e.attrs=t.attrs,e.children=t.children,e.text=t.text,!0}(n,t))return;if("string"==typeof c)switch(null!=n.attrs&&z(n.attrs,n,o),c){case"#":!function(e,t){e.children.toString()!==t.children.toString()&&(e.dom.nodeValue=t.children),t.dom=e.dom}(t,n);break;case"<":!function(e,t,n,r,o){t.children!==n.children?(P(e,t),d(e,n,r,o)):(n.dom=t.dom,n.domSize=t.domSize,n.instance=t.instance)}(e,t,n,l,a);break;case"[":!function(e,t,n,r,o,i){p(e,t.children,n.children,r,o,i);var a=0,u=n.children;if(n.dom=null,null!=u){for(var l=0;l<u.length;l++){var c=u[l];null!=c&&null!=c.dom&&(null==n.dom&&(n.dom=c.dom),a+=c.domSize||1)}1!==a&&(n.domSize=a)}}(e,t,n,o,a,l);break;default:!function(e,t,n,o){var a=t.dom=e.dom;o=i(t)||o,"textarea"===t.tag&&(null==t.attrs&&(t.attrs={}),null!=t.text&&(t.attrs.value=t.text,t.text=void 0)),function(e,t,n,r){if(null!=n)for(var o in n)E(e,o,t&&t[o],n[o],r);var i;if(null!=t)for(var o in t)null==(i=t[o])||null!=n&&null!=n[o]||M(e,o,i,r)}(t,e.attrs,t.attrs,o),O(t)||(null!=e.text&&null!=t.text&&""!==t.text?e.text.toString()!==t.text.toString()&&(e.dom.firstChild.nodeValue=t.text):(null!=e.text&&(e.children=[r("#",void 0,void 0,e.text,void 0,e.dom.firstChild)]),null!=t.text&&(t.children=[r("#",void 0,void 0,t.text,void 0,void 0)]),p(a,e.children,t.children,n,null,o)))}(t,n,o,l)}else!function(e,t,n,o,i,a){if(n.instance=r.normalize(u.call(n.state.view,n)),n.instance===n)throw Error("A view cannot return the vnode it received as argument");z(n.state,n,o),null!=n.attrs&&z(n.attrs,n,o),null!=n.instance?(null==t.instance?s(e,n.instance,o,a,i):v(e,t.instance,n.instance,o,i,a),n.dom=n.instance.dom,n.domSize=n.instance.domSize):null!=t.instance?(S(e,t.instance),n.dom=void 0,n.domSize=0):(n.dom=t.dom,n.domSize=t.domSize)}(e,t,n,o,a,l)}else S(e,t),s(e,n,o,l,a)}function h(e,t,n){for(var r=Object.create(null);t<n;t++){var o=e[t];if(null!=o){var i=o.key;null!=i&&(r[i]=t)}}return r}var m=[];function y(e,t,n){for(;t<e.length;t++)if(null!=e[t]&&null!=e[t].dom)return e[t].dom;return n}function g(e,t,r){var o=n.createDocumentFragment();b(e,o,t),w(e,o,r)}function b(e,t,n){for(;null!=n.dom&&n.dom.parentNode===e;){if("string"!=typeof n.tag){if(null!=(n=n.instance))continue}else if("<"===n.tag)for(var r=0;r<n.instance.length;r++)t.appendChild(n.instance[r]);else if("["!==n.tag)t.appendChild(n.dom);else if(1===n.children.length){if(null!=(n=n.children[0]))continue}else for(r=0;r<n.children.length;r++){var o=n.children[r];null!=o&&b(e,t,o)}break}}function w(e,t,n){null!=n?e.insertBefore(t,n):e.appendChild(t)}function O(e){if(null==e.attrs||null==e.attrs.contenteditable&&null==e.attrs.contentEditable)return!1;var t=e.children;if(null!=t&&1===t.length&&"<"===t[0].tag){var n=t[0].children;e.dom.innerHTML!==n&&(e.dom.innerHTML=n)}else if(null!=e.text||null!=t&&0!==t.length)throw new Error("Child node of a contenteditable must be trusted");return!0}function x(e,t,n,r){for(var o=n;o<r;o++){var i=t[o];null!=i&&S(e,i)}}function S(e,t){var n,r,o,i=0,l=t.state;if("string"!=typeof t.tag&&"function"==typeof t.state.onbeforeremove&&null!=(o=u.call(t.state.onbeforeremove,t))&&"function"==typeof o.then&&(i=1,n=o),t.attrs&&"function"==typeof t.attrs.onbeforeremove&&null!=(o=u.call(t.attrs.onbeforeremove,t))&&"function"==typeof o.then&&(i|=2,r=o),a(t,l),i){if(null!=n){var c=function(){1&i&&((i&=2)||s())};n.then(c,c)}null!=r&&(c=function(){2&i&&((i&=1)||s())},r.then(c,c))}else j(t),_(e,t);function s(){a(t,l),j(t),_(e,t)}}function P(e,t){for(var n=0;n<t.instance.length;n++)e.removeChild(t.instance[n])}function _(e,t){for(;null!=t.dom&&t.dom.parentNode===e;){if("string"!=typeof t.tag){if(null!=(t=t.instance))continue}else if("<"===t.tag)P(e,t);else{if("["!==t.tag&&(e.removeChild(t.dom),!Array.isArray(t.children)))break;if(1===t.children.length){if(null!=(t=t.children[0]))continue}else for(var n=0;n<t.children.length;n++){var r=t.children[n];null!=r&&_(e,r)}}break}}function j(e){if("string"!=typeof e.tag&&"function"==typeof e.state.onremove&&u.call(e.state.onremove,e),e.attrs&&"function"==typeof e.attrs.onremove&&u.call(e.attrs.onremove,e),"string"!=typeof e.tag)null!=e.instance&&j(e.instance);else{var t=e.children;if(Array.isArray(t))for(var n=0;n<t.length;n++){var r=t[n];null!=r&&j(r)}}}function E(e,t,r,o,i){if("key"!==t&&"is"!==t&&null!=o&&!A(t)&&(r!==o||function(e,t){return"value"===t||"checked"===t||"selectedIndex"===t||"selected"===t&&e.dom===l()||"option"===e.tag&&e.dom.parentNode===n.activeElement}(e,t)||"object"==typeof o)){if("o"===t[0]&&"n"===t[1])return N(e,t,o);if("xlink:"===t.slice(0,6))e.dom.setAttributeNS("http://www.w3.org/1999/xlink",t.slice(6),o);else if("style"===t)D(e.dom,r,o);else if(C(e,t,i)){if("value"===t){if(("input"===e.tag||"textarea"===e.tag)&&e.dom.value===""+o&&e.dom===l())return;if("select"===e.tag&&null!==r&&e.dom.value===""+o)return;if("option"===e.tag&&null!==r&&e.dom.value===""+o)return}"input"===e.tag&&"type"===t?e.dom.setAttribute(t,o):e.dom[t]=o}else"boolean"==typeof o?o?e.dom.setAttribute(t,""):e.dom.removeAttribute(t):e.dom.setAttribute("className"===t?"class":t,o)}}function M(e,t,n,r){if("key"!==t&&"is"!==t&&null!=n&&!A(t))if("o"!==t[0]||"n"!==t[1]||A(t))if("style"===t)D(e.dom,n,null);else if(!C(e,t,r)||"className"===t||"value"===t&&("option"===e.tag||"select"===e.tag&&-1===e.dom.selectedIndex&&e.dom===l())||"input"===e.tag&&"type"===t){var o=t.indexOf(":");-1!==o&&(t=t.slice(o+1)),!1!==n&&e.dom.removeAttribute("className"===t?"class":t)}else e.dom[t]=null;else N(e,t,void 0)}function A(e){return"oninit"===e||"oncreate"===e||"onupdate"===e||"onremove"===e||"onbeforeremove"===e||"onbeforeupdate"===e}function C(e,t,n){return void 0===n&&(e.tag.indexOf("-")>-1||null!=e.attrs&&e.attrs.is||"href"!==t&&"list"!==t&&"form"!==t&&"width"!==t&&"height"!==t)&&t in e.dom}var I=/[A-Z]/g;function k(e){return"-"+e.toLowerCase()}function T(e){return"-"===e[0]&&"-"===e[1]?e:"cssFloat"===e?"float":e.replace(I,k)}function D(e,t,n){if(t===n);else if(null==n)e.style.cssText="";else if("object"!=typeof n)e.style.cssText=n;else if(null==t||"object"!=typeof t)for(var r in e.style.cssText="",n)null!=(o=n[r])&&e.style.setProperty(T(r),String(o));else{for(var r in n){var o;null!=(o=n[r])&&(o=String(o))!==String(t[r])&&e.style.setProperty(T(r),o)}for(var r in t)null!=t[r]&&null==n[r]&&e.style.removeProperty(T(r))}}function R(){this._=t}function N(e,t,n){if(null!=e.events){if(e.events[t]===n)return;null==n||"function"!=typeof n&&"object"!=typeof n?(null!=e.events[t]&&e.dom.removeEventListener(t.slice(2),e.events,!1),e.events[t]=void 0):(null==e.events[t]&&e.dom.addEventListener(t.slice(2),e.events,!1),e.events[t]=n)}else null==n||"function"!=typeof n&&"object"!=typeof n||(e.events=new R,e.dom.addEventListener(t.slice(2),e.events,!1),e.events[t]=n)}function F(e,t,n){"function"==typeof e.oninit&&u.call(e.oninit,t),"function"==typeof e.oncreate&&n.push(u.bind(e.oncreate,t))}function z(e,t,n){"function"==typeof e.onupdate&&n.push(u.bind(e.onupdate,t))}return R.prototype=Object.create(null),R.prototype.handleEvent=function(e){var t,n=this["on"+e.type];"function"==typeof n?t=n.call(e.currentTarget,e):"function"==typeof n.handleEvent&&n.handleEvent(e),this._&&!1!==e.redraw&&(0,this._)(),!1===t&&(e.preventDefault(),e.stopPropagation())},function(e,n,o){if(!e)throw new TypeError("Ensure the DOM element being passed to m.route/m.mount/m.render is not undefined.");var i=[],a=l(),u=e.namespaceURI;null==e.vnodes&&(e.textContent=""),n=r.normalizeChildren(Array.isArray(n)?n:[n]);var c=t;try{t="function"==typeof o?o:void 0,p(e,e.vnodes,n,i,null,"http://www.w3.org/1999/xhtml"===u?void 0:u)}finally{t=c}e.vnodes=n,null!=a&&l()!==a&&"function"==typeof a.focus&&a.focus();for(var s=0;s<i.length;s++)i[s]()}}},4742:function(e,t,n){var r=n(8178);e.exports=function(e){return null==e&&(e=""),r("<",void 0,void 0,e,void 0,void 0)}},8178:function(e){function t(e,t,n,r,o,i){return{tag:e,key:t,attrs:n,children:r,text:o,dom:i,domSize:void 0,state:void 0,events:void 0,instance:void 0}}t.normalize=function(e){return Array.isArray(e)?t("[",void 0,void 0,t.normalizeChildren(e),void 0,void 0):null==e||"boolean"==typeof e?null:"object"==typeof e?e:t("#",void 0,void 0,String(e),void 0,void 0)},t.normalizeChildren=function(e){var n=[];if(e.length){for(var r=null!=e[0]&&null!=e[0].key,o=1;o<e.length;o++)if((null!=e[o]&&null!=e[o].key)!==r)throw new TypeError("Vnodes must either always have keys or never have keys!");for(o=0;o<e.length;o++)n[o]=t.normalize(e[o])}return n},e.exports=t},9074:function(e,t,n){var r=n(5164),o=n(9165);e.exports=n(2775)(window,r,o.redraw)},2775:function(e,t,n){var r=n(249);e.exports=function(e,t,n){var o=0;function i(e){return new t(e)}function a(e){return function(o,a){"string"!=typeof o?(a=o,o=o.url):null==a&&(a={});var u=new t((function(t,n){e(r(o,a.params),a,(function(e){if("function"==typeof a.type)if(Array.isArray(e))for(var n=0;n<e.length;n++)e[n]=new a.type(e[n]);else e=new a.type(e);t(e)}),n)}));if(!0===a.background)return u;var l=0;function c(){0==--l&&"function"==typeof n&&n()}return function e(t){var n=t.then;return t.constructor=i,t.then=function(){l++;var r=n.apply(t,arguments);return r.then(c,(function(e){if(c(),0===l)throw e})),e(r)},t}(u)}}function u(e,t){for(var n in e.headers)if({}.hasOwnProperty.call(e.headers,n)&&t.test(n))return!0;return!1}return i.prototype=t.prototype,i.__proto__=t,{request:a((function(t,n,r,o){var i,a=null!=n.method?n.method.toUpperCase():"GET",l=n.body,c=!(null!=n.serialize&&n.serialize!==JSON.serialize||l instanceof e.FormData),s=n.responseType||("function"==typeof n.extract?"":"json"),f=new e.XMLHttpRequest,d=!1,p=f,v=f.abort;for(var h in f.abort=function(){d=!0,v.call(this)},f.open(a,t,!1!==n.async,"string"==typeof n.user?n.user:void 0,"string"==typeof n.password?n.password:void 0),c&&null!=l&&!u(n,/^content-type$/i)&&f.setRequestHeader("Content-Type","application/json; charset=utf-8"),"function"==typeof n.deserialize||u(n,/^accept$/i)||f.setRequestHeader("Accept","application/json, text/*"),n.withCredentials&&(f.withCredentials=n.withCredentials),n.timeout&&(f.timeout=n.timeout),f.responseType=s,n.headers)({}).hasOwnProperty.call(n.headers,h)&&f.setRequestHeader(h,n.headers[h]);f.onreadystatechange=function(e){if(!d&&4===e.target.readyState)try{var i,a=e.target.status>=200&&e.target.status<300||304===e.target.status||/^file:\/\//i.test(t),u=e.target.response;if("json"===s?e.target.responseType||"function"==typeof n.extract||(u=JSON.parse(e.target.responseText)):s&&"text"!==s||null==u&&(u=e.target.responseText),"function"==typeof n.extract?(u=n.extract(e.target,n),a=!0):"function"==typeof n.deserialize&&(u=n.deserialize(u)),a)r(u);else{try{i=e.target.responseText}catch(e){i=u}var l=new Error(i);l.code=e.target.status,l.response=u,o(l)}}catch(e){o(e)}},"function"==typeof n.config&&(f=n.config(f,n,t)||f)!==p&&(i=f.abort,f.abort=function(){d=!0,i.call(this)}),null==l?f.send():"function"==typeof n.serialize?f.send(n.serialize(l)):l instanceof e.FormData?f.send(l):f.send(JSON.stringify(l))})),jsonp:a((function(t,n,r,i){var a=n.callbackName||"_mithril_"+Math.round(1e16*Math.random())+"_"+o++,u=e.document.createElement("script");e[a]=function(t){delete e[a],u.parentNode.removeChild(u),r(t)},u.onerror=function(){delete e[a],u.parentNode.removeChild(u),i(new Error("JSONP request failed"))},u.src=t+(t.indexOf("?")<0?"?":"&")+encodeURIComponent(n.callbackKey||"callback")+"="+encodeURIComponent(a),e.document.documentElement.appendChild(u)}))}}},843:function(e,t,n){var r=n(9165);e.exports=n(3223)(window,r)},4951:function(e,t){},7566:function(e,t,n){Object.defineProperty(t,"X$",{value:!0}),t.Pf=t.Cs=void 0;const r=n(7935),o=window.location.origin;var i;!function(e){e[e.CS_Loaded=0]="CS_Loaded",e[e.CS_Complete=1]="CS_Complete",e[e.SC_SwapModel=2]="SC_SwapModel",e[e.SC_SwapTexture=3]="SC_SwapTexture",e[e.SC_SetParameterOverride=4]="SC_SetParameterOverride",e[e.SC_SetParameters=5]="SC_SetParameters"}(i=t.Cs||(t.Cs={})),t.Pf=class{constructor(e,t,n){this.state=e,this.loader=t,this.assetStore=n,this.parentWindow=window.parent||null,this.parentWindow&&window.addEventListener("message",(async e=>{var a;if(console.log("Subscribe"),e.origin!==o)throw"Message origin does not match";const u=e.data;if(console.log({msg:u}),u.type===i.SC_SwapModel){const e=u.payload;await this.loader.reinitialize(),await this.loader.loadModelAsset(e.id);let t=new r.Model(this.assetStore.get(e.id));this.state.models.data[e.layer]=t,this.sendMessage(i.CS_Complete,null,u.id)}else if(u.type===i.SC_SwapTexture){const e=u.payload;if(!n.has(e.modelId))throw`Asset '${e.modelId}' not found`;const r=n.get(e.modelId),o=`texture/${e.modelId.split("/")[1]}.${e.index}/${String(e.variant).padStart(2,"0")}`,l=await t.loadTexture(o);null===(a=r.renderer)||void 0===a||a.bindTexture(e.index,l.data),this.sendMessage(i.CS_Complete,null,u.id)}else if(u.type===i.SC_SetParameterOverride){const e=u.payload;this.state.external.override=e.override,this.sendMessage(i.CS_Complete,null,u.id)}else if(u.type===i.SC_SetParameters){const e=u.payload;this.state.external.faceX=e.faceX/50-1,this.state.external.faceY=e.faceY/50-1,this.state.external.bodyX=e.bodyX/50-1,this.state.external.bodyY=e.bodyY/50-1,this.sendMessage(i.CS_Complete,null,u.id)}}))}sendMessage(e,t,n){if(!this.parentWindow)return;const r={id:n||0,type:e,payload:t};this.parentWindow.postMessage(r,o)}}},7188:function(e,t){var n;Object.defineProperty(t,"__esModule",{value:!0}),t.ModelState=t.ModelLayer=void 0,function(e){e[e.BackHair=0]="BackHair",e[e.Body=1]="Body",e[e.Eyes=2]="Eyes",e[e.FrontHair=3]="FrontHair",e[e.Outfit=4]="Outfit"}(n=t.ModelLayer||(t.ModelLayer={})),t.ModelState=class{constructor(e){this.assets=e,this.data={[n.BackHair]:null,[n.Body]:null,[n.Eyes]:null,[n.FrontHair]:null,[n.Outfit]:null}}}},7935:function(e,t){Object.defineProperty(t,"__esModule",{value:!0}),t.Model=void 0,t.Model=class{constructor(e){this.asset=e}syncParams(e){}}},4231:function(e,t,n){var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const o=r(n(865)),i=n(5346),a=n(2188),u=r(n(8059));class l extends i.MithrilTsxComponent{oncreate({attrs:e}){e.dispatch((0,a.setIFrameElement)(document.getElementById("iframe")))}view(){return(0,o.default)("div",{class:"embed bg-dark-900"},(0,o.default)("iframe",{id:"iframe",allow:"accelerometer; autoplay  ; encrypted-media; gyroscope; picture-in-picture",frameborder:"0",height:"100%",src:"/embed",width:"100%",sandbox:"allow-scripts allow-same-origin",style:"min-height: 500px;"}))}}t.default=(0,u.default)(l).connect()},7636:function(e,t,n){var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const o=r(n(865)),i=n(5346),a=r(n(4231)),u=r(n(2970));class l extends i.MithrilTsxComponent{view({attrs:e}){return(0,o.default)("div",{class:"app flex h-full"},(0,o.default)("div",{class:"flex justify-center items-center flex-1 w-full"},(0,o.default)(a.default,null)),(0,o.default)(u.default,null))}}t.default=l},2970:function(e,t,n){var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const o=r(n(865)),i=n(5346),a=n(3225),u=r(n(8059)),l=r(n(4306)),c=r(n(9905)),s=r(n(2075)),f=r(n(9724)),d=r(n(9152)),p=r(n(4391)),v={[a.TabId.Outfit]:c.default,[a.TabId.Body]:s.default,[a.TabId.Eye]:f.default,[a.TabId.Hair]:d.default,[a.TabId.Parameters]:p.default};class h extends i.MithrilTsxComponent{view({attrs:e}){const t=v[e.activeTab];return(0,o.default)("div",{class:"flex w-240 bg-dark-800"},(0,o.default)("div",{class:"flex flex-col px-65 py-175"},(0,o.default)(l.default,{id:a.TabId.Outfit,activeTab:e.activeTab},"OUTFIT"),(0,o.default)(l.default,{id:a.TabId.Body,activeTab:e.activeTab},"BODY"),(0,o.default)(l.default,{id:a.TabId.Eye,activeTab:e.activeTab},"EYES"),(0,o.default)(l.default,{id:a.TabId.Hair,activeTab:e.activeTab},"HAIR"),(0,o.default)(l.default,{id:a.TabId.Parameters,activeTab:e.activeTab},"PARAMETERS")),(0,o.default)("div",{class:"flex-1 w-full bg-dark-900 border-dark-700"},(0,o.default)(t,null)))}}t.default=(0,u.default)(h).connect((e=>({activeTab:e.tab})))},4306:function(e,t,n){var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const o=r(n(865)),i=n(5346),a=r(n(8059)),u=n(3225);class l extends i.MithrilTsxComponent{view({attrs:e,children:t}){const n=e.id===e.activeTab?" bg-dark-700":"";return(0,o.default)("div",{class:`hover:bg-dark-700 flex justify-center items-center w-170 h-170 mb-60 cursor-pointer text-xs rounded-lg text-center${n}`,onclick:()=>e.dispatch((0,u.setActiveTab)(e.id))},t)}}t.default=(0,a.default)(l).connect()},2075:function(e,t,n){var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const o=r(n(865)),i=n(5346),a=n(6714),u=r(n(8059)),l=r(n(2790)),c=[{name:"Neutral",color:"#f3ccbf"},{name:"Bright",color:"#f3d3cd"},{name:"Warm",color:"#e3bdaf"},{name:"Tan",color:"#d1a79b"},{name:"Dark",color:"#c09589"}];class s extends i.MithrilTsxComponent{view({attrs:e}){return(0,o.default)("div",{class:"px-120 py-140"},(0,o.default)("h1",{class:"mb-100 text-lg text-right font-medium"},"BODY COLOR"),c.map(((t,n)=>(0,o.default)(l.default,{itemGroup:a.ItemGroup.BodyColor,itemIdx:n,active:e.activeItem===n,color:t.color,modelId:"model/000001",index:0,variant:n},t.name))))}}t.default=(0,u.default)(s).connect((e=>({activeItem:e.items.cursorPosition[a.ItemGroup.BodyColor]})))},9724:function(e,t,n){var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const o=r(n(865)),i=n(5346),a=n(6714),u=r(n(8059)),l=r(n(2790)),c=[{id:1,name:"Black"},{id:0,name:"Blue"},{id:2,name:"Brown"},{id:3,name:"Gray"},{id:4,name:"Green"},{id:5,name:"Lilac"},{id:6,name:"Purple"},{id:7,name:"Red"}];class s extends i.MithrilTsxComponent{view({attrs:e}){return(0,o.default)("div",{class:"px-120 py-140"},(0,o.default)("h1",{class:"mb-100 text-lg text-right font-medium"},"EYE COLOR"),c.map(((t,n)=>(0,o.default)(l.default,{itemGroup:a.ItemGroup.EyeColor,itemIdx:n,active:e.activeItem===n,iconSrc:`/assets/icon/eye/${t.name.toLowerCase()}.png`,modelId:"model/000001",index:1,variant:t.id},t.name))))}}t.default=(0,u.default)(s).connect((e=>({activeItem:e.items.cursorPosition[a.ItemGroup.EyeColor]})))},9152:function(e,t,n){var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const o=r(n(865)),i=n(5346),a=n(6714),u=r(n(8059)),l=r(n(2790)),c=[{id:3,name:"Ash",color:"#937a6f"},{id:1,name:"Azure",color:"#677aab"},{id:2,name:"Black Turquoise",color:"#292929"},{id:0,name:"Gray",color:"#504c4e"},{id:4,name:"Strawberry",color:"#dd93a2"}];class s extends i.MithrilTsxComponent{view({attrs:e}){return(0,o.default)("div",{class:"px-120 py-140"},(0,o.default)("h1",{class:"mb-100 text-lg text-right font-medium"},"HAIR COLOR"),c.map(((t,n)=>(0,o.default)(l.default,{itemGroup:a.ItemGroup.HairColor,itemIdx:n,active:e.activeItem===n,color:t.color,modelId:"model/000001",index:[4,5],variant:t.id},t.name))))}}t.default=(0,u.default)(s).connect((e=>({activeItem:e.items.cursorPosition[a.ItemGroup.HairColor]})))},9905:function(e,t,n){var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const o=r(n(865)),i=n(5346),a=n(6714),u=r(n(8059)),l=r(n(2790)),c=n(7188),s=[{name:"Ace of Spades",id:"model/Outfit/Ace_Of_Spades",color:"#fff"},{name:"Magic Apprentice",id:"model/Outfit/Magic_Apprentice",color:"#fff"},{name:"Silverhorn",id:"model/Outfit/Silverhorn",color:"#fff"},{name:"Sweater Vest",id:"model/Outfit/Sweater_Vest",color:"#fff"},{name:"White Tank Top",id:"model/Outfit/White_Tank_Top",color:"#fff"}];class f extends i.MithrilTsxComponent{view({attrs:e}){return(0,o.default)("div",{class:"px-120 py-140"},(0,o.default)("h1",{class:"mb-100 text-lg text-right font-medium"},"OUTFIT"),s.map(((t,n)=>(0,o.default)(l.default,{itemGroup:a.ItemGroup.Outfit,itemIdx:n,active:e.activeItem===n,color:t.color,modelLayer:c.ModelLayer.Outfit,modelId:t.id,index:0,variant:n},t.name))))}}t.default=(0,u.default)(f).connect((e=>({activeItem:e.items.cursorPosition[a.ItemGroup.Outfit]})))},4391:function(e,t,n){var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const o=r(n(865)),i=n(5346),a=n(3598),u=r(n(8059)),l=r(n(2526)),c=[{param:a.Parameter.FaceX,label:"Face X"},{param:a.Parameter.FaceY,label:"Face Y"},{param:a.Parameter.BodyX,label:"Body X"},{param:a.Parameter.BodyY,label:"Body Y"}];class s extends i.MithrilTsxComponent{view({attrs:e}){const t=e.override?"":" opacity-40 pointer-events-none";return(0,o.default)("div",{class:"px-120 py-140"},(0,o.default)("h1",{class:"mb-100 text-lg text-right font-medium"},"PARAMETERS"),(0,o.default)("div",{class:"form mb-150 cursor-pointer",onclick:()=>{e.dispatch((0,a.toggleOverride)({value:!e.override}))}},(0,o.default)("input",{type:"checkbox",class:"bg-dark-700 w-110 h-110 mr-80 border-none rounded-md align-middle appearance-none cursor-pointer checked:bg-slate-400",checked:e.override}),(0,o.default)("label",{class:"align-middle cursor-pointer"},"Use custom parameters")),(0,o.default)("div",{class:t},c.map((t=>(0,o.default)(l.default,{param:t.param,label:t.label,value:e.values[t.param]})))))}}t.default=(0,u.default)(s).connect((e=>({override:e.parameters.override,values:e.parameters.value})))},2790:function(e,t,n){var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const o=r(n(865)),i=n(5346),a=r(n(8059)),u=n(6714),l=n(2188);class c extends i.MithrilTsxComponent{view({attrs:e,children:t}){const n=e.active?" bg-dark-700":"",r=e.color?`background:${e.color};`:"",i=e.iconSrc?`background-image:url(${e.iconSrc})`:"",a=Array.isArray(e.index)?e.index:[e.index];return(0,o.default)("div",{class:`flex items-center bg-dark-800 p-110 my-80 rounded-lg cursor-pointer hover:bg-dark-700${n}`,onclick:()=>{e.dispatch((0,u.selectItem)({group:e.itemGroup,index:e.itemIdx,iFrameActions:e.itemGroup===u.ItemGroup.Outfit?[(0,l.swapModel)({layer:e.modelLayer,id:e.modelId})]:a.map((t=>(0,l.swapTexture)({modelId:e.modelId,index:t,variant:e.variant})))}))}},(0,o.default)("div",{class:"bg-cover bg-dark-900 w-120 h-120 rounded-lg mr-80",style:`${r}${i}`}),t)}}t.default=(0,a.default)(c).connect()},2526:function(e,t,n){var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const o=r(n(865)),i=n(5346),a=n(3598),u=r(n(8059));class l extends i.MithrilTsxComponent{constructor(){super(),this.x=0,this.width=0,this.drag=!1,this.attrs=null,this.handleMouseDown=this.handleMouseDown.bind(this),this.handleMouseUp=this.handleMouseUp.bind(this),this.handleMouseMove=this.handleMouseMove.bind(this)}oncreate({dom:e}){this.x=e.getBoundingClientRect().x,this.width=e.offsetWidth,window.addEventListener("mouseup",this.handleMouseUp),window.addEventListener("mousemove",this.handleMouseMove)}onbeforeremove(){window.removeEventListener("mouseup",this.handleMouseUp),window.removeEventListener("mousemove",this.handleMouseMove)}view({attrs:e}){this.attrs=e;const t=`left:${e.value}%;`;return(0,o.default)("div",{class:"my-110"},(0,o.default)("div",null,e.label),(0,o.default)("div",{class:"relative bg-dark-600 h-70 my-80 rounded cursor-pointer",onmousedown:this.handleMouseDown},(0,o.default)("div",{class:"absolute bg-white rounded-full w-100 h-100 -mt-45 -ml-60 cursor-grab",style:`${t}`})))}handleMouseDown(e){this.drag=!0,this.handleMouseMove(e)}handleMouseUp(e){this.drag=!1}handleMouseMove(e){this.drag&&this.attrs&&(this.attrs.dispatch((0,a.slideParameter)({param:this.attrs.param,value:(e.pageX-this.x)/this.width*100})),o.default.redraw())}}t.default=(0,u.default)(l).connect()},6716:function(e,t,n){var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const o=r(n(865)),i=r(n(3054)),a=n(8059);t.default=function(e){return function(t){return class extends a.WrappedComponent{view({attrs:n,children:r}){const a=void 0===t?null:t(i.default.getState());return(0,o.default)(e,{...n,...a,dispatch:i.default.dispatch},r)}}}}},8059:function(e,t,n){var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.WrappedComponent=void 0;const o=r(n(6716)),i=n(5346);class a extends i.MithrilTsxComponent{view(e){}}t.WrappedComponent=a;const u={connect:o.default};t.default=e=>{let t={};for(let e of Object.keys(u))t[e]=function(...n){let r=u[e](this)(...n);return Object.assign(r,t),r};return Object.assign(e,t),e}},2629:function(e,t,n){var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const o=r(n(865));n(3054),n(822);const i=r(n(7636));o.default.mount(document.body,i.default)},822:function(e,t,n){var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.sendMessage=void 0;const o=r(n(3054)),i=window.location.origin;let a=0,u={};t.sendMessage=async function(e,t){const n=o.default.getState().iframe.iFrameElement;if(!n)throw"IFrame element not initialized";const r=n.contentWindow;if(!r)throw"IFrame window not initialized";const l={id:++a,type:e,payload:t};return r.postMessage(l,i),new Promise(((e,t)=>{u[a]=t=>{e(t)}}))}},2188:function(e,t,n){var r;Object.defineProperty(t,"__esModule",{value:!0}),t.setIFrameElement=t.setStatus=t.IFrame=t.swapTexture=t.swapModel=t.IFrameStatus=void 0;const o=n(4501),i=n(8770),a=n(822);var u;!function(e){e[e.Ready=0]="Ready",e[e.Pending=1]="Pending"}(u=t.IFrameStatus||(t.IFrameStatus={}));const l={status:u.Pending,iFrameElement:null};t.swapModel=(0,o.createAsyncThunk)("iframe/swap",(async({layer:e,id:n},{dispatch:r,getState:o})=>{if(o().iframe.status===u.Pending)throw"iframe action called while pending";r((0,t.setStatus)(u.Pending)),await(0,a.sendMessage)(i.MessageType.SC_SwapModel,{layer:e,id:n}),r((0,t.setStatus)(u.Ready))})),t.swapTexture=(0,o.createAsyncThunk)("iframe/swap",(async({modelId:e,index:n,variant:r},{dispatch:o,getState:l})=>{if(l().iframe.status===u.Pending)throw"iframe action called while pending";o((0,t.setStatus)(u.Pending)),await(0,a.sendMessage)(i.MessageType.SC_SwapTexture,{modelId:e,index:n,variant:r}),o((0,t.setStatus)(u.Ready))})),t.IFrame=(0,o.createSlice)({name:"iframe",initialState:l,reducers:{setStatus:(e,t)=>{e.status=t.payload},setIFrameElement:(e,t)=>({...e,iFrameElement:t.payload})}}),r=t.IFrame.actions,t.setStatus=r.setStatus,t.setIFrameElement=r.setIFrameElement,t.default=t.IFrame.reducer},6714:function(e,t,n){Object.defineProperty(t,"__esModule",{value:!0}),t.setCursorPosition=t.Items=t.selectItem=t.ItemGroup=void 0;const r=n(4501),o=n(2188);var i;!function(e){e[e.Outfit=0]="Outfit",e[e.BodyColor=1]="BodyColor",e[e.EyeColor=2]="EyeColor",e[e.HairColor=3]="HairColor"}(i=t.ItemGroup||(t.ItemGroup={})),t.selectItem=(0,r.createAsyncThunk)("items/select",(async({group:e,index:n,iFrameActions:r},{dispatch:i,getState:a})=>{if(a().iframe.status!==o.IFrameStatus.Pending){i((0,t.setCursorPosition)({group:e,index:n}));for(let e of r)await i(e)}})),t.Items=(0,r.createSlice)({name:"items",initialState:{cursorPosition:{[i.Outfit]:0,[i.BodyColor]:0,[i.EyeColor]:1,[i.HairColor]:3}},reducers:{setCursorPosition:(e,t)=>({...e,cursorPosition:{...e.cursorPosition,[t.payload.group]:t.payload.index}})}}),t.setCursorPosition=t.Items.actions.setCursorPosition,t.default=t.Items.reducer},3598:function(e,t,n){var r;Object.defineProperty(t,"__esModule",{value:!0}),t.setParameterValue=t.setOverride=t.Parameters=t.slideParameter=t.toggleOverride=t.Parameter=void 0;const o=n(4501),i=n(8770),a=n(822);var u;!function(e){e[e.FaceX=0]="FaceX",e[e.FaceY=1]="FaceY",e[e.BodyX=2]="BodyX",e[e.BodyY=3]="BodyY"}(u=t.Parameter||(t.Parameter={})),t.toggleOverride=(0,o.createAsyncThunk)("parameters/slide",(async({value:e},{dispatch:n,getState:r})=>{n((0,t.setOverride)(e)),(0,a.sendMessage)(i.MessageType.SC_SetParameterOverride,{override:e})})),t.slideParameter=(0,o.createAsyncThunk)("parameters/slide",(async({param:e,value:n},{dispatch:r,getState:o})=>{r((0,t.setParameterValue)({param:e,value:n}));const l=o().parameters.value;(0,a.sendMessage)(i.MessageType.SC_SetParameters,{faceX:l[u.FaceX],faceY:l[u.FaceY],bodyX:l[u.BodyX],bodyY:l[u.BodyY]})})),t.Parameters=(0,o.createSlice)({name:"parameters",initialState:{override:!1,value:{[u.FaceX]:50,[u.FaceY]:50,[u.BodyX]:50,[u.BodyY]:50}},reducers:{setOverride:(e,t)=>{e.override=t.payload},setParameterValue:(e,t)=>{let n=Math.max(0,Math.min(100,t.payload.value));return n<3?n=0:n>97?n=100:n>47&&n<53&&(n=50),{...e,value:{...e.value,[t.payload.param]:n}}}}}),r=t.Parameters.actions,t.setOverride=r.setOverride,t.setParameterValue=r.setParameterValue,t.default=t.Parameters.reducer},3054:function(e,t,n){var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const o=n(4501),i=r(n(3225)),a=r(n(2188)),u=r(n(6714)),l=r(n(3598)),c=(0,o.configureStore)({reducer:{tab:i.default,iframe:a.default,items:u.default,parameters:l.default}});t.default=c},3225:function(e,t,n){Object.defineProperty(t,"__esModule",{value:!0}),t.setActiveTab=t.Tab=t.TabId=void 0;const r=n(4501);var o;!function(e){e[e.Outfit=0]="Outfit",e[e.Body=1]="Body",e[e.Eye=2]="Eye",e[e.Hair=3]="Hair",e[e.Parameters=4]="Parameters"}(o=t.TabId||(t.TabId={})),t.Tab=(0,r.createSlice)({name:"tab",initialState:o.Outfit,reducers:{setActiveTab:(e,t)=>t.payload}}),t.setActiveTab=t.Tab.actions.setActiveTab,t.default=t.Tab.reducer}},t={};function n(r){var o=t[r];if(void 0!==o)return o.exports;var i=t[r]={exports:{}};return e[r].call(i.exports,i,i.exports,n),i.exports}n.d=function(e,t){for(var r in t)n.o(t,r)&&!n.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:t[r]})},n.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n(2629)}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QVNHLEVBQVFBLEVBQU9ILFFBQVNzZ0IsR0FHcEVuZ0IsRUFBT0gsT0FDZixDQ3JCQXNnQixFQUFvQjdsQyxFQUFJLFNBQVN1bEIsRUFBUzBnQixHQUN6QyxJQUFJLElBQUlqaEMsS0FBT2loQyxFQUNYSixFQUFvQnZuQyxFQUFFMm5DLEVBQVlqaEMsS0FBUzZnQyxFQUFvQnZuQyxFQUFFaW5CLEVBQVN2Z0IsSUFDNUV2SCxPQUFPK0YsZUFBZStoQixFQUFTdmdCLEVBQUssQ0FBRW5GLFlBQVksRUFBTUQsSUFBS3FtQyxFQUFXamhDLElBRzNFLEVDUEE2Z0MsRUFBb0JqbEMsRUFBSSxXQUN2QixHQUEwQixpQkFBZnNsQyxXQUF5QixPQUFPQSxXQUMzQyxJQUNDLE9BQU92aUMsTUFBUSxJQUFJN0YsU0FBUyxjQUFiLEVBQ2hCLENBQUUsTUFBT1YsR0FDUixHQUFzQixpQkFBWDBULE9BQXFCLE9BQU9BLE1BQ3hDLENBQ0EsQ0FQdUIsR0NBeEIrMEIsRUFBb0J2bkMsRUFBSSxTQUFTeUcsRUFBSytLLEdBQVEsT0FBT3JTLE9BQU9tQixVQUFVakIsZUFBZUMsS0FBS21ILEVBQUsrSyxFQUFPLEVDQ3RHKzFCLEVBQW9COW9DLEVBQUksU0FBU3dvQixHQUNYLG9CQUFYemlCLFFBQTBCQSxPQUFPcWpDLGFBQzFDMW9DLE9BQU8rRixlQUFlK2hCLEVBQVN6aUIsT0FBT3FqQyxZQUFhLENBQUVybUMsTUFBTyxXQUU3RHJDLE9BQU8rRixlQUFlK2hCLEVBQVMsYUFBYyxDQUFFemxCLE9BQU8sR0FDdkQsRUNIMEIrbEMsRUFBb0IsSyIsInNvdXJjZXMiOlsid2VicGFjazovL2FzdW5hLXdlYi12aWV3ZXItY2xpZW50Ly4vbm9kZV9tb2R1bGVzL2ltbWVyL2Rpc3QvaW1tZXIuZXNtLmpzIiwid2VicGFjazovL2FzdW5hLXdlYi12aWV3ZXItY2xpZW50Ly4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2RlZmluZVByb3BlcnR5LmpzIiwid2VicGFjazovL2FzdW5hLXdlYi12aWV3ZXItY2xpZW50Ly4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFNwcmVhZDIuanMiLCJ3ZWJwYWNrOi8vYXN1bmEtd2ViLXZpZXdlci1jbGllbnQvLi9ub2RlX21vZHVsZXMvcmVkdXgvZXMvcmVkdXguanMiLCJ3ZWJwYWNrOi8vYXN1bmEtd2ViLXZpZXdlci1jbGllbnQvLi9ub2RlX21vZHVsZXMvcmVzZWxlY3QvZXMvZGVmYXVsdE1lbW9pemUuanMiLCJ3ZWJwYWNrOi8vYXN1bmEtd2ViLXZpZXdlci1jbGllbnQvLi9ub2RlX21vZHVsZXMvcmVzZWxlY3QvZXMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vYXN1bmEtd2ViLXZpZXdlci1jbGllbnQvLi9ub2RlX21vZHVsZXMvcmVkdXgtdGh1bmsvZXMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vYXN1bmEtd2ViLXZpZXdlci1jbGllbnQvLi9ub2RlX21vZHVsZXMvQHJlZHV4anMvdG9vbGtpdC9kaXN0L3JlZHV4LXRvb2xraXQuZXNtLmpzIiwid2VicGFjazovL2FzdW5hLXdlYi12aWV3ZXItY2xpZW50Ly4vbm9kZV9tb2R1bGVzL21pdGhyaWwtdHN4LWNvbXBvbmVudC9pbmRleC5qcyIsIndlYnBhY2s6Ly9hc3VuYS13ZWItdmlld2VyLWNsaWVudC8uL25vZGVfbW9kdWxlcy9taXRocmlsL2FwaS9tb3VudC1yZWRyYXcuanMiLCJ3ZWJwYWNrOi8vYXN1bmEtd2ViLXZpZXdlci1jbGllbnQvLi9ub2RlX21vZHVsZXMvbWl0aHJpbC9hcGkvcm91dGVyLmpzIiwid2VicGFjazovL2FzdW5hLXdlYi12aWV3ZXItY2xpZW50Ly4vbm9kZV9tb2R1bGVzL21pdGhyaWwvaHlwZXJzY3JpcHQuanMiLCJ3ZWJwYWNrOi8vYXN1bmEtd2ViLXZpZXdlci1jbGllbnQvLi9ub2RlX21vZHVsZXMvbWl0aHJpbC9pbmRleC5qcyIsIndlYnBhY2s6Ly9hc3VuYS13ZWItdmlld2VyLWNsaWVudC8uL25vZGVfbW9kdWxlcy9taXRocmlsL21vdW50LXJlZHJhdy5qcyIsIndlYnBhY2s6Ly9hc3VuYS13ZWItdmlld2VyLWNsaWVudC8uL25vZGVfbW9kdWxlcy9taXRocmlsL3BhdGhuYW1lL2Fzc2lnbi5qcyIsIndlYnBhY2s6Ly9hc3VuYS13ZWItdmlld2VyLWNsaWVudC8uL25vZGVfbW9kdWxlcy9taXRocmlsL3BhdGhuYW1lL2J1aWxkLmpzIiwid2VicGFjazovL2FzdW5hLXdlYi12aWV3ZXItY2xpZW50Ly4vbm9kZV9tb2R1bGVzL21pdGhyaWwvcGF0aG5hbWUvY29tcGlsZVRlbXBsYXRlLmpzIiwid2VicGFjazovL2FzdW5hLXdlYi12aWV3ZXItY2xpZW50Ly4vbm9kZV9tb2R1bGVzL21pdGhyaWwvcGF0aG5hbWUvcGFyc2UuanMiLCJ3ZWJwYWNrOi8vYXN1bmEtd2ViLXZpZXdlci1jbGllbnQvLi9ub2RlX21vZHVsZXMvbWl0aHJpbC9wcm9taXNlL3BvbHlmaWxsLmpzIiwid2VicGFjazovL2FzdW5hLXdlYi12aWV3ZXItY2xpZW50Ly4vbm9kZV9tb2R1bGVzL21pdGhyaWwvcHJvbWlzZS9wcm9taXNlLmpzIiwid2VicGFjazovL2FzdW5hLXdlYi12aWV3ZXItY2xpZW50Ly4vbm9kZV9tb2R1bGVzL21pdGhyaWwvcXVlcnlzdHJpbmcvYnVpbGQuanMiLCJ3ZWJwYWNrOi8vYXN1bmEtd2ViLXZpZXdlci1jbGllbnQvLi9ub2RlX21vZHVsZXMvbWl0aHJpbC9xdWVyeXN0cmluZy9wYXJzZS5qcyIsIndlYnBhY2s6Ly9hc3VuYS13ZWItdmlld2VyLWNsaWVudC8uL25vZGVfbW9kdWxlcy9taXRocmlsL3JlbmRlci5qcyIsIndlYnBhY2s6Ly9hc3VuYS13ZWItdmlld2VyLWNsaWVudC8uL25vZGVfbW9kdWxlcy9taXRocmlsL3JlbmRlci9mcmFnbWVudC5qcyIsIndlYnBhY2s6Ly9hc3VuYS13ZWItdmlld2VyLWNsaWVudC8uL25vZGVfbW9kdWxlcy9taXRocmlsL3JlbmRlci9oeXBlcnNjcmlwdC5qcyIsIndlYnBhY2s6Ly9hc3VuYS13ZWItdmlld2VyLWNsaWVudC8uL25vZGVfbW9kdWxlcy9taXRocmlsL3JlbmRlci9oeXBlcnNjcmlwdFZub2RlLmpzIiwid2VicGFjazovL2FzdW5hLXdlYi12aWV3ZXItY2xpZW50Ly4vbm9kZV9tb2R1bGVzL21pdGhyaWwvcmVuZGVyL3JlbmRlci5qcyIsIndlYnBhY2s6Ly9hc3VuYS13ZWItdmlld2VyLWNsaWVudC8uL25vZGVfbW9kdWxlcy9taXRocmlsL3JlbmRlci90cnVzdC5qcyIsIndlYnBhY2s6Ly9hc3VuYS13ZWItdmlld2VyLWNsaWVudC8uL25vZGVfbW9kdWxlcy9taXRocmlsL3JlbmRlci92bm9kZS5qcyIsIndlYnBhY2s6Ly9hc3VuYS13ZWItdmlld2VyLWNsaWVudC8uL25vZGVfbW9kdWxlcy9taXRocmlsL3JlcXVlc3QuanMiLCJ3ZWJwYWNrOi8vYXN1bmEtd2ViLXZpZXdlci1jbGllbnQvLi9ub2RlX21vZHVsZXMvbWl0aHJpbC9yZXF1ZXN0L3JlcXVlc3QuanMiLCJ3ZWJwYWNrOi8vYXN1bmEtd2ViLXZpZXdlci1jbGllbnQvLi9ub2RlX21vZHVsZXMvbWl0aHJpbC9yb3V0ZS5qcyIsIndlYnBhY2s6Ly9hc3VuYS13ZWItdmlld2VyLWNsaWVudC8uLi9hc3VuYS13ZWItbGl2ZTJkL3NyYy9leHRlcm5hbC9NZXNzZW5nZXIudHMiLCJ3ZWJwYWNrOi8vYXN1bmEtd2ViLXZpZXdlci1jbGllbnQvLi4vYXN1bmEtd2ViLWxpdmUyZC9zcmMvc3RhdGUvTW9kZWxTdGF0ZS50cyIsIndlYnBhY2s6Ly9hc3VuYS13ZWItdmlld2VyLWNsaWVudC8uLi9hc3VuYS13ZWItbGl2ZTJkL3NyYy9zdHJ1Y3QvTW9kZWwudHMiLCJ3ZWJwYWNrOi8vYXN1bmEtd2ViLXZpZXdlci1jbGllbnQvLi9zcmMvY29tcG9uZW50cy9FbWJlZC50c3giLCJ3ZWJwYWNrOi8vYXN1bmEtd2ViLXZpZXdlci1jbGllbnQvLi9zcmMvY29tcG9uZW50cy9MYXlvdXQudHN4Iiwid2VicGFjazovL2FzdW5hLXdlYi12aWV3ZXItY2xpZW50Ly4vc3JjL2NvbXBvbmVudHMvUGFuZWwudHN4Iiwid2VicGFjazovL2FzdW5hLXdlYi12aWV3ZXItY2xpZW50Ly4vc3JjL2NvbXBvbmVudHMvUGFuZWxUYWIudHN4Iiwid2VicGFjazovL2FzdW5hLXdlYi12aWV3ZXItY2xpZW50Ly4vc3JjL2NvbXBvbmVudHMvdGFicy9UYWJCb2R5LnRzeCIsIndlYnBhY2s6Ly9hc3VuYS13ZWItdmlld2VyLWNsaWVudC8uL3NyYy9jb21wb25lbnRzL3RhYnMvVGFiRXllLnRzeCIsIndlYnBhY2s6Ly9hc3VuYS13ZWItdmlld2VyLWNsaWVudC8uL3NyYy9jb21wb25lbnRzL3RhYnMvVGFiSGFpci50c3giLCJ3ZWJwYWNrOi8vYXN1bmEtd2ViLXZpZXdlci1jbGllbnQvLi9zcmMvY29tcG9uZW50cy90YWJzL1RhYk91dGZpdC50c3giLCJ3ZWJwYWNrOi8vYXN1bmEtd2ViLXZpZXdlci1jbGllbnQvLi9zcmMvY29tcG9uZW50cy90YWJzL1RhYlBhcmFtZXRlcnMudHN4Iiwid2VicGFjazovL2FzdW5hLXdlYi12aWV3ZXItY2xpZW50Ly4vc3JjL2NvbXBvbmVudHMvdWkvSXRlbS50c3giLCJ3ZWJwYWNrOi8vYXN1bmEtd2ViLXZpZXdlci1jbGllbnQvLi9zcmMvY29tcG9uZW50cy91aS9TbGlkZXIudHN4Iiwid2VicGFjazovL2FzdW5hLXdlYi12aWV3ZXItY2xpZW50Ly4vc3JjL2hvYy9jb25uZWN0LnRzeCIsIndlYnBhY2s6Ly9hc3VuYS13ZWItdmlld2VyLWNsaWVudC8uL3NyYy9ob2MvdXBncmFkZS50cyIsIndlYnBhY2s6Ly9hc3VuYS13ZWItdmlld2VyLWNsaWVudC8uL3NyYy9pbmRleC50c3giLCJ3ZWJwYWNrOi8vYXN1bmEtd2ViLXZpZXdlci1jbGllbnQvLi9zcmMvbWVzc2VuZ2VyLnRzIiwid2VicGFjazovL2FzdW5hLXdlYi12aWV3ZXItY2xpZW50Ly4vc3JjL3N0b3JlL2lmcmFtZS50cyIsIndlYnBhY2s6Ly9hc3VuYS13ZWItdmlld2VyLWNsaWVudC8uL3NyYy9zdG9yZS9pdGVtcy50cyIsIndlYnBhY2s6Ly9hc3VuYS13ZWItdmlld2VyLWNsaWVudC8uL3NyYy9zdG9yZS9wYXJhbWV0ZXJzLnRzIiwid2VicGFjazovL2FzdW5hLXdlYi12aWV3ZXItY2xpZW50Ly4vc3JjL3N0b3JlL3N0b3JlLnRzIiwid2VicGFjazovL2FzdW5hLXdlYi12aWV3ZXItY2xpZW50Ly4vc3JjL3N0b3JlL3RhYi50cyIsIndlYnBhY2s6Ly9hc3VuYS13ZWItdmlld2VyLWNsaWVudC93ZWJwYWNrL2Jvb3RzdHJhcCIsIndlYnBhY2s6Ly9hc3VuYS13ZWItdmlld2VyLWNsaWVudC93ZWJwYWNrL3J1bnRpbWUvZGVmaW5lIHByb3BlcnR5IGdldHRlcnMiLCJ3ZWJwYWNrOi8vYXN1bmEtd2ViLXZpZXdlci1jbGllbnQvd2VicGFjay9ydW50aW1lL2dsb2JhbCIsIndlYnBhY2s6Ly9hc3VuYS13ZWItdmlld2VyLWNsaWVudC93ZWJwYWNrL3J1bnRpbWUvaGFzT3duUHJvcGVydHkgc2hvcnRoYW5kIiwid2VicGFjazovL2FzdW5hLXdlYi12aWV3ZXItY2xpZW50L3dlYnBhY2svcnVudGltZS9tYWtlIG5hbWVzcGFjZSBvYmplY3QiLCJ3ZWJwYWNrOi8vYXN1bmEtd2ViLXZpZXdlci1jbGllbnQvd2VicGFjay9zdGFydHVwIl0sInNvdXJjZXNDb250ZW50IjpbImZ1bmN0aW9uIG4obil7Zm9yKHZhciByPWFyZ3VtZW50cy5sZW5ndGgsdD1BcnJheShyPjE/ci0xOjApLGU9MTtlPHI7ZSsrKXRbZS0xXT1hcmd1bWVudHNbZV07aWYoXCJwcm9kdWN0aW9uXCIhPT1wcm9jZXNzLmVudi5OT0RFX0VOVil7dmFyIGk9WVtuXSxvPWk/XCJmdW5jdGlvblwiPT10eXBlb2YgaT9pLmFwcGx5KG51bGwsdCk6aTpcInVua25vd24gZXJyb3IgbnI6IFwiK247dGhyb3cgRXJyb3IoXCJbSW1tZXJdIFwiK28pfXRocm93IEVycm9yKFwiW0ltbWVyXSBtaW5pZmllZCBlcnJvciBucjogXCIrbisodC5sZW5ndGg/XCIgXCIrdC5tYXAoKGZ1bmN0aW9uKG4pe3JldHVyblwiJ1wiK24rXCInXCJ9KSkuam9pbihcIixcIik6XCJcIikrXCIuIEZpbmQgdGhlIGZ1bGwgZXJyb3IgYXQ6IGh0dHBzOi8vYml0Lmx5LzNjWEVLV2ZcIil9ZnVuY3Rpb24gcihuKXtyZXR1cm4hIW4mJiEhbltRXX1mdW5jdGlvbiB0KG4pe3JldHVybiEhbiYmKGZ1bmN0aW9uKG4pe2lmKCFufHxcIm9iamVjdFwiIT10eXBlb2YgbilyZXR1cm4hMTt2YXIgcj1PYmplY3QuZ2V0UHJvdG90eXBlT2Yobik7aWYobnVsbD09PXIpcmV0dXJuITA7dmFyIHQ9T2JqZWN0Lmhhc093blByb3BlcnR5LmNhbGwocixcImNvbnN0cnVjdG9yXCIpJiZyLmNvbnN0cnVjdG9yO3JldHVybiB0PT09T2JqZWN0fHxcImZ1bmN0aW9uXCI9PXR5cGVvZiB0JiZGdW5jdGlvbi50b1N0cmluZy5jYWxsKHQpPT09Wn0obil8fEFycmF5LmlzQXJyYXkobil8fCEhbltMXXx8ISFuLmNvbnN0cnVjdG9yW0xdfHxzKG4pfHx2KG4pKX1mdW5jdGlvbiBlKHQpe3JldHVybiByKHQpfHxuKDIzLHQpLHRbUV0udH1mdW5jdGlvbiBpKG4scix0KXt2b2lkIDA9PT10JiYodD0hMSksMD09PW8obik/KHQ/T2JqZWN0LmtleXM6bm4pKG4pLmZvckVhY2goKGZ1bmN0aW9uKGUpe3QmJlwic3ltYm9sXCI9PXR5cGVvZiBlfHxyKGUsbltlXSxuKX0pKTpuLmZvckVhY2goKGZ1bmN0aW9uKHQsZSl7cmV0dXJuIHIoZSx0LG4pfSkpfWZ1bmN0aW9uIG8obil7dmFyIHI9bltRXTtyZXR1cm4gcj9yLmk+Mz9yLmktNDpyLmk6QXJyYXkuaXNBcnJheShuKT8xOnMobik/Mjp2KG4pPzM6MH1mdW5jdGlvbiB1KG4scil7cmV0dXJuIDI9PT1vKG4pP24uaGFzKHIpOk9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChuLHIpfWZ1bmN0aW9uIGEobixyKXtyZXR1cm4gMj09PW8obik/bi5nZXQocik6bltyXX1mdW5jdGlvbiBmKG4scix0KXt2YXIgZT1vKG4pOzI9PT1lP24uc2V0KHIsdCk6Mz09PWU/KG4uZGVsZXRlKHIpLG4uYWRkKHQpKTpuW3JdPXR9ZnVuY3Rpb24gYyhuLHIpe3JldHVybiBuPT09cj8wIT09bnx8MS9uPT0xL3I6biE9biYmciE9cn1mdW5jdGlvbiBzKG4pe3JldHVybiBYJiZuIGluc3RhbmNlb2YgTWFwfWZ1bmN0aW9uIHYobil7cmV0dXJuIHEmJm4gaW5zdGFuY2VvZiBTZXR9ZnVuY3Rpb24gcChuKXtyZXR1cm4gbi5vfHxuLnR9ZnVuY3Rpb24gbChuKXtpZihBcnJheS5pc0FycmF5KG4pKXJldHVybiBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChuKTt2YXIgcj1ybihuKTtkZWxldGUgcltRXTtmb3IodmFyIHQ9bm4ociksZT0wO2U8dC5sZW5ndGg7ZSsrKXt2YXIgaT10W2VdLG89cltpXTshMT09PW8ud3JpdGFibGUmJihvLndyaXRhYmxlPSEwLG8uY29uZmlndXJhYmxlPSEwKSwoby5nZXR8fG8uc2V0KSYmKHJbaV09e2NvbmZpZ3VyYWJsZTohMCx3cml0YWJsZTohMCxlbnVtZXJhYmxlOm8uZW51bWVyYWJsZSx2YWx1ZTpuW2ldfSl9cmV0dXJuIE9iamVjdC5jcmVhdGUoT2JqZWN0LmdldFByb3RvdHlwZU9mKG4pLHIpfWZ1bmN0aW9uIGQobixlKXtyZXR1cm4gdm9pZCAwPT09ZSYmKGU9ITEpLHkobil8fHIobil8fCF0KG4pP246KG8obik+MSYmKG4uc2V0PW4uYWRkPW4uY2xlYXI9bi5kZWxldGU9aCksT2JqZWN0LmZyZWV6ZShuKSxlJiZpKG4sKGZ1bmN0aW9uKG4scil7cmV0dXJuIGQociwhMCl9KSwhMCksbil9ZnVuY3Rpb24gaCgpe24oMil9ZnVuY3Rpb24geShuKXtyZXR1cm4gbnVsbD09bnx8XCJvYmplY3RcIiE9dHlwZW9mIG58fE9iamVjdC5pc0Zyb3plbihuKX1mdW5jdGlvbiBiKHIpe3ZhciB0PXRuW3JdO3JldHVybiB0fHxuKDE4LHIpLHR9ZnVuY3Rpb24gbShuLHIpe3RuW25dfHwodG5bbl09cil9ZnVuY3Rpb24gXygpe3JldHVyblwicHJvZHVjdGlvblwiPT09cHJvY2Vzcy5lbnYuTk9ERV9FTlZ8fFV8fG4oMCksVX1mdW5jdGlvbiBqKG4scil7ciYmKGIoXCJQYXRjaGVzXCIpLG4udT1bXSxuLnM9W10sbi52PXIpfWZ1bmN0aW9uIE8obil7ZyhuKSxuLnAuZm9yRWFjaChTKSxuLnA9bnVsbH1mdW5jdGlvbiBnKG4pe249PT1VJiYoVT1uLmwpfWZ1bmN0aW9uIHcobil7cmV0dXJuIFU9e3A6W10sbDpVLGg6bixtOiEwLF86MH19ZnVuY3Rpb24gUyhuKXt2YXIgcj1uW1FdOzA9PT1yLml8fDE9PT1yLmk/ci5qKCk6ci5PPSEwfWZ1bmN0aW9uIFAocixlKXtlLl89ZS5wLmxlbmd0aDt2YXIgaT1lLnBbMF0sbz12b2lkIDAhPT1yJiZyIT09aTtyZXR1cm4gZS5oLmd8fGIoXCJFUzVcIikuUyhlLHIsbyksbz8oaVtRXS5QJiYoTyhlKSxuKDQpKSx0KHIpJiYocj1NKGUsciksZS5sfHx4KGUscikpLGUudSYmYihcIlBhdGNoZXNcIikuTShpW1FdLnQscixlLnUsZS5zKSk6cj1NKGUsaSxbXSksTyhlKSxlLnUmJmUudihlLnUsZS5zKSxyIT09SD9yOnZvaWQgMH1mdW5jdGlvbiBNKG4scix0KXtpZih5KHIpKXJldHVybiByO3ZhciBlPXJbUV07aWYoIWUpcmV0dXJuIGkociwoZnVuY3Rpb24oaSxvKXtyZXR1cm4gQShuLGUscixpLG8sdCl9KSwhMCkscjtpZihlLkEhPT1uKXJldHVybiByO2lmKCFlLlApcmV0dXJuIHgobixlLnQsITApLGUudDtpZighZS5JKXtlLkk9ITAsZS5BLl8tLTt2YXIgbz00PT09ZS5pfHw1PT09ZS5pP2Uubz1sKGUuayk6ZS5vO2koMz09PWUuaT9uZXcgU2V0KG8pOm8sKGZ1bmN0aW9uKHIsaSl7cmV0dXJuIEEobixlLG8scixpLHQpfSkpLHgobixvLCExKSx0JiZuLnUmJmIoXCJQYXRjaGVzXCIpLlIoZSx0LG4udSxuLnMpfXJldHVybiBlLm99ZnVuY3Rpb24gQShlLGksbyxhLGMscyl7aWYoXCJwcm9kdWN0aW9uXCIhPT1wcm9jZXNzLmVudi5OT0RFX0VOViYmYz09PW8mJm4oNSkscihjKSl7dmFyIHY9TShlLGMscyYmaSYmMyE9PWkuaSYmIXUoaS5ELGEpP3MuY29uY2F0KGEpOnZvaWQgMCk7aWYoZihvLGEsdiksIXIodikpcmV0dXJuO2UubT0hMX1pZih0KGMpJiYheShjKSl7aWYoIWUuaC5GJiZlLl88MSlyZXR1cm47TShlLGMpLGkmJmkuQS5sfHx4KGUsYyl9fWZ1bmN0aW9uIHgobixyLHQpe3ZvaWQgMD09PXQmJih0PSExKSxuLmguRiYmbi5tJiZkKHIsdCl9ZnVuY3Rpb24geihuLHIpe3ZhciB0PW5bUV07cmV0dXJuKHQ/cCh0KTpuKVtyXX1mdW5jdGlvbiBJKG4scil7aWYociBpbiBuKWZvcih2YXIgdD1PYmplY3QuZ2V0UHJvdG90eXBlT2Yobik7dDspe3ZhciBlPU9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IodCxyKTtpZihlKXJldHVybiBlO3Q9T2JqZWN0LmdldFByb3RvdHlwZU9mKHQpfX1mdW5jdGlvbiBrKG4pe24uUHx8KG4uUD0hMCxuLmwmJmsobi5sKSl9ZnVuY3Rpb24gRShuKXtuLm98fChuLm89bChuLnQpKX1mdW5jdGlvbiBSKG4scix0KXt2YXIgZT1zKHIpP2IoXCJNYXBTZXRcIikuTihyLHQpOnYocik/YihcIk1hcFNldFwiKS5UKHIsdCk6bi5nP2Z1bmN0aW9uKG4scil7dmFyIHQ9QXJyYXkuaXNBcnJheShuKSxlPXtpOnQ/MTowLEE6cj9yLkE6XygpLFA6ITEsSTohMSxEOnt9LGw6cix0Om4sazpudWxsLG86bnVsbCxqOm51bGwsQzohMX0saT1lLG89ZW47dCYmKGk9W2VdLG89b24pO3ZhciB1PVByb3h5LnJldm9jYWJsZShpLG8pLGE9dS5yZXZva2UsZj11LnByb3h5O3JldHVybiBlLms9ZixlLmo9YSxmfShyLHQpOmIoXCJFUzVcIikuSihyLHQpO3JldHVybih0P3QuQTpfKCkpLnAucHVzaChlKSxlfWZ1bmN0aW9uIEQoZSl7cmV0dXJuIHIoZSl8fG4oMjIsZSksZnVuY3Rpb24gbihyKXtpZighdChyKSlyZXR1cm4gcjt2YXIgZSx1PXJbUV0sYz1vKHIpO2lmKHUpe2lmKCF1LlAmJih1Lmk8NHx8IWIoXCJFUzVcIikuSyh1KSkpcmV0dXJuIHUudDt1Lkk9ITAsZT1GKHIsYyksdS5JPSExfWVsc2UgZT1GKHIsYyk7cmV0dXJuIGkoZSwoZnVuY3Rpb24ocix0KXt1JiZhKHUudCxyKT09PXR8fGYoZSxyLG4odCkpfSkpLDM9PT1jP25ldyBTZXQoZSk6ZX0oZSl9ZnVuY3Rpb24gRihuLHIpe3N3aXRjaChyKXtjYXNlIDI6cmV0dXJuIG5ldyBNYXAobik7Y2FzZSAzOnJldHVybiBBcnJheS5mcm9tKG4pfXJldHVybiBsKG4pfWZ1bmN0aW9uIE4oKXtmdW5jdGlvbiB0KG4scil7dmFyIHQ9c1tuXTtyZXR1cm4gdD90LmVudW1lcmFibGU9cjpzW25dPXQ9e2NvbmZpZ3VyYWJsZTohMCxlbnVtZXJhYmxlOnIsZ2V0OmZ1bmN0aW9uKCl7dmFyIHI9dGhpc1tRXTtyZXR1cm5cInByb2R1Y3Rpb25cIiE9PXByb2Nlc3MuZW52Lk5PREVfRU5WJiZmKHIpLGVuLmdldChyLG4pfSxzZXQ6ZnVuY3Rpb24ocil7dmFyIHQ9dGhpc1tRXTtcInByb2R1Y3Rpb25cIiE9PXByb2Nlc3MuZW52Lk5PREVfRU5WJiZmKHQpLGVuLnNldCh0LG4scil9fSx0fWZ1bmN0aW9uIGUobil7Zm9yKHZhciByPW4ubGVuZ3RoLTE7cj49MDtyLS0pe3ZhciB0PW5bcl1bUV07aWYoIXQuUClzd2l0Y2godC5pKXtjYXNlIDU6YSh0KSYmayh0KTticmVhaztjYXNlIDQ6byh0KSYmayh0KX19fWZ1bmN0aW9uIG8obil7Zm9yKHZhciByPW4udCx0PW4uayxlPW5uKHQpLGk9ZS5sZW5ndGgtMTtpPj0wO2ktLSl7dmFyIG89ZVtpXTtpZihvIT09USl7dmFyIGE9cltvXTtpZih2b2lkIDA9PT1hJiYhdShyLG8pKXJldHVybiEwO3ZhciBmPXRbb10scz1mJiZmW1FdO2lmKHM/cy50IT09YTohYyhmLGEpKXJldHVybiEwfX12YXIgdj0hIXJbUV07cmV0dXJuIGUubGVuZ3RoIT09bm4ocikubGVuZ3RoKyh2PzA6MSl9ZnVuY3Rpb24gYShuKXt2YXIgcj1uLms7aWYoci5sZW5ndGghPT1uLnQubGVuZ3RoKXJldHVybiEwO3ZhciB0PU9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IocixyLmxlbmd0aC0xKTtpZih0JiYhdC5nZXQpcmV0dXJuITA7Zm9yKHZhciBlPTA7ZTxyLmxlbmd0aDtlKyspaWYoIXIuaGFzT3duUHJvcGVydHkoZSkpcmV0dXJuITA7cmV0dXJuITF9ZnVuY3Rpb24gZihyKXtyLk8mJm4oMyxKU09OLnN0cmluZ2lmeShwKHIpKSl9dmFyIHM9e307bShcIkVTNVwiLHtKOmZ1bmN0aW9uKG4scil7dmFyIGU9QXJyYXkuaXNBcnJheShuKSxpPWZ1bmN0aW9uKG4scil7aWYobil7Zm9yKHZhciBlPUFycmF5KHIubGVuZ3RoKSxpPTA7aTxyLmxlbmd0aDtpKyspT2JqZWN0LmRlZmluZVByb3BlcnR5KGUsXCJcIitpLHQoaSwhMCkpO3JldHVybiBlfXZhciBvPXJuKHIpO2RlbGV0ZSBvW1FdO2Zvcih2YXIgdT1ubihvKSxhPTA7YTx1Lmxlbmd0aDthKyspe3ZhciBmPXVbYV07b1tmXT10KGYsbnx8ISFvW2ZdLmVudW1lcmFibGUpfXJldHVybiBPYmplY3QuY3JlYXRlKE9iamVjdC5nZXRQcm90b3R5cGVPZihyKSxvKX0oZSxuKSxvPXtpOmU/NTo0LEE6cj9yLkE6XygpLFA6ITEsSTohMSxEOnt9LGw6cix0Om4sazppLG86bnVsbCxPOiExLEM6ITF9O3JldHVybiBPYmplY3QuZGVmaW5lUHJvcGVydHkoaSxRLHt2YWx1ZTpvLHdyaXRhYmxlOiEwfSksaX0sUzpmdW5jdGlvbihuLHQsbyl7bz9yKHQpJiZ0W1FdLkE9PT1uJiZlKG4ucCk6KG4udSYmZnVuY3Rpb24gbihyKXtpZihyJiZcIm9iamVjdFwiPT10eXBlb2Ygcil7dmFyIHQ9cltRXTtpZih0KXt2YXIgZT10LnQsbz10LmssZj10LkQsYz10Lmk7aWYoND09PWMpaShvLChmdW5jdGlvbihyKXtyIT09USYmKHZvaWQgMCE9PWVbcl18fHUoZSxyKT9mW3JdfHxuKG9bcl0pOihmW3JdPSEwLGsodCkpKX0pKSxpKGUsKGZ1bmN0aW9uKG4pe3ZvaWQgMCE9PW9bbl18fHUobyxuKXx8KGZbbl09ITEsayh0KSl9KSk7ZWxzZSBpZig1PT09Yyl7aWYoYSh0KSYmKGsodCksZi5sZW5ndGg9ITApLG8ubGVuZ3RoPGUubGVuZ3RoKWZvcih2YXIgcz1vLmxlbmd0aDtzPGUubGVuZ3RoO3MrKylmW3NdPSExO2Vsc2UgZm9yKHZhciB2PWUubGVuZ3RoO3Y8by5sZW5ndGg7disrKWZbdl09ITA7Zm9yKHZhciBwPU1hdGgubWluKG8ubGVuZ3RoLGUubGVuZ3RoKSxsPTA7bDxwO2wrKylvLmhhc093blByb3BlcnR5KGwpfHwoZltsXT0hMCksdm9pZCAwPT09ZltsXSYmbihvW2xdKX19fX0obi5wWzBdKSxlKG4ucCkpfSxLOmZ1bmN0aW9uKG4pe3JldHVybiA0PT09bi5pP28obik6YShuKX19KX1mdW5jdGlvbiBUKCl7ZnVuY3Rpb24gZShuKXtpZighdChuKSlyZXR1cm4gbjtpZihBcnJheS5pc0FycmF5KG4pKXJldHVybiBuLm1hcChlKTtpZihzKG4pKXJldHVybiBuZXcgTWFwKEFycmF5LmZyb20obi5lbnRyaWVzKCkpLm1hcCgoZnVuY3Rpb24obil7cmV0dXJuW25bMF0sZShuWzFdKV19KSkpO2lmKHYobikpcmV0dXJuIG5ldyBTZXQoQXJyYXkuZnJvbShuKS5tYXAoZSkpO3ZhciByPU9iamVjdC5jcmVhdGUoT2JqZWN0LmdldFByb3RvdHlwZU9mKG4pKTtmb3IodmFyIGkgaW4gbilyW2ldPWUobltpXSk7cmV0dXJuIHUobixMKSYmKHJbTF09bltMXSkscn1mdW5jdGlvbiBmKG4pe3JldHVybiByKG4pP2Uobik6bn12YXIgYz1cImFkZFwiO20oXCJQYXRjaGVzXCIseyQ6ZnVuY3Rpb24ocix0KXtyZXR1cm4gdC5mb3JFYWNoKChmdW5jdGlvbih0KXtmb3IodmFyIGk9dC5wYXRoLHU9dC5vcCxmPXIscz0wO3M8aS5sZW5ndGgtMTtzKyspe3ZhciB2PW8oZikscD1cIlwiK2lbc107MCE9PXYmJjEhPT12fHxcIl9fcHJvdG9fX1wiIT09cCYmXCJjb25zdHJ1Y3RvclwiIT09cHx8bigyNCksXCJmdW5jdGlvblwiPT10eXBlb2YgZiYmXCJwcm90b3R5cGVcIj09PXAmJm4oMjQpLFwib2JqZWN0XCIhPXR5cGVvZihmPWEoZixwKSkmJm4oMTUsaS5qb2luKFwiL1wiKSl9dmFyIGw9byhmKSxkPWUodC52YWx1ZSksaD1pW2kubGVuZ3RoLTFdO3N3aXRjaCh1KXtjYXNlXCJyZXBsYWNlXCI6c3dpdGNoKGwpe2Nhc2UgMjpyZXR1cm4gZi5zZXQoaCxkKTtjYXNlIDM6bigxNik7ZGVmYXVsdDpyZXR1cm4gZltoXT1kfWNhc2UgYzpzd2l0Y2gobCl7Y2FzZSAxOnJldHVyblwiLVwiPT09aD9mLnB1c2goZCk6Zi5zcGxpY2UoaCwwLGQpO2Nhc2UgMjpyZXR1cm4gZi5zZXQoaCxkKTtjYXNlIDM6cmV0dXJuIGYuYWRkKGQpO2RlZmF1bHQ6cmV0dXJuIGZbaF09ZH1jYXNlXCJyZW1vdmVcIjpzd2l0Y2gobCl7Y2FzZSAxOnJldHVybiBmLnNwbGljZShoLDEpO2Nhc2UgMjpyZXR1cm4gZi5kZWxldGUoaCk7Y2FzZSAzOnJldHVybiBmLmRlbGV0ZSh0LnZhbHVlKTtkZWZhdWx0OnJldHVybiBkZWxldGUgZltoXX1kZWZhdWx0Om4oMTcsdSl9fSkpLHJ9LFI6ZnVuY3Rpb24obixyLHQsZSl7c3dpdGNoKG4uaSl7Y2FzZSAwOmNhc2UgNDpjYXNlIDI6cmV0dXJuIGZ1bmN0aW9uKG4scix0LGUpe3ZhciBvPW4udCxzPW4ubztpKG4uRCwoZnVuY3Rpb24obixpKXt2YXIgdj1hKG8sbikscD1hKHMsbiksbD1pP3UobyxuKT9cInJlcGxhY2VcIjpjOlwicmVtb3ZlXCI7aWYodiE9PXB8fFwicmVwbGFjZVwiIT09bCl7dmFyIGQ9ci5jb25jYXQobik7dC5wdXNoKFwicmVtb3ZlXCI9PT1sP3tvcDpsLHBhdGg6ZH06e29wOmwscGF0aDpkLHZhbHVlOnB9KSxlLnB1c2gobD09PWM/e29wOlwicmVtb3ZlXCIscGF0aDpkfTpcInJlbW92ZVwiPT09bD97b3A6YyxwYXRoOmQsdmFsdWU6Zih2KX06e29wOlwicmVwbGFjZVwiLHBhdGg6ZCx2YWx1ZTpmKHYpfSl9fSkpfShuLHIsdCxlKTtjYXNlIDU6Y2FzZSAxOnJldHVybiBmdW5jdGlvbihuLHIsdCxlKXt2YXIgaT1uLnQsbz1uLkQsdT1uLm87aWYodS5sZW5ndGg8aS5sZW5ndGgpe3ZhciBhPVt1LGldO2k9YVswXSx1PWFbMV07dmFyIHM9W2UsdF07dD1zWzBdLGU9c1sxXX1mb3IodmFyIHY9MDt2PGkubGVuZ3RoO3YrKylpZihvW3ZdJiZ1W3ZdIT09aVt2XSl7dmFyIHA9ci5jb25jYXQoW3ZdKTt0LnB1c2goe29wOlwicmVwbGFjZVwiLHBhdGg6cCx2YWx1ZTpmKHVbdl0pfSksZS5wdXNoKHtvcDpcInJlcGxhY2VcIixwYXRoOnAsdmFsdWU6ZihpW3ZdKX0pfWZvcih2YXIgbD1pLmxlbmd0aDtsPHUubGVuZ3RoO2wrKyl7dmFyIGQ9ci5jb25jYXQoW2xdKTt0LnB1c2goe29wOmMscGF0aDpkLHZhbHVlOmYodVtsXSl9KX1pLmxlbmd0aDx1Lmxlbmd0aCYmZS5wdXNoKHtvcDpcInJlcGxhY2VcIixwYXRoOnIuY29uY2F0KFtcImxlbmd0aFwiXSksdmFsdWU6aS5sZW5ndGh9KX0obixyLHQsZSk7Y2FzZSAzOnJldHVybiBmdW5jdGlvbihuLHIsdCxlKXt2YXIgaT1uLnQsbz1uLm8sdT0wO2kuZm9yRWFjaCgoZnVuY3Rpb24obil7aWYoIW8uaGFzKG4pKXt2YXIgaT1yLmNvbmNhdChbdV0pO3QucHVzaCh7b3A6XCJyZW1vdmVcIixwYXRoOmksdmFsdWU6bn0pLGUudW5zaGlmdCh7b3A6YyxwYXRoOmksdmFsdWU6bn0pfXUrK30pKSx1PTAsby5mb3JFYWNoKChmdW5jdGlvbihuKXtpZighaS5oYXMobikpe3ZhciBvPXIuY29uY2F0KFt1XSk7dC5wdXNoKHtvcDpjLHBhdGg6byx2YWx1ZTpufSksZS51bnNoaWZ0KHtvcDpcInJlbW92ZVwiLHBhdGg6byx2YWx1ZTpufSl9dSsrfSkpfShuLHIsdCxlKX19LE06ZnVuY3Rpb24obixyLHQsZSl7dC5wdXNoKHtvcDpcInJlcGxhY2VcIixwYXRoOltdLHZhbHVlOnI9PT1IP3ZvaWQgMDpyfSksZS5wdXNoKHtvcDpcInJlcGxhY2VcIixwYXRoOltdLHZhbHVlOm59KX19KX1mdW5jdGlvbiBDKCl7ZnVuY3Rpb24gcihuLHIpe2Z1bmN0aW9uIHQoKXt0aGlzLmNvbnN0cnVjdG9yPW59YShuLHIpLG4ucHJvdG90eXBlPSh0LnByb3RvdHlwZT1yLnByb3RvdHlwZSxuZXcgdCl9ZnVuY3Rpb24gZShuKXtuLm98fChuLkQ9bmV3IE1hcCxuLm89bmV3IE1hcChuLnQpKX1mdW5jdGlvbiBvKG4pe24ub3x8KG4ubz1uZXcgU2V0LG4udC5mb3JFYWNoKChmdW5jdGlvbihyKXtpZih0KHIpKXt2YXIgZT1SKG4uQS5oLHIsbik7bi5wLnNldChyLGUpLG4uby5hZGQoZSl9ZWxzZSBuLm8uYWRkKHIpfSkpKX1mdW5jdGlvbiB1KHIpe3IuTyYmbigzLEpTT04uc3RyaW5naWZ5KHAocikpKX12YXIgYT1mdW5jdGlvbihuLHIpe3JldHVybihhPU9iamVjdC5zZXRQcm90b3R5cGVPZnx8e19fcHJvdG9fXzpbXX1pbnN0YW5jZW9mIEFycmF5JiZmdW5jdGlvbihuLHIpe24uX19wcm90b19fPXJ9fHxmdW5jdGlvbihuLHIpe2Zvcih2YXIgdCBpbiByKXIuaGFzT3duUHJvcGVydHkodCkmJihuW3RdPXJbdF0pfSkobixyKX0sZj1mdW5jdGlvbigpe2Z1bmN0aW9uIG4obixyKXtyZXR1cm4gdGhpc1tRXT17aToyLGw6cixBOnI/ci5BOl8oKSxQOiExLEk6ITEsbzp2b2lkIDAsRDp2b2lkIDAsdDpuLGs6dGhpcyxDOiExLE86ITF9LHRoaXN9cihuLE1hcCk7dmFyIG89bi5wcm90b3R5cGU7cmV0dXJuIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvLFwic2l6ZVwiLHtnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gcCh0aGlzW1FdKS5zaXplfX0pLG8uaGFzPWZ1bmN0aW9uKG4pe3JldHVybiBwKHRoaXNbUV0pLmhhcyhuKX0sby5zZXQ9ZnVuY3Rpb24obixyKXt2YXIgdD10aGlzW1FdO3JldHVybiB1KHQpLHAodCkuaGFzKG4pJiZwKHQpLmdldChuKT09PXJ8fChlKHQpLGsodCksdC5ELnNldChuLCEwKSx0Lm8uc2V0KG4sciksdC5ELnNldChuLCEwKSksdGhpc30sby5kZWxldGU9ZnVuY3Rpb24obil7aWYoIXRoaXMuaGFzKG4pKXJldHVybiExO3ZhciByPXRoaXNbUV07cmV0dXJuIHUociksZShyKSxrKHIpLHIudC5oYXMobik/ci5ELnNldChuLCExKTpyLkQuZGVsZXRlKG4pLHIuby5kZWxldGUobiksITB9LG8uY2xlYXI9ZnVuY3Rpb24oKXt2YXIgbj10aGlzW1FdO3UobikscChuKS5zaXplJiYoZShuKSxrKG4pLG4uRD1uZXcgTWFwLGkobi50LChmdW5jdGlvbihyKXtuLkQuc2V0KHIsITEpfSkpLG4uby5jbGVhcigpKX0sby5mb3JFYWNoPWZ1bmN0aW9uKG4scil7dmFyIHQ9dGhpcztwKHRoaXNbUV0pLmZvckVhY2goKGZ1bmN0aW9uKGUsaSl7bi5jYWxsKHIsdC5nZXQoaSksaSx0KX0pKX0sby5nZXQ9ZnVuY3Rpb24obil7dmFyIHI9dGhpc1tRXTt1KHIpO3ZhciBpPXAocikuZ2V0KG4pO2lmKHIuSXx8IXQoaSkpcmV0dXJuIGk7aWYoaSE9PXIudC5nZXQobikpcmV0dXJuIGk7dmFyIG89UihyLkEuaCxpLHIpO3JldHVybiBlKHIpLHIuby5zZXQobixvKSxvfSxvLmtleXM9ZnVuY3Rpb24oKXtyZXR1cm4gcCh0aGlzW1FdKS5rZXlzKCl9LG8udmFsdWVzPWZ1bmN0aW9uKCl7dmFyIG4scj10aGlzLHQ9dGhpcy5rZXlzKCk7cmV0dXJuKG49e30pW1ZdPWZ1bmN0aW9uKCl7cmV0dXJuIHIudmFsdWVzKCl9LG4ubmV4dD1mdW5jdGlvbigpe3ZhciBuPXQubmV4dCgpO3JldHVybiBuLmRvbmU/bjp7ZG9uZTohMSx2YWx1ZTpyLmdldChuLnZhbHVlKX19LG59LG8uZW50cmllcz1mdW5jdGlvbigpe3ZhciBuLHI9dGhpcyx0PXRoaXMua2V5cygpO3JldHVybihuPXt9KVtWXT1mdW5jdGlvbigpe3JldHVybiByLmVudHJpZXMoKX0sbi5uZXh0PWZ1bmN0aW9uKCl7dmFyIG49dC5uZXh0KCk7aWYobi5kb25lKXJldHVybiBuO3ZhciBlPXIuZ2V0KG4udmFsdWUpO3JldHVybntkb25lOiExLHZhbHVlOltuLnZhbHVlLGVdfX0sbn0sb1tWXT1mdW5jdGlvbigpe3JldHVybiB0aGlzLmVudHJpZXMoKX0sbn0oKSxjPWZ1bmN0aW9uKCl7ZnVuY3Rpb24gbihuLHIpe3JldHVybiB0aGlzW1FdPXtpOjMsbDpyLEE6cj9yLkE6XygpLFA6ITEsSTohMSxvOnZvaWQgMCx0Om4sazp0aGlzLHA6bmV3IE1hcCxPOiExLEM6ITF9LHRoaXN9cihuLFNldCk7dmFyIHQ9bi5wcm90b3R5cGU7cmV0dXJuIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFwic2l6ZVwiLHtnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gcCh0aGlzW1FdKS5zaXplfX0pLHQuaGFzPWZ1bmN0aW9uKG4pe3ZhciByPXRoaXNbUV07cmV0dXJuIHUociksci5vPyEhci5vLmhhcyhuKXx8ISghci5wLmhhcyhuKXx8IXIuby5oYXMoci5wLmdldChuKSkpOnIudC5oYXMobil9LHQuYWRkPWZ1bmN0aW9uKG4pe3ZhciByPXRoaXNbUV07cmV0dXJuIHUociksdGhpcy5oYXMobil8fChvKHIpLGsociksci5vLmFkZChuKSksdGhpc30sdC5kZWxldGU9ZnVuY3Rpb24obil7aWYoIXRoaXMuaGFzKG4pKXJldHVybiExO3ZhciByPXRoaXNbUV07cmV0dXJuIHUociksbyhyKSxrKHIpLHIuby5kZWxldGUobil8fCEhci5wLmhhcyhuKSYmci5vLmRlbGV0ZShyLnAuZ2V0KG4pKX0sdC5jbGVhcj1mdW5jdGlvbigpe3ZhciBuPXRoaXNbUV07dShuKSxwKG4pLnNpemUmJihvKG4pLGsobiksbi5vLmNsZWFyKCkpfSx0LnZhbHVlcz1mdW5jdGlvbigpe3ZhciBuPXRoaXNbUV07cmV0dXJuIHUobiksbyhuKSxuLm8udmFsdWVzKCl9LHQuZW50cmllcz1mdW5jdGlvbigpe3ZhciBuPXRoaXNbUV07cmV0dXJuIHUobiksbyhuKSxuLm8uZW50cmllcygpfSx0LmtleXM9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy52YWx1ZXMoKX0sdFtWXT1mdW5jdGlvbigpe3JldHVybiB0aGlzLnZhbHVlcygpfSx0LmZvckVhY2g9ZnVuY3Rpb24obixyKXtmb3IodmFyIHQ9dGhpcy52YWx1ZXMoKSxlPXQubmV4dCgpOyFlLmRvbmU7KW4uY2FsbChyLGUudmFsdWUsZS52YWx1ZSx0aGlzKSxlPXQubmV4dCgpfSxufSgpO20oXCJNYXBTZXRcIix7TjpmdW5jdGlvbihuLHIpe3JldHVybiBuZXcgZihuLHIpfSxUOmZ1bmN0aW9uKG4scil7cmV0dXJuIG5ldyBjKG4scil9fSl9ZnVuY3Rpb24gSigpe04oKSxDKCksVCgpfWZ1bmN0aW9uIEsobil7cmV0dXJuIG59ZnVuY3Rpb24gJChuKXtyZXR1cm4gbn12YXIgRyxVLFc9XCJ1bmRlZmluZWRcIiE9dHlwZW9mIFN5bWJvbCYmXCJzeW1ib2xcIj09dHlwZW9mIFN5bWJvbChcInhcIiksWD1cInVuZGVmaW5lZFwiIT10eXBlb2YgTWFwLHE9XCJ1bmRlZmluZWRcIiE9dHlwZW9mIFNldCxCPVwidW5kZWZpbmVkXCIhPXR5cGVvZiBQcm94eSYmdm9pZCAwIT09UHJveHkucmV2b2NhYmxlJiZcInVuZGVmaW5lZFwiIT10eXBlb2YgUmVmbGVjdCxIPVc/U3ltYm9sLmZvcihcImltbWVyLW5vdGhpbmdcIik6KChHPXt9KVtcImltbWVyLW5vdGhpbmdcIl09ITAsRyksTD1XP1N5bWJvbC5mb3IoXCJpbW1lci1kcmFmdGFibGVcIik6XCJfXyRpbW1lcl9kcmFmdGFibGVcIixRPVc/U3ltYm9sLmZvcihcImltbWVyLXN0YXRlXCIpOlwiX18kaW1tZXJfc3RhdGVcIixWPVwidW5kZWZpbmVkXCIhPXR5cGVvZiBTeW1ib2wmJlN5bWJvbC5pdGVyYXRvcnx8XCJAQGl0ZXJhdG9yXCIsWT17MDpcIklsbGVnYWwgc3RhdGVcIiwxOlwiSW1tZXIgZHJhZnRzIGNhbm5vdCBoYXZlIGNvbXB1dGVkIHByb3BlcnRpZXNcIiwyOlwiVGhpcyBvYmplY3QgaGFzIGJlZW4gZnJvemVuIGFuZCBzaG91bGQgbm90IGJlIG11dGF0ZWRcIiwzOmZ1bmN0aW9uKG4pe3JldHVyblwiQ2Fubm90IHVzZSBhIHByb3h5IHRoYXQgaGFzIGJlZW4gcmV2b2tlZC4gRGlkIHlvdSBwYXNzIGFuIG9iamVjdCBmcm9tIGluc2lkZSBhbiBpbW1lciBmdW5jdGlvbiB0byBhbiBhc3luYyBwcm9jZXNzPyBcIitufSw0OlwiQW4gaW1tZXIgcHJvZHVjZXIgcmV0dXJuZWQgYSBuZXcgdmFsdWUgKmFuZCogbW9kaWZpZWQgaXRzIGRyYWZ0LiBFaXRoZXIgcmV0dXJuIGEgbmV3IHZhbHVlICpvciogbW9kaWZ5IHRoZSBkcmFmdC5cIiw1OlwiSW1tZXIgZm9yYmlkcyBjaXJjdWxhciByZWZlcmVuY2VzXCIsNjpcIlRoZSBmaXJzdCBvciBzZWNvbmQgYXJndW1lbnQgdG8gYHByb2R1Y2VgIG11c3QgYmUgYSBmdW5jdGlvblwiLDc6XCJUaGUgdGhpcmQgYXJndW1lbnQgdG8gYHByb2R1Y2VgIG11c3QgYmUgYSBmdW5jdGlvbiBvciB1bmRlZmluZWRcIiw4OlwiRmlyc3QgYXJndW1lbnQgdG8gYGNyZWF0ZURyYWZ0YCBtdXN0IGJlIGEgcGxhaW4gb2JqZWN0LCBhbiBhcnJheSwgb3IgYW4gaW1tZXJhYmxlIG9iamVjdFwiLDk6XCJGaXJzdCBhcmd1bWVudCB0byBgZmluaXNoRHJhZnRgIG11c3QgYmUgYSBkcmFmdCByZXR1cm5lZCBieSBgY3JlYXRlRHJhZnRgXCIsMTA6XCJUaGUgZ2l2ZW4gZHJhZnQgaXMgYWxyZWFkeSBmaW5hbGl6ZWRcIiwxMTpcIk9iamVjdC5kZWZpbmVQcm9wZXJ0eSgpIGNhbm5vdCBiZSB1c2VkIG9uIGFuIEltbWVyIGRyYWZ0XCIsMTI6XCJPYmplY3Quc2V0UHJvdG90eXBlT2YoKSBjYW5ub3QgYmUgdXNlZCBvbiBhbiBJbW1lciBkcmFmdFwiLDEzOlwiSW1tZXIgb25seSBzdXBwb3J0cyBkZWxldGluZyBhcnJheSBpbmRpY2VzXCIsMTQ6XCJJbW1lciBvbmx5IHN1cHBvcnRzIHNldHRpbmcgYXJyYXkgaW5kaWNlcyBhbmQgdGhlICdsZW5ndGgnIHByb3BlcnR5XCIsMTU6ZnVuY3Rpb24obil7cmV0dXJuXCJDYW5ub3QgYXBwbHkgcGF0Y2gsIHBhdGggZG9lc24ndCByZXNvbHZlOiBcIitufSwxNjonU2V0cyBjYW5ub3QgaGF2ZSBcInJlcGxhY2VcIiBwYXRjaGVzLicsMTc6ZnVuY3Rpb24obil7cmV0dXJuXCJVbnN1cHBvcnRlZCBwYXRjaCBvcGVyYXRpb246IFwiK259LDE4OmZ1bmN0aW9uKG4pe3JldHVyblwiVGhlIHBsdWdpbiBmb3IgJ1wiK24rXCInIGhhcyBub3QgYmVlbiBsb2FkZWQgaW50byBJbW1lci4gVG8gZW5hYmxlIHRoZSBwbHVnaW4sIGltcG9ydCBhbmQgY2FsbCBgZW5hYmxlXCIrbitcIigpYCB3aGVuIGluaXRpYWxpemluZyB5b3VyIGFwcGxpY2F0aW9uLlwifSwyMDpcIkNhbm5vdCB1c2UgcHJveGllcyBpZiBQcm94eSwgUHJveHkucmV2b2NhYmxlIG9yIFJlZmxlY3QgYXJlIG5vdCBhdmFpbGFibGVcIiwyMTpmdW5jdGlvbihuKXtyZXR1cm5cInByb2R1Y2UgY2FuIG9ubHkgYmUgY2FsbGVkIG9uIHRoaW5ncyB0aGF0IGFyZSBkcmFmdGFibGU6IHBsYWluIG9iamVjdHMsIGFycmF5cywgTWFwLCBTZXQgb3IgY2xhc3NlcyB0aGF0IGFyZSBtYXJrZWQgd2l0aCAnW2ltbWVyYWJsZV06IHRydWUnLiBHb3QgJ1wiK24rXCInXCJ9LDIyOmZ1bmN0aW9uKG4pe3JldHVyblwiJ2N1cnJlbnQnIGV4cGVjdHMgYSBkcmFmdCwgZ290OiBcIitufSwyMzpmdW5jdGlvbihuKXtyZXR1cm5cIidvcmlnaW5hbCcgZXhwZWN0cyBhIGRyYWZ0LCBnb3Q6IFwiK259LDI0OlwiUGF0Y2hpbmcgcmVzZXJ2ZWQgYXR0cmlidXRlcyBsaWtlIF9fcHJvdG9fXywgcHJvdG90eXBlIGFuZCBjb25zdHJ1Y3RvciBpcyBub3QgYWxsb3dlZFwifSxaPVwiXCIrT2JqZWN0LnByb3RvdHlwZS5jb25zdHJ1Y3Rvcixubj1cInVuZGVmaW5lZFwiIT10eXBlb2YgUmVmbGVjdCYmUmVmbGVjdC5vd25LZXlzP1JlZmxlY3Qub3duS2V5czp2b2lkIDAhPT1PYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzP2Z1bmN0aW9uKG4pe3JldHVybiBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyhuKS5jb25jYXQoT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhuKSl9Ok9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzLHJuPU9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzfHxmdW5jdGlvbihuKXt2YXIgcj17fTtyZXR1cm4gbm4obikuZm9yRWFjaCgoZnVuY3Rpb24odCl7clt0XT1PYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG4sdCl9KSkscn0sdG49e30sZW49e2dldDpmdW5jdGlvbihuLHIpe2lmKHI9PT1RKXJldHVybiBuO3ZhciBlPXAobik7aWYoIXUoZSxyKSlyZXR1cm4gZnVuY3Rpb24obixyLHQpe3ZhciBlLGk9SShyLHQpO3JldHVybiBpP1widmFsdWVcImluIGk/aS52YWx1ZTpudWxsPT09KGU9aS5nZXQpfHx2b2lkIDA9PT1lP3ZvaWQgMDplLmNhbGwobi5rKTp2b2lkIDB9KG4sZSxyKTt2YXIgaT1lW3JdO3JldHVybiBuLkl8fCF0KGkpP2k6aT09PXoobi50LHIpPyhFKG4pLG4ub1tyXT1SKG4uQS5oLGksbikpOml9LGhhczpmdW5jdGlvbihuLHIpe3JldHVybiByIGluIHAobil9LG93bktleXM6ZnVuY3Rpb24obil7cmV0dXJuIFJlZmxlY3Qub3duS2V5cyhwKG4pKX0sc2V0OmZ1bmN0aW9uKG4scix0KXt2YXIgZT1JKHAobikscik7aWYobnVsbD09ZT92b2lkIDA6ZS5zZXQpcmV0dXJuIGUuc2V0LmNhbGwobi5rLHQpLCEwO2lmKCFuLlApe3ZhciBpPXoocChuKSxyKSxvPW51bGw9PWk/dm9pZCAwOmlbUV07aWYobyYmby50PT09dClyZXR1cm4gbi5vW3JdPXQsbi5EW3JdPSExLCEwO2lmKGModCxpKSYmKHZvaWQgMCE9PXR8fHUobi50LHIpKSlyZXR1cm4hMDtFKG4pLGsobil9cmV0dXJuIG4ub1tyXT09PXQmJlwibnVtYmVyXCIhPXR5cGVvZiB0JiYodm9pZCAwIT09dHx8ciBpbiBuLm8pfHwobi5vW3JdPXQsbi5EW3JdPSEwLCEwKX0sZGVsZXRlUHJvcGVydHk6ZnVuY3Rpb24obixyKXtyZXR1cm4gdm9pZCAwIT09eihuLnQscil8fHIgaW4gbi50PyhuLkRbcl09ITEsRShuKSxrKG4pKTpkZWxldGUgbi5EW3JdLG4ubyYmZGVsZXRlIG4ub1tyXSwhMH0sZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yOmZ1bmN0aW9uKG4scil7dmFyIHQ9cChuKSxlPVJlZmxlY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHQscik7cmV0dXJuIGU/e3dyaXRhYmxlOiEwLGNvbmZpZ3VyYWJsZToxIT09bi5pfHxcImxlbmd0aFwiIT09cixlbnVtZXJhYmxlOmUuZW51bWVyYWJsZSx2YWx1ZTp0W3JdfTplfSxkZWZpbmVQcm9wZXJ0eTpmdW5jdGlvbigpe24oMTEpfSxnZXRQcm90b3R5cGVPZjpmdW5jdGlvbihuKXtyZXR1cm4gT2JqZWN0LmdldFByb3RvdHlwZU9mKG4udCl9LHNldFByb3RvdHlwZU9mOmZ1bmN0aW9uKCl7bigxMil9fSxvbj17fTtpKGVuLChmdW5jdGlvbihuLHIpe29uW25dPWZ1bmN0aW9uKCl7cmV0dXJuIGFyZ3VtZW50c1swXT1hcmd1bWVudHNbMF1bMF0sci5hcHBseSh0aGlzLGFyZ3VtZW50cyl9fSkpLG9uLmRlbGV0ZVByb3BlcnR5PWZ1bmN0aW9uKHIsdCl7cmV0dXJuXCJwcm9kdWN0aW9uXCIhPT1wcm9jZXNzLmVudi5OT0RFX0VOViYmaXNOYU4ocGFyc2VJbnQodCkpJiZuKDEzKSxvbi5zZXQuY2FsbCh0aGlzLHIsdCx2b2lkIDApfSxvbi5zZXQ9ZnVuY3Rpb24ocix0LGUpe3JldHVyblwicHJvZHVjdGlvblwiIT09cHJvY2Vzcy5lbnYuTk9ERV9FTlYmJlwibGVuZ3RoXCIhPT10JiZpc05hTihwYXJzZUludCh0KSkmJm4oMTQpLGVuLnNldC5jYWxsKHRoaXMsclswXSx0LGUsclswXSl9O3ZhciB1bj1mdW5jdGlvbigpe2Z1bmN0aW9uIGUocil7dmFyIGU9dGhpczt0aGlzLmc9Qix0aGlzLkY9ITAsdGhpcy5wcm9kdWNlPWZ1bmN0aW9uKHIsaSxvKXtpZihcImZ1bmN0aW9uXCI9PXR5cGVvZiByJiZcImZ1bmN0aW9uXCIhPXR5cGVvZiBpKXt2YXIgdT1pO2k9cjt2YXIgYT1lO3JldHVybiBmdW5jdGlvbihuKXt2YXIgcj10aGlzO3ZvaWQgMD09PW4mJihuPXUpO2Zvcih2YXIgdD1hcmd1bWVudHMubGVuZ3RoLGU9QXJyYXkodD4xP3QtMTowKSxvPTE7bzx0O28rKyllW28tMV09YXJndW1lbnRzW29dO3JldHVybiBhLnByb2R1Y2UobiwoZnVuY3Rpb24obil7dmFyIHQ7cmV0dXJuKHQ9aSkuY2FsbC5hcHBseSh0LFtyLG5dLmNvbmNhdChlKSl9KSl9fXZhciBmO2lmKFwiZnVuY3Rpb25cIiE9dHlwZW9mIGkmJm4oNiksdm9pZCAwIT09byYmXCJmdW5jdGlvblwiIT10eXBlb2YgbyYmbig3KSx0KHIpKXt2YXIgYz13KGUpLHM9UihlLHIsdm9pZCAwKSx2PSEwO3RyeXtmPWkocyksdj0hMX1maW5hbGx5e3Y/TyhjKTpnKGMpfXJldHVyblwidW5kZWZpbmVkXCIhPXR5cGVvZiBQcm9taXNlJiZmIGluc3RhbmNlb2YgUHJvbWlzZT9mLnRoZW4oKGZ1bmN0aW9uKG4pe3JldHVybiBqKGMsbyksUChuLGMpfSksKGZ1bmN0aW9uKG4pe3Rocm93IE8oYyksbn0pKTooaihjLG8pLFAoZixjKSl9aWYoIXJ8fFwib2JqZWN0XCIhPXR5cGVvZiByKXtpZih2b2lkIDA9PT0oZj1pKHIpKSYmKGY9ciksZj09PUgmJihmPXZvaWQgMCksZS5GJiZkKGYsITApLG8pe3ZhciBwPVtdLGw9W107YihcIlBhdGNoZXNcIikuTShyLGYscCxsKSxvKHAsbCl9cmV0dXJuIGZ9bigyMSxyKX0sdGhpcy5wcm9kdWNlV2l0aFBhdGNoZXM9ZnVuY3Rpb24obixyKXtpZihcImZ1bmN0aW9uXCI9PXR5cGVvZiBuKXJldHVybiBmdW5jdGlvbihyKXtmb3IodmFyIHQ9YXJndW1lbnRzLmxlbmd0aCxpPUFycmF5KHQ+MT90LTE6MCksbz0xO288dDtvKyspaVtvLTFdPWFyZ3VtZW50c1tvXTtyZXR1cm4gZS5wcm9kdWNlV2l0aFBhdGNoZXMociwoZnVuY3Rpb24ocil7cmV0dXJuIG4uYXBwbHkodm9pZCAwLFtyXS5jb25jYXQoaSkpfSkpfTt2YXIgdCxpLG89ZS5wcm9kdWNlKG4sciwoZnVuY3Rpb24obixyKXt0PW4saT1yfSkpO3JldHVyblwidW5kZWZpbmVkXCIhPXR5cGVvZiBQcm9taXNlJiZvIGluc3RhbmNlb2YgUHJvbWlzZT9vLnRoZW4oKGZ1bmN0aW9uKG4pe3JldHVybltuLHQsaV19KSk6W28sdCxpXX0sXCJib29sZWFuXCI9PXR5cGVvZihudWxsPT1yP3ZvaWQgMDpyLnVzZVByb3hpZXMpJiZ0aGlzLnNldFVzZVByb3hpZXMoci51c2VQcm94aWVzKSxcImJvb2xlYW5cIj09dHlwZW9mKG51bGw9PXI/dm9pZCAwOnIuYXV0b0ZyZWV6ZSkmJnRoaXMuc2V0QXV0b0ZyZWV6ZShyLmF1dG9GcmVlemUpfXZhciBpPWUucHJvdG90eXBlO3JldHVybiBpLmNyZWF0ZURyYWZ0PWZ1bmN0aW9uKGUpe3QoZSl8fG4oOCkscihlKSYmKGU9RChlKSk7dmFyIGk9dyh0aGlzKSxvPVIodGhpcyxlLHZvaWQgMCk7cmV0dXJuIG9bUV0uQz0hMCxnKGkpLG99LGkuZmluaXNoRHJhZnQ9ZnVuY3Rpb24ocix0KXt2YXIgZT1yJiZyW1FdO1wicHJvZHVjdGlvblwiIT09cHJvY2Vzcy5lbnYuTk9ERV9FTlYmJihlJiZlLkN8fG4oOSksZS5JJiZuKDEwKSk7dmFyIGk9ZS5BO3JldHVybiBqKGksdCksUCh2b2lkIDAsaSl9LGkuc2V0QXV0b0ZyZWV6ZT1mdW5jdGlvbihuKXt0aGlzLkY9bn0saS5zZXRVc2VQcm94aWVzPWZ1bmN0aW9uKHIpe3ImJiFCJiZuKDIwKSx0aGlzLmc9cn0saS5hcHBseVBhdGNoZXM9ZnVuY3Rpb24obix0KXt2YXIgZTtmb3IoZT10Lmxlbmd0aC0xO2U+PTA7ZS0tKXt2YXIgaT10W2VdO2lmKDA9PT1pLnBhdGgubGVuZ3RoJiZcInJlcGxhY2VcIj09PWkub3Ape249aS52YWx1ZTticmVha319ZT4tMSYmKHQ9dC5zbGljZShlKzEpKTt2YXIgbz1iKFwiUGF0Y2hlc1wiKS4kO3JldHVybiByKG4pP28obix0KTp0aGlzLnByb2R1Y2UobiwoZnVuY3Rpb24obil7cmV0dXJuIG8obix0KX0pKX0sZX0oKSxhbj1uZXcgdW4sZm49YW4ucHJvZHVjZSxjbj1hbi5wcm9kdWNlV2l0aFBhdGNoZXMuYmluZChhbiksc249YW4uc2V0QXV0b0ZyZWV6ZS5iaW5kKGFuKSx2bj1hbi5zZXRVc2VQcm94aWVzLmJpbmQoYW4pLHBuPWFuLmFwcGx5UGF0Y2hlcy5iaW5kKGFuKSxsbj1hbi5jcmVhdGVEcmFmdC5iaW5kKGFuKSxkbj1hbi5maW5pc2hEcmFmdC5iaW5kKGFuKTtleHBvcnQgZGVmYXVsdCBmbjtleHBvcnR7dW4gYXMgSW1tZXIscG4gYXMgYXBwbHlQYXRjaGVzLEsgYXMgY2FzdERyYWZ0LCQgYXMgY2FzdEltbXV0YWJsZSxsbiBhcyBjcmVhdGVEcmFmdCxEIGFzIGN1cnJlbnQsSiBhcyBlbmFibGVBbGxQbHVnaW5zLE4gYXMgZW5hYmxlRVM1LEMgYXMgZW5hYmxlTWFwU2V0LFQgYXMgZW5hYmxlUGF0Y2hlcyxkbiBhcyBmaW5pc2hEcmFmdCxkIGFzIGZyZWV6ZSxMIGFzIGltbWVyYWJsZSxyIGFzIGlzRHJhZnQsdCBhcyBpc0RyYWZ0YWJsZSxIIGFzIG5vdGhpbmcsZSBhcyBvcmlnaW5hbCxmbiBhcyBwcm9kdWNlLGNuIGFzIHByb2R1Y2VXaXRoUGF0Y2hlcyxzbiBhcyBzZXRBdXRvRnJlZXplLHZuIGFzIHNldFVzZVByb3hpZXN9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW1tZXIuZXNtLmpzLm1hcFxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gX2RlZmluZVByb3BlcnR5KG9iaiwga2V5LCB2YWx1ZSkge1xuICBpZiAoa2V5IGluIG9iaikge1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwge1xuICAgICAgdmFsdWU6IHZhbHVlLFxuICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgIHdyaXRhYmxlOiB0cnVlXG4gICAgfSk7XG4gIH0gZWxzZSB7XG4gICAgb2JqW2tleV0gPSB2YWx1ZTtcbiAgfVxuXG4gIHJldHVybiBvYmo7XG59IiwiaW1wb3J0IGRlZmluZVByb3BlcnR5IGZyb20gXCIuL2RlZmluZVByb3BlcnR5LmpzXCI7XG5cbmZ1bmN0aW9uIG93bktleXMob2JqZWN0LCBlbnVtZXJhYmxlT25seSkge1xuICB2YXIga2V5cyA9IE9iamVjdC5rZXlzKG9iamVjdCk7XG5cbiAgaWYgKE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMpIHtcbiAgICB2YXIgc3ltYm9scyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMob2JqZWN0KTtcbiAgICBlbnVtZXJhYmxlT25seSAmJiAoc3ltYm9scyA9IHN5bWJvbHMuZmlsdGVyKGZ1bmN0aW9uIChzeW0pIHtcbiAgICAgIHJldHVybiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG9iamVjdCwgc3ltKS5lbnVtZXJhYmxlO1xuICAgIH0pKSwga2V5cy5wdXNoLmFwcGx5KGtleXMsIHN5bWJvbHMpO1xuICB9XG5cbiAgcmV0dXJuIGtleXM7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIF9vYmplY3RTcHJlYWQyKHRhcmdldCkge1xuICBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykge1xuICAgIHZhciBzb3VyY2UgPSBudWxsICE9IGFyZ3VtZW50c1tpXSA/IGFyZ3VtZW50c1tpXSA6IHt9O1xuICAgIGkgJSAyID8gb3duS2V5cyhPYmplY3Qoc291cmNlKSwgITApLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgICAgZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIHNvdXJjZVtrZXldKTtcbiAgICB9KSA6IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzID8gT2JqZWN0LmRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyhzb3VyY2UpKSA6IG93bktleXMoT2JqZWN0KHNvdXJjZSkpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHNvdXJjZSwga2V5KSk7XG4gICAgfSk7XG4gIH1cblxuICByZXR1cm4gdGFyZ2V0O1xufSIsImltcG9ydCBfb2JqZWN0U3ByZWFkIGZyb20gJ0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFNwcmVhZDInO1xuXG4vKipcbiAqIEFkYXB0ZWQgZnJvbSBSZWFjdDogaHR0cHM6Ly9naXRodWIuY29tL2ZhY2Vib29rL3JlYWN0L2Jsb2IvbWFzdGVyL3BhY2thZ2VzL3NoYXJlZC9mb3JtYXRQcm9kRXJyb3JNZXNzYWdlLmpzXG4gKlxuICogRG8gbm90IHJlcXVpcmUgdGhpcyBtb2R1bGUgZGlyZWN0bHkhIFVzZSBub3JtYWwgdGhyb3cgZXJyb3IgY2FsbHMuIFRoZXNlIG1lc3NhZ2VzIHdpbGwgYmUgcmVwbGFjZWQgd2l0aCBlcnJvciBjb2Rlc1xuICogZHVyaW5nIGJ1aWxkLlxuICogQHBhcmFtIHtudW1iZXJ9IGNvZGVcbiAqL1xuZnVuY3Rpb24gZm9ybWF0UHJvZEVycm9yTWVzc2FnZShjb2RlKSB7XG4gIHJldHVybiBcIk1pbmlmaWVkIFJlZHV4IGVycm9yICNcIiArIGNvZGUgKyBcIjsgdmlzaXQgaHR0cHM6Ly9yZWR1eC5qcy5vcmcvRXJyb3JzP2NvZGU9XCIgKyBjb2RlICsgXCIgZm9yIHRoZSBmdWxsIG1lc3NhZ2Ugb3IgXCIgKyAndXNlIHRoZSBub24tbWluaWZpZWQgZGV2IGVudmlyb25tZW50IGZvciBmdWxsIGVycm9ycy4gJztcbn1cblxuLy8gSW5saW5lZCB2ZXJzaW9uIG9mIHRoZSBgc3ltYm9sLW9ic2VydmFibGVgIHBvbHlmaWxsXG52YXIgJCRvYnNlcnZhYmxlID0gKGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIHR5cGVvZiBTeW1ib2wgPT09ICdmdW5jdGlvbicgJiYgU3ltYm9sLm9ic2VydmFibGUgfHwgJ0BAb2JzZXJ2YWJsZSc7XG59KSgpO1xuXG4vKipcbiAqIFRoZXNlIGFyZSBwcml2YXRlIGFjdGlvbiB0eXBlcyByZXNlcnZlZCBieSBSZWR1eC5cbiAqIEZvciBhbnkgdW5rbm93biBhY3Rpb25zLCB5b3UgbXVzdCByZXR1cm4gdGhlIGN1cnJlbnQgc3RhdGUuXG4gKiBJZiB0aGUgY3VycmVudCBzdGF0ZSBpcyB1bmRlZmluZWQsIHlvdSBtdXN0IHJldHVybiB0aGUgaW5pdGlhbCBzdGF0ZS5cbiAqIERvIG5vdCByZWZlcmVuY2UgdGhlc2UgYWN0aW9uIHR5cGVzIGRpcmVjdGx5IGluIHlvdXIgY29kZS5cbiAqL1xudmFyIHJhbmRvbVN0cmluZyA9IGZ1bmN0aW9uIHJhbmRvbVN0cmluZygpIHtcbiAgcmV0dXJuIE1hdGgucmFuZG9tKCkudG9TdHJpbmcoMzYpLnN1YnN0cmluZyg3KS5zcGxpdCgnJykuam9pbignLicpO1xufTtcblxudmFyIEFjdGlvblR5cGVzID0ge1xuICBJTklUOiBcIkBAcmVkdXgvSU5JVFwiICsgcmFuZG9tU3RyaW5nKCksXG4gIFJFUExBQ0U6IFwiQEByZWR1eC9SRVBMQUNFXCIgKyByYW5kb21TdHJpbmcoKSxcbiAgUFJPQkVfVU5LTk9XTl9BQ1RJT046IGZ1bmN0aW9uIFBST0JFX1VOS05PV05fQUNUSU9OKCkge1xuICAgIHJldHVybiBcIkBAcmVkdXgvUFJPQkVfVU5LTk9XTl9BQ1RJT05cIiArIHJhbmRvbVN0cmluZygpO1xuICB9XG59O1xuXG4vKipcbiAqIEBwYXJhbSB7YW55fSBvYmogVGhlIG9iamVjdCB0byBpbnNwZWN0LlxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdGhlIGFyZ3VtZW50IGFwcGVhcnMgdG8gYmUgYSBwbGFpbiBvYmplY3QuXG4gKi9cbmZ1bmN0aW9uIGlzUGxhaW5PYmplY3Qob2JqKSB7XG4gIGlmICh0eXBlb2Ygb2JqICE9PSAnb2JqZWN0JyB8fCBvYmogPT09IG51bGwpIHJldHVybiBmYWxzZTtcbiAgdmFyIHByb3RvID0gb2JqO1xuXG4gIHdoaWxlIChPYmplY3QuZ2V0UHJvdG90eXBlT2YocHJvdG8pICE9PSBudWxsKSB7XG4gICAgcHJvdG8gPSBPYmplY3QuZ2V0UHJvdG90eXBlT2YocHJvdG8pO1xuICB9XG5cbiAgcmV0dXJuIE9iamVjdC5nZXRQcm90b3R5cGVPZihvYmopID09PSBwcm90bztcbn1cblxuLy8gSW5saW5lZCAvIHNob3J0ZW5lZCB2ZXJzaW9uIG9mIGBraW5kT2ZgIGZyb20gaHR0cHM6Ly9naXRodWIuY29tL2pvbnNjaGxpbmtlcnQva2luZC1vZlxuZnVuY3Rpb24gbWluaUtpbmRPZih2YWwpIHtcbiAgaWYgKHZhbCA9PT0gdm9pZCAwKSByZXR1cm4gJ3VuZGVmaW5lZCc7XG4gIGlmICh2YWwgPT09IG51bGwpIHJldHVybiAnbnVsbCc7XG4gIHZhciB0eXBlID0gdHlwZW9mIHZhbDtcblxuICBzd2l0Y2ggKHR5cGUpIHtcbiAgICBjYXNlICdib29sZWFuJzpcbiAgICBjYXNlICdzdHJpbmcnOlxuICAgIGNhc2UgJ251bWJlcic6XG4gICAgY2FzZSAnc3ltYm9sJzpcbiAgICBjYXNlICdmdW5jdGlvbic6XG4gICAgICB7XG4gICAgICAgIHJldHVybiB0eXBlO1xuICAgICAgfVxuICB9XG5cbiAgaWYgKEFycmF5LmlzQXJyYXkodmFsKSkgcmV0dXJuICdhcnJheSc7XG4gIGlmIChpc0RhdGUodmFsKSkgcmV0dXJuICdkYXRlJztcbiAgaWYgKGlzRXJyb3IodmFsKSkgcmV0dXJuICdlcnJvcic7XG4gIHZhciBjb25zdHJ1Y3Rvck5hbWUgPSBjdG9yTmFtZSh2YWwpO1xuXG4gIHN3aXRjaCAoY29uc3RydWN0b3JOYW1lKSB7XG4gICAgY2FzZSAnU3ltYm9sJzpcbiAgICBjYXNlICdQcm9taXNlJzpcbiAgICBjYXNlICdXZWFrTWFwJzpcbiAgICBjYXNlICdXZWFrU2V0JzpcbiAgICBjYXNlICdNYXAnOlxuICAgIGNhc2UgJ1NldCc6XG4gICAgICByZXR1cm4gY29uc3RydWN0b3JOYW1lO1xuICB9IC8vIG90aGVyXG5cblxuICByZXR1cm4gdHlwZS5zbGljZSg4LCAtMSkudG9Mb3dlckNhc2UoKS5yZXBsYWNlKC9cXHMvZywgJycpO1xufVxuXG5mdW5jdGlvbiBjdG9yTmFtZSh2YWwpIHtcbiAgcmV0dXJuIHR5cGVvZiB2YWwuY29uc3RydWN0b3IgPT09ICdmdW5jdGlvbicgPyB2YWwuY29uc3RydWN0b3IubmFtZSA6IG51bGw7XG59XG5cbmZ1bmN0aW9uIGlzRXJyb3IodmFsKSB7XG4gIHJldHVybiB2YWwgaW5zdGFuY2VvZiBFcnJvciB8fCB0eXBlb2YgdmFsLm1lc3NhZ2UgPT09ICdzdHJpbmcnICYmIHZhbC5jb25zdHJ1Y3RvciAmJiB0eXBlb2YgdmFsLmNvbnN0cnVjdG9yLnN0YWNrVHJhY2VMaW1pdCA9PT0gJ251bWJlcic7XG59XG5cbmZ1bmN0aW9uIGlzRGF0ZSh2YWwpIHtcbiAgaWYgKHZhbCBpbnN0YW5jZW9mIERhdGUpIHJldHVybiB0cnVlO1xuICByZXR1cm4gdHlwZW9mIHZhbC50b0RhdGVTdHJpbmcgPT09ICdmdW5jdGlvbicgJiYgdHlwZW9mIHZhbC5nZXREYXRlID09PSAnZnVuY3Rpb24nICYmIHR5cGVvZiB2YWwuc2V0RGF0ZSA9PT0gJ2Z1bmN0aW9uJztcbn1cblxuZnVuY3Rpb24ga2luZE9mKHZhbCkge1xuICB2YXIgdHlwZU9mVmFsID0gdHlwZW9mIHZhbDtcblxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIHR5cGVPZlZhbCA9IG1pbmlLaW5kT2YodmFsKTtcbiAgfVxuXG4gIHJldHVybiB0eXBlT2ZWYWw7XG59XG5cbi8qKlxuICogQ3JlYXRlcyBhIFJlZHV4IHN0b3JlIHRoYXQgaG9sZHMgdGhlIHN0YXRlIHRyZWUuXG4gKiBUaGUgb25seSB3YXkgdG8gY2hhbmdlIHRoZSBkYXRhIGluIHRoZSBzdG9yZSBpcyB0byBjYWxsIGBkaXNwYXRjaCgpYCBvbiBpdC5cbiAqXG4gKiBUaGVyZSBzaG91bGQgb25seSBiZSBhIHNpbmdsZSBzdG9yZSBpbiB5b3VyIGFwcC4gVG8gc3BlY2lmeSBob3cgZGlmZmVyZW50XG4gKiBwYXJ0cyBvZiB0aGUgc3RhdGUgdHJlZSByZXNwb25kIHRvIGFjdGlvbnMsIHlvdSBtYXkgY29tYmluZSBzZXZlcmFsIHJlZHVjZXJzXG4gKiBpbnRvIGEgc2luZ2xlIHJlZHVjZXIgZnVuY3Rpb24gYnkgdXNpbmcgYGNvbWJpbmVSZWR1Y2Vyc2AuXG4gKlxuICogQHBhcmFtIHtGdW5jdGlvbn0gcmVkdWNlciBBIGZ1bmN0aW9uIHRoYXQgcmV0dXJucyB0aGUgbmV4dCBzdGF0ZSB0cmVlLCBnaXZlblxuICogdGhlIGN1cnJlbnQgc3RhdGUgdHJlZSBhbmQgdGhlIGFjdGlvbiB0byBoYW5kbGUuXG4gKlxuICogQHBhcmFtIHthbnl9IFtwcmVsb2FkZWRTdGF0ZV0gVGhlIGluaXRpYWwgc3RhdGUuIFlvdSBtYXkgb3B0aW9uYWxseSBzcGVjaWZ5IGl0XG4gKiB0byBoeWRyYXRlIHRoZSBzdGF0ZSBmcm9tIHRoZSBzZXJ2ZXIgaW4gdW5pdmVyc2FsIGFwcHMsIG9yIHRvIHJlc3RvcmUgYVxuICogcHJldmlvdXNseSBzZXJpYWxpemVkIHVzZXIgc2Vzc2lvbi5cbiAqIElmIHlvdSB1c2UgYGNvbWJpbmVSZWR1Y2Vyc2AgdG8gcHJvZHVjZSB0aGUgcm9vdCByZWR1Y2VyIGZ1bmN0aW9uLCB0aGlzIG11c3QgYmVcbiAqIGFuIG9iamVjdCB3aXRoIHRoZSBzYW1lIHNoYXBlIGFzIGBjb21iaW5lUmVkdWNlcnNgIGtleXMuXG4gKlxuICogQHBhcmFtIHtGdW5jdGlvbn0gW2VuaGFuY2VyXSBUaGUgc3RvcmUgZW5oYW5jZXIuIFlvdSBtYXkgb3B0aW9uYWxseSBzcGVjaWZ5IGl0XG4gKiB0byBlbmhhbmNlIHRoZSBzdG9yZSB3aXRoIHRoaXJkLXBhcnR5IGNhcGFiaWxpdGllcyBzdWNoIGFzIG1pZGRsZXdhcmUsXG4gKiB0aW1lIHRyYXZlbCwgcGVyc2lzdGVuY2UsIGV0Yy4gVGhlIG9ubHkgc3RvcmUgZW5oYW5jZXIgdGhhdCBzaGlwcyB3aXRoIFJlZHV4XG4gKiBpcyBgYXBwbHlNaWRkbGV3YXJlKClgLlxuICpcbiAqIEByZXR1cm5zIHtTdG9yZX0gQSBSZWR1eCBzdG9yZSB0aGF0IGxldHMgeW91IHJlYWQgdGhlIHN0YXRlLCBkaXNwYXRjaCBhY3Rpb25zXG4gKiBhbmQgc3Vic2NyaWJlIHRvIGNoYW5nZXMuXG4gKi9cblxuZnVuY3Rpb24gY3JlYXRlU3RvcmUocmVkdWNlciwgcHJlbG9hZGVkU3RhdGUsIGVuaGFuY2VyKSB7XG4gIHZhciBfcmVmMjtcblxuICBpZiAodHlwZW9mIHByZWxvYWRlZFN0YXRlID09PSAnZnVuY3Rpb24nICYmIHR5cGVvZiBlbmhhbmNlciA9PT0gJ2Z1bmN0aW9uJyB8fCB0eXBlb2YgZW5oYW5jZXIgPT09ICdmdW5jdGlvbicgJiYgdHlwZW9mIGFyZ3VtZW50c1szXSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIHRocm93IG5ldyBFcnJvcihwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gXCJwcm9kdWN0aW9uXCIgPyBmb3JtYXRQcm9kRXJyb3JNZXNzYWdlKDApIDogJ0l0IGxvb2tzIGxpa2UgeW91IGFyZSBwYXNzaW5nIHNldmVyYWwgc3RvcmUgZW5oYW5jZXJzIHRvICcgKyAnY3JlYXRlU3RvcmUoKS4gVGhpcyBpcyBub3Qgc3VwcG9ydGVkLiBJbnN0ZWFkLCBjb21wb3NlIHRoZW0gJyArICd0b2dldGhlciB0byBhIHNpbmdsZSBmdW5jdGlvbi4gU2VlIGh0dHBzOi8vcmVkdXguanMub3JnL3R1dG9yaWFscy9mdW5kYW1lbnRhbHMvcGFydC00LXN0b3JlI2NyZWF0aW5nLWEtc3RvcmUtd2l0aC1lbmhhbmNlcnMgZm9yIGFuIGV4YW1wbGUuJyk7XG4gIH1cblxuICBpZiAodHlwZW9mIHByZWxvYWRlZFN0YXRlID09PSAnZnVuY3Rpb24nICYmIHR5cGVvZiBlbmhhbmNlciA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICBlbmhhbmNlciA9IHByZWxvYWRlZFN0YXRlO1xuICAgIHByZWxvYWRlZFN0YXRlID0gdW5kZWZpbmVkO1xuICB9XG5cbiAgaWYgKHR5cGVvZiBlbmhhbmNlciAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICBpZiAodHlwZW9mIGVuaGFuY2VyICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09IFwicHJvZHVjdGlvblwiID8gZm9ybWF0UHJvZEVycm9yTWVzc2FnZSgxKSA6IFwiRXhwZWN0ZWQgdGhlIGVuaGFuY2VyIHRvIGJlIGEgZnVuY3Rpb24uIEluc3RlYWQsIHJlY2VpdmVkOiAnXCIgKyBraW5kT2YoZW5oYW5jZXIpICsgXCInXCIpO1xuICAgIH1cblxuICAgIHJldHVybiBlbmhhbmNlcihjcmVhdGVTdG9yZSkocmVkdWNlciwgcHJlbG9hZGVkU3RhdGUpO1xuICB9XG5cbiAgaWYgKHR5cGVvZiByZWR1Y2VyICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSBcInByb2R1Y3Rpb25cIiA/IGZvcm1hdFByb2RFcnJvck1lc3NhZ2UoMikgOiBcIkV4cGVjdGVkIHRoZSByb290IHJlZHVjZXIgdG8gYmUgYSBmdW5jdGlvbi4gSW5zdGVhZCwgcmVjZWl2ZWQ6ICdcIiArIGtpbmRPZihyZWR1Y2VyKSArIFwiJ1wiKTtcbiAgfVxuXG4gIHZhciBjdXJyZW50UmVkdWNlciA9IHJlZHVjZXI7XG4gIHZhciBjdXJyZW50U3RhdGUgPSBwcmVsb2FkZWRTdGF0ZTtcbiAgdmFyIGN1cnJlbnRMaXN0ZW5lcnMgPSBbXTtcbiAgdmFyIG5leHRMaXN0ZW5lcnMgPSBjdXJyZW50TGlzdGVuZXJzO1xuICB2YXIgaXNEaXNwYXRjaGluZyA9IGZhbHNlO1xuICAvKipcbiAgICogVGhpcyBtYWtlcyBhIHNoYWxsb3cgY29weSBvZiBjdXJyZW50TGlzdGVuZXJzIHNvIHdlIGNhbiB1c2VcbiAgICogbmV4dExpc3RlbmVycyBhcyBhIHRlbXBvcmFyeSBsaXN0IHdoaWxlIGRpc3BhdGNoaW5nLlxuICAgKlxuICAgKiBUaGlzIHByZXZlbnRzIGFueSBidWdzIGFyb3VuZCBjb25zdW1lcnMgY2FsbGluZ1xuICAgKiBzdWJzY3JpYmUvdW5zdWJzY3JpYmUgaW4gdGhlIG1pZGRsZSBvZiBhIGRpc3BhdGNoLlxuICAgKi9cblxuICBmdW5jdGlvbiBlbnN1cmVDYW5NdXRhdGVOZXh0TGlzdGVuZXJzKCkge1xuICAgIGlmIChuZXh0TGlzdGVuZXJzID09PSBjdXJyZW50TGlzdGVuZXJzKSB7XG4gICAgICBuZXh0TGlzdGVuZXJzID0gY3VycmVudExpc3RlbmVycy5zbGljZSgpO1xuICAgIH1cbiAgfVxuICAvKipcbiAgICogUmVhZHMgdGhlIHN0YXRlIHRyZWUgbWFuYWdlZCBieSB0aGUgc3RvcmUuXG4gICAqXG4gICAqIEByZXR1cm5zIHthbnl9IFRoZSBjdXJyZW50IHN0YXRlIHRyZWUgb2YgeW91ciBhcHBsaWNhdGlvbi5cbiAgICovXG5cblxuICBmdW5jdGlvbiBnZXRTdGF0ZSgpIHtcbiAgICBpZiAoaXNEaXNwYXRjaGluZykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSBcInByb2R1Y3Rpb25cIiA/IGZvcm1hdFByb2RFcnJvck1lc3NhZ2UoMykgOiAnWW91IG1heSBub3QgY2FsbCBzdG9yZS5nZXRTdGF0ZSgpIHdoaWxlIHRoZSByZWR1Y2VyIGlzIGV4ZWN1dGluZy4gJyArICdUaGUgcmVkdWNlciBoYXMgYWxyZWFkeSByZWNlaXZlZCB0aGUgc3RhdGUgYXMgYW4gYXJndW1lbnQuICcgKyAnUGFzcyBpdCBkb3duIGZyb20gdGhlIHRvcCByZWR1Y2VyIGluc3RlYWQgb2YgcmVhZGluZyBpdCBmcm9tIHRoZSBzdG9yZS4nKTtcbiAgICB9XG5cbiAgICByZXR1cm4gY3VycmVudFN0YXRlO1xuICB9XG4gIC8qKlxuICAgKiBBZGRzIGEgY2hhbmdlIGxpc3RlbmVyLiBJdCB3aWxsIGJlIGNhbGxlZCBhbnkgdGltZSBhbiBhY3Rpb24gaXMgZGlzcGF0Y2hlZCxcbiAgICogYW5kIHNvbWUgcGFydCBvZiB0aGUgc3RhdGUgdHJlZSBtYXkgcG90ZW50aWFsbHkgaGF2ZSBjaGFuZ2VkLiBZb3UgbWF5IHRoZW5cbiAgICogY2FsbCBgZ2V0U3RhdGUoKWAgdG8gcmVhZCB0aGUgY3VycmVudCBzdGF0ZSB0cmVlIGluc2lkZSB0aGUgY2FsbGJhY2suXG4gICAqXG4gICAqIFlvdSBtYXkgY2FsbCBgZGlzcGF0Y2goKWAgZnJvbSBhIGNoYW5nZSBsaXN0ZW5lciwgd2l0aCB0aGUgZm9sbG93aW5nXG4gICAqIGNhdmVhdHM6XG4gICAqXG4gICAqIDEuIFRoZSBzdWJzY3JpcHRpb25zIGFyZSBzbmFwc2hvdHRlZCBqdXN0IGJlZm9yZSBldmVyeSBgZGlzcGF0Y2goKWAgY2FsbC5cbiAgICogSWYgeW91IHN1YnNjcmliZSBvciB1bnN1YnNjcmliZSB3aGlsZSB0aGUgbGlzdGVuZXJzIGFyZSBiZWluZyBpbnZva2VkLCB0aGlzXG4gICAqIHdpbGwgbm90IGhhdmUgYW55IGVmZmVjdCBvbiB0aGUgYGRpc3BhdGNoKClgIHRoYXQgaXMgY3VycmVudGx5IGluIHByb2dyZXNzLlxuICAgKiBIb3dldmVyLCB0aGUgbmV4dCBgZGlzcGF0Y2goKWAgY2FsbCwgd2hldGhlciBuZXN0ZWQgb3Igbm90LCB3aWxsIHVzZSBhIG1vcmVcbiAgICogcmVjZW50IHNuYXBzaG90IG9mIHRoZSBzdWJzY3JpcHRpb24gbGlzdC5cbiAgICpcbiAgICogMi4gVGhlIGxpc3RlbmVyIHNob3VsZCBub3QgZXhwZWN0IHRvIHNlZSBhbGwgc3RhdGUgY2hhbmdlcywgYXMgdGhlIHN0YXRlXG4gICAqIG1pZ2h0IGhhdmUgYmVlbiB1cGRhdGVkIG11bHRpcGxlIHRpbWVzIGR1cmluZyBhIG5lc3RlZCBgZGlzcGF0Y2goKWAgYmVmb3JlXG4gICAqIHRoZSBsaXN0ZW5lciBpcyBjYWxsZWQuIEl0IGlzLCBob3dldmVyLCBndWFyYW50ZWVkIHRoYXQgYWxsIHN1YnNjcmliZXJzXG4gICAqIHJlZ2lzdGVyZWQgYmVmb3JlIHRoZSBgZGlzcGF0Y2goKWAgc3RhcnRlZCB3aWxsIGJlIGNhbGxlZCB3aXRoIHRoZSBsYXRlc3RcbiAgICogc3RhdGUgYnkgdGhlIHRpbWUgaXQgZXhpdHMuXG4gICAqXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IGxpc3RlbmVyIEEgY2FsbGJhY2sgdG8gYmUgaW52b2tlZCBvbiBldmVyeSBkaXNwYXRjaC5cbiAgICogQHJldHVybnMge0Z1bmN0aW9ufSBBIGZ1bmN0aW9uIHRvIHJlbW92ZSB0aGlzIGNoYW5nZSBsaXN0ZW5lci5cbiAgICovXG5cblxuICBmdW5jdGlvbiBzdWJzY3JpYmUobGlzdGVuZXIpIHtcbiAgICBpZiAodHlwZW9mIGxpc3RlbmVyICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09IFwicHJvZHVjdGlvblwiID8gZm9ybWF0UHJvZEVycm9yTWVzc2FnZSg0KSA6IFwiRXhwZWN0ZWQgdGhlIGxpc3RlbmVyIHRvIGJlIGEgZnVuY3Rpb24uIEluc3RlYWQsIHJlY2VpdmVkOiAnXCIgKyBraW5kT2YobGlzdGVuZXIpICsgXCInXCIpO1xuICAgIH1cblxuICAgIGlmIChpc0Rpc3BhdGNoaW5nKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09IFwicHJvZHVjdGlvblwiID8gZm9ybWF0UHJvZEVycm9yTWVzc2FnZSg1KSA6ICdZb3UgbWF5IG5vdCBjYWxsIHN0b3JlLnN1YnNjcmliZSgpIHdoaWxlIHRoZSByZWR1Y2VyIGlzIGV4ZWN1dGluZy4gJyArICdJZiB5b3Ugd291bGQgbGlrZSB0byBiZSBub3RpZmllZCBhZnRlciB0aGUgc3RvcmUgaGFzIGJlZW4gdXBkYXRlZCwgc3Vic2NyaWJlIGZyb20gYSAnICsgJ2NvbXBvbmVudCBhbmQgaW52b2tlIHN0b3JlLmdldFN0YXRlKCkgaW4gdGhlIGNhbGxiYWNrIHRvIGFjY2VzcyB0aGUgbGF0ZXN0IHN0YXRlLiAnICsgJ1NlZSBodHRwczovL3JlZHV4LmpzLm9yZy9hcGkvc3RvcmUjc3Vic2NyaWJlbGlzdGVuZXIgZm9yIG1vcmUgZGV0YWlscy4nKTtcbiAgICB9XG5cbiAgICB2YXIgaXNTdWJzY3JpYmVkID0gdHJ1ZTtcbiAgICBlbnN1cmVDYW5NdXRhdGVOZXh0TGlzdGVuZXJzKCk7XG4gICAgbmV4dExpc3RlbmVycy5wdXNoKGxpc3RlbmVyKTtcbiAgICByZXR1cm4gZnVuY3Rpb24gdW5zdWJzY3JpYmUoKSB7XG4gICAgICBpZiAoIWlzU3Vic2NyaWJlZCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGlmIChpc0Rpc3BhdGNoaW5nKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gXCJwcm9kdWN0aW9uXCIgPyBmb3JtYXRQcm9kRXJyb3JNZXNzYWdlKDYpIDogJ1lvdSBtYXkgbm90IHVuc3Vic2NyaWJlIGZyb20gYSBzdG9yZSBsaXN0ZW5lciB3aGlsZSB0aGUgcmVkdWNlciBpcyBleGVjdXRpbmcuICcgKyAnU2VlIGh0dHBzOi8vcmVkdXguanMub3JnL2FwaS9zdG9yZSNzdWJzY3JpYmVsaXN0ZW5lciBmb3IgbW9yZSBkZXRhaWxzLicpO1xuICAgICAgfVxuXG4gICAgICBpc1N1YnNjcmliZWQgPSBmYWxzZTtcbiAgICAgIGVuc3VyZUNhbk11dGF0ZU5leHRMaXN0ZW5lcnMoKTtcbiAgICAgIHZhciBpbmRleCA9IG5leHRMaXN0ZW5lcnMuaW5kZXhPZihsaXN0ZW5lcik7XG4gICAgICBuZXh0TGlzdGVuZXJzLnNwbGljZShpbmRleCwgMSk7XG4gICAgICBjdXJyZW50TGlzdGVuZXJzID0gbnVsbDtcbiAgICB9O1xuICB9XG4gIC8qKlxuICAgKiBEaXNwYXRjaGVzIGFuIGFjdGlvbi4gSXQgaXMgdGhlIG9ubHkgd2F5IHRvIHRyaWdnZXIgYSBzdGF0ZSBjaGFuZ2UuXG4gICAqXG4gICAqIFRoZSBgcmVkdWNlcmAgZnVuY3Rpb24sIHVzZWQgdG8gY3JlYXRlIHRoZSBzdG9yZSwgd2lsbCBiZSBjYWxsZWQgd2l0aCB0aGVcbiAgICogY3VycmVudCBzdGF0ZSB0cmVlIGFuZCB0aGUgZ2l2ZW4gYGFjdGlvbmAuIEl0cyByZXR1cm4gdmFsdWUgd2lsbFxuICAgKiBiZSBjb25zaWRlcmVkIHRoZSAqKm5leHQqKiBzdGF0ZSBvZiB0aGUgdHJlZSwgYW5kIHRoZSBjaGFuZ2UgbGlzdGVuZXJzXG4gICAqIHdpbGwgYmUgbm90aWZpZWQuXG4gICAqXG4gICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9ubHkgc3VwcG9ydHMgcGxhaW4gb2JqZWN0IGFjdGlvbnMuIElmIHlvdSB3YW50IHRvXG4gICAqIGRpc3BhdGNoIGEgUHJvbWlzZSwgYW4gT2JzZXJ2YWJsZSwgYSB0aHVuaywgb3Igc29tZXRoaW5nIGVsc2UsIHlvdSBuZWVkIHRvXG4gICAqIHdyYXAgeW91ciBzdG9yZSBjcmVhdGluZyBmdW5jdGlvbiBpbnRvIHRoZSBjb3JyZXNwb25kaW5nIG1pZGRsZXdhcmUuIEZvclxuICAgKiBleGFtcGxlLCBzZWUgdGhlIGRvY3VtZW50YXRpb24gZm9yIHRoZSBgcmVkdXgtdGh1bmtgIHBhY2thZ2UuIEV2ZW4gdGhlXG4gICAqIG1pZGRsZXdhcmUgd2lsbCBldmVudHVhbGx5IGRpc3BhdGNoIHBsYWluIG9iamVjdCBhY3Rpb25zIHVzaW5nIHRoaXMgbWV0aG9kLlxuICAgKlxuICAgKiBAcGFyYW0ge09iamVjdH0gYWN0aW9uIEEgcGxhaW4gb2JqZWN0IHJlcHJlc2VudGluZyDigJx3aGF0IGNoYW5nZWTigJ0uIEl0IGlzXG4gICAqIGEgZ29vZCBpZGVhIHRvIGtlZXAgYWN0aW9ucyBzZXJpYWxpemFibGUgc28geW91IGNhbiByZWNvcmQgYW5kIHJlcGxheSB1c2VyXG4gICAqIHNlc3Npb25zLCBvciB1c2UgdGhlIHRpbWUgdHJhdmVsbGluZyBgcmVkdXgtZGV2dG9vbHNgLiBBbiBhY3Rpb24gbXVzdCBoYXZlXG4gICAqIGEgYHR5cGVgIHByb3BlcnR5IHdoaWNoIG1heSBub3QgYmUgYHVuZGVmaW5lZGAuIEl0IGlzIGEgZ29vZCBpZGVhIHRvIHVzZVxuICAgKiBzdHJpbmcgY29uc3RhbnRzIGZvciBhY3Rpb24gdHlwZXMuXG4gICAqXG4gICAqIEByZXR1cm5zIHtPYmplY3R9IEZvciBjb252ZW5pZW5jZSwgdGhlIHNhbWUgYWN0aW9uIG9iamVjdCB5b3UgZGlzcGF0Y2hlZC5cbiAgICpcbiAgICogTm90ZSB0aGF0LCBpZiB5b3UgdXNlIGEgY3VzdG9tIG1pZGRsZXdhcmUsIGl0IG1heSB3cmFwIGBkaXNwYXRjaCgpYCB0b1xuICAgKiByZXR1cm4gc29tZXRoaW5nIGVsc2UgKGZvciBleGFtcGxlLCBhIFByb21pc2UgeW91IGNhbiBhd2FpdCkuXG4gICAqL1xuXG5cbiAgZnVuY3Rpb24gZGlzcGF0Y2goYWN0aW9uKSB7XG4gICAgaWYgKCFpc1BsYWluT2JqZWN0KGFjdGlvbikpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gXCJwcm9kdWN0aW9uXCIgPyBmb3JtYXRQcm9kRXJyb3JNZXNzYWdlKDcpIDogXCJBY3Rpb25zIG11c3QgYmUgcGxhaW4gb2JqZWN0cy4gSW5zdGVhZCwgdGhlIGFjdHVhbCB0eXBlIHdhczogJ1wiICsga2luZE9mKGFjdGlvbikgKyBcIicuIFlvdSBtYXkgbmVlZCB0byBhZGQgbWlkZGxld2FyZSB0byB5b3VyIHN0b3JlIHNldHVwIHRvIGhhbmRsZSBkaXNwYXRjaGluZyBvdGhlciB2YWx1ZXMsIHN1Y2ggYXMgJ3JlZHV4LXRodW5rJyB0byBoYW5kbGUgZGlzcGF0Y2hpbmcgZnVuY3Rpb25zLiBTZWUgaHR0cHM6Ly9yZWR1eC5qcy5vcmcvdHV0b3JpYWxzL2Z1bmRhbWVudGFscy9wYXJ0LTQtc3RvcmUjbWlkZGxld2FyZSBhbmQgaHR0cHM6Ly9yZWR1eC5qcy5vcmcvdHV0b3JpYWxzL2Z1bmRhbWVudGFscy9wYXJ0LTYtYXN5bmMtbG9naWMjdXNpbmctdGhlLXJlZHV4LXRodW5rLW1pZGRsZXdhcmUgZm9yIGV4YW1wbGVzLlwiKTtcbiAgICB9XG5cbiAgICBpZiAodHlwZW9mIGFjdGlvbi50eXBlID09PSAndW5kZWZpbmVkJykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSBcInByb2R1Y3Rpb25cIiA/IGZvcm1hdFByb2RFcnJvck1lc3NhZ2UoOCkgOiAnQWN0aW9ucyBtYXkgbm90IGhhdmUgYW4gdW5kZWZpbmVkIFwidHlwZVwiIHByb3BlcnR5LiBZb3UgbWF5IGhhdmUgbWlzc3BlbGxlZCBhbiBhY3Rpb24gdHlwZSBzdHJpbmcgY29uc3RhbnQuJyk7XG4gICAgfVxuXG4gICAgaWYgKGlzRGlzcGF0Y2hpbmcpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gXCJwcm9kdWN0aW9uXCIgPyBmb3JtYXRQcm9kRXJyb3JNZXNzYWdlKDkpIDogJ1JlZHVjZXJzIG1heSBub3QgZGlzcGF0Y2ggYWN0aW9ucy4nKTtcbiAgICB9XG5cbiAgICB0cnkge1xuICAgICAgaXNEaXNwYXRjaGluZyA9IHRydWU7XG4gICAgICBjdXJyZW50U3RhdGUgPSBjdXJyZW50UmVkdWNlcihjdXJyZW50U3RhdGUsIGFjdGlvbik7XG4gICAgfSBmaW5hbGx5IHtcbiAgICAgIGlzRGlzcGF0Y2hpbmcgPSBmYWxzZTtcbiAgICB9XG5cbiAgICB2YXIgbGlzdGVuZXJzID0gY3VycmVudExpc3RlbmVycyA9IG5leHRMaXN0ZW5lcnM7XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxpc3RlbmVycy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIGxpc3RlbmVyID0gbGlzdGVuZXJzW2ldO1xuICAgICAgbGlzdGVuZXIoKTtcbiAgICB9XG5cbiAgICByZXR1cm4gYWN0aW9uO1xuICB9XG4gIC8qKlxuICAgKiBSZXBsYWNlcyB0aGUgcmVkdWNlciBjdXJyZW50bHkgdXNlZCBieSB0aGUgc3RvcmUgdG8gY2FsY3VsYXRlIHRoZSBzdGF0ZS5cbiAgICpcbiAgICogWW91IG1pZ2h0IG5lZWQgdGhpcyBpZiB5b3VyIGFwcCBpbXBsZW1lbnRzIGNvZGUgc3BsaXR0aW5nIGFuZCB5b3Ugd2FudCB0b1xuICAgKiBsb2FkIHNvbWUgb2YgdGhlIHJlZHVjZXJzIGR5bmFtaWNhbGx5LiBZb3UgbWlnaHQgYWxzbyBuZWVkIHRoaXMgaWYgeW91XG4gICAqIGltcGxlbWVudCBhIGhvdCByZWxvYWRpbmcgbWVjaGFuaXNtIGZvciBSZWR1eC5cbiAgICpcbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gbmV4dFJlZHVjZXIgVGhlIHJlZHVjZXIgZm9yIHRoZSBzdG9yZSB0byB1c2UgaW5zdGVhZC5cbiAgICogQHJldHVybnMge3ZvaWR9XG4gICAqL1xuXG5cbiAgZnVuY3Rpb24gcmVwbGFjZVJlZHVjZXIobmV4dFJlZHVjZXIpIHtcbiAgICBpZiAodHlwZW9mIG5leHRSZWR1Y2VyICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09IFwicHJvZHVjdGlvblwiID8gZm9ybWF0UHJvZEVycm9yTWVzc2FnZSgxMCkgOiBcIkV4cGVjdGVkIHRoZSBuZXh0UmVkdWNlciB0byBiZSBhIGZ1bmN0aW9uLiBJbnN0ZWFkLCByZWNlaXZlZDogJ1wiICsga2luZE9mKG5leHRSZWR1Y2VyKSk7XG4gICAgfVxuXG4gICAgY3VycmVudFJlZHVjZXIgPSBuZXh0UmVkdWNlcjsgLy8gVGhpcyBhY3Rpb24gaGFzIGEgc2ltaWxpYXIgZWZmZWN0IHRvIEFjdGlvblR5cGVzLklOSVQuXG4gICAgLy8gQW55IHJlZHVjZXJzIHRoYXQgZXhpc3RlZCBpbiBib3RoIHRoZSBuZXcgYW5kIG9sZCByb290UmVkdWNlclxuICAgIC8vIHdpbGwgcmVjZWl2ZSB0aGUgcHJldmlvdXMgc3RhdGUuIFRoaXMgZWZmZWN0aXZlbHkgcG9wdWxhdGVzXG4gICAgLy8gdGhlIG5ldyBzdGF0ZSB0cmVlIHdpdGggYW55IHJlbGV2YW50IGRhdGEgZnJvbSB0aGUgb2xkIG9uZS5cblxuICAgIGRpc3BhdGNoKHtcbiAgICAgIHR5cGU6IEFjdGlvblR5cGVzLlJFUExBQ0VcbiAgICB9KTtcbiAgfVxuICAvKipcbiAgICogSW50ZXJvcGVyYWJpbGl0eSBwb2ludCBmb3Igb2JzZXJ2YWJsZS9yZWFjdGl2ZSBsaWJyYXJpZXMuXG4gICAqIEByZXR1cm5zIHtvYnNlcnZhYmxlfSBBIG1pbmltYWwgb2JzZXJ2YWJsZSBvZiBzdGF0ZSBjaGFuZ2VzLlxuICAgKiBGb3IgbW9yZSBpbmZvcm1hdGlvbiwgc2VlIHRoZSBvYnNlcnZhYmxlIHByb3Bvc2FsOlxuICAgKiBodHRwczovL2dpdGh1Yi5jb20vdGMzOS9wcm9wb3NhbC1vYnNlcnZhYmxlXG4gICAqL1xuXG5cbiAgZnVuY3Rpb24gb2JzZXJ2YWJsZSgpIHtcbiAgICB2YXIgX3JlZjtcblxuICAgIHZhciBvdXRlclN1YnNjcmliZSA9IHN1YnNjcmliZTtcbiAgICByZXR1cm4gX3JlZiA9IHtcbiAgICAgIC8qKlxuICAgICAgICogVGhlIG1pbmltYWwgb2JzZXJ2YWJsZSBzdWJzY3JpcHRpb24gbWV0aG9kLlxuICAgICAgICogQHBhcmFtIHtPYmplY3R9IG9ic2VydmVyIEFueSBvYmplY3QgdGhhdCBjYW4gYmUgdXNlZCBhcyBhbiBvYnNlcnZlci5cbiAgICAgICAqIFRoZSBvYnNlcnZlciBvYmplY3Qgc2hvdWxkIGhhdmUgYSBgbmV4dGAgbWV0aG9kLlxuICAgICAgICogQHJldHVybnMge3N1YnNjcmlwdGlvbn0gQW4gb2JqZWN0IHdpdGggYW4gYHVuc3Vic2NyaWJlYCBtZXRob2QgdGhhdCBjYW5cbiAgICAgICAqIGJlIHVzZWQgdG8gdW5zdWJzY3JpYmUgdGhlIG9ic2VydmFibGUgZnJvbSB0aGUgc3RvcmUsIGFuZCBwcmV2ZW50IGZ1cnRoZXJcbiAgICAgICAqIGVtaXNzaW9uIG9mIHZhbHVlcyBmcm9tIHRoZSBvYnNlcnZhYmxlLlxuICAgICAgICovXG4gICAgICBzdWJzY3JpYmU6IGZ1bmN0aW9uIHN1YnNjcmliZShvYnNlcnZlcikge1xuICAgICAgICBpZiAodHlwZW9mIG9ic2VydmVyICE9PSAnb2JqZWN0JyB8fCBvYnNlcnZlciA9PT0gbnVsbCkge1xuICAgICAgICAgIHRocm93IG5ldyBFcnJvcihwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gXCJwcm9kdWN0aW9uXCIgPyBmb3JtYXRQcm9kRXJyb3JNZXNzYWdlKDExKSA6IFwiRXhwZWN0ZWQgdGhlIG9ic2VydmVyIHRvIGJlIGFuIG9iamVjdC4gSW5zdGVhZCwgcmVjZWl2ZWQ6ICdcIiArIGtpbmRPZihvYnNlcnZlcikgKyBcIidcIik7XG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiBvYnNlcnZlU3RhdGUoKSB7XG4gICAgICAgICAgaWYgKG9ic2VydmVyLm5leHQpIHtcbiAgICAgICAgICAgIG9ic2VydmVyLm5leHQoZ2V0U3RhdGUoKSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgb2JzZXJ2ZVN0YXRlKCk7XG4gICAgICAgIHZhciB1bnN1YnNjcmliZSA9IG91dGVyU3Vic2NyaWJlKG9ic2VydmVTdGF0ZSk7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgdW5zdWJzY3JpYmU6IHVuc3Vic2NyaWJlXG4gICAgICAgIH07XG4gICAgICB9XG4gICAgfSwgX3JlZlskJG9ic2VydmFibGVdID0gZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfSwgX3JlZjtcbiAgfSAvLyBXaGVuIGEgc3RvcmUgaXMgY3JlYXRlZCwgYW4gXCJJTklUXCIgYWN0aW9uIGlzIGRpc3BhdGNoZWQgc28gdGhhdCBldmVyeVxuICAvLyByZWR1Y2VyIHJldHVybnMgdGhlaXIgaW5pdGlhbCBzdGF0ZS4gVGhpcyBlZmZlY3RpdmVseSBwb3B1bGF0ZXNcbiAgLy8gdGhlIGluaXRpYWwgc3RhdGUgdHJlZS5cblxuXG4gIGRpc3BhdGNoKHtcbiAgICB0eXBlOiBBY3Rpb25UeXBlcy5JTklUXG4gIH0pO1xuICByZXR1cm4gX3JlZjIgPSB7XG4gICAgZGlzcGF0Y2g6IGRpc3BhdGNoLFxuICAgIHN1YnNjcmliZTogc3Vic2NyaWJlLFxuICAgIGdldFN0YXRlOiBnZXRTdGF0ZSxcbiAgICByZXBsYWNlUmVkdWNlcjogcmVwbGFjZVJlZHVjZXJcbiAgfSwgX3JlZjJbJCRvYnNlcnZhYmxlXSA9IG9ic2VydmFibGUsIF9yZWYyO1xufVxuXG4vKipcbiAqIFByaW50cyBhIHdhcm5pbmcgaW4gdGhlIGNvbnNvbGUgaWYgaXQgZXhpc3RzLlxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBtZXNzYWdlIFRoZSB3YXJuaW5nIG1lc3NhZ2UuXG4gKiBAcmV0dXJucyB7dm9pZH1cbiAqL1xuZnVuY3Rpb24gd2FybmluZyhtZXNzYWdlKSB7XG4gIC8qIGVzbGludC1kaXNhYmxlIG5vLWNvbnNvbGUgKi9cbiAgaWYgKHR5cGVvZiBjb25zb2xlICE9PSAndW5kZWZpbmVkJyAmJiB0eXBlb2YgY29uc29sZS5lcnJvciA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIGNvbnNvbGUuZXJyb3IobWVzc2FnZSk7XG4gIH1cbiAgLyogZXNsaW50LWVuYWJsZSBuby1jb25zb2xlICovXG5cblxuICB0cnkge1xuICAgIC8vIFRoaXMgZXJyb3Igd2FzIHRocm93biBhcyBhIGNvbnZlbmllbmNlIHNvIHRoYXQgaWYgeW91IGVuYWJsZVxuICAgIC8vIFwiYnJlYWsgb24gYWxsIGV4Y2VwdGlvbnNcIiBpbiB5b3VyIGNvbnNvbGUsXG4gICAgLy8gaXQgd291bGQgcGF1c2UgdGhlIGV4ZWN1dGlvbiBhdCB0aGlzIGxpbmUuXG4gICAgdGhyb3cgbmV3IEVycm9yKG1lc3NhZ2UpO1xuICB9IGNhdGNoIChlKSB7fSAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLWVtcHR5XG5cbn1cblxuZnVuY3Rpb24gZ2V0VW5leHBlY3RlZFN0YXRlU2hhcGVXYXJuaW5nTWVzc2FnZShpbnB1dFN0YXRlLCByZWR1Y2VycywgYWN0aW9uLCB1bmV4cGVjdGVkS2V5Q2FjaGUpIHtcbiAgdmFyIHJlZHVjZXJLZXlzID0gT2JqZWN0LmtleXMocmVkdWNlcnMpO1xuICB2YXIgYXJndW1lbnROYW1lID0gYWN0aW9uICYmIGFjdGlvbi50eXBlID09PSBBY3Rpb25UeXBlcy5JTklUID8gJ3ByZWxvYWRlZFN0YXRlIGFyZ3VtZW50IHBhc3NlZCB0byBjcmVhdGVTdG9yZScgOiAncHJldmlvdXMgc3RhdGUgcmVjZWl2ZWQgYnkgdGhlIHJlZHVjZXInO1xuXG4gIGlmIChyZWR1Y2VyS2V5cy5sZW5ndGggPT09IDApIHtcbiAgICByZXR1cm4gJ1N0b3JlIGRvZXMgbm90IGhhdmUgYSB2YWxpZCByZWR1Y2VyLiBNYWtlIHN1cmUgdGhlIGFyZ3VtZW50IHBhc3NlZCAnICsgJ3RvIGNvbWJpbmVSZWR1Y2VycyBpcyBhbiBvYmplY3Qgd2hvc2UgdmFsdWVzIGFyZSByZWR1Y2Vycy4nO1xuICB9XG5cbiAgaWYgKCFpc1BsYWluT2JqZWN0KGlucHV0U3RhdGUpKSB7XG4gICAgcmV0dXJuIFwiVGhlIFwiICsgYXJndW1lbnROYW1lICsgXCIgaGFzIHVuZXhwZWN0ZWQgdHlwZSBvZiBcXFwiXCIgKyBraW5kT2YoaW5wdXRTdGF0ZSkgKyBcIlxcXCIuIEV4cGVjdGVkIGFyZ3VtZW50IHRvIGJlIGFuIG9iamVjdCB3aXRoIHRoZSBmb2xsb3dpbmcgXCIgKyAoXCJrZXlzOiBcXFwiXCIgKyByZWR1Y2VyS2V5cy5qb2luKCdcIiwgXCInKSArIFwiXFxcIlwiKTtcbiAgfVxuXG4gIHZhciB1bmV4cGVjdGVkS2V5cyA9IE9iamVjdC5rZXlzKGlucHV0U3RhdGUpLmZpbHRlcihmdW5jdGlvbiAoa2V5KSB7XG4gICAgcmV0dXJuICFyZWR1Y2Vycy5oYXNPd25Qcm9wZXJ0eShrZXkpICYmICF1bmV4cGVjdGVkS2V5Q2FjaGVba2V5XTtcbiAgfSk7XG4gIHVuZXhwZWN0ZWRLZXlzLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgIHVuZXhwZWN0ZWRLZXlDYWNoZVtrZXldID0gdHJ1ZTtcbiAgfSk7XG4gIGlmIChhY3Rpb24gJiYgYWN0aW9uLnR5cGUgPT09IEFjdGlvblR5cGVzLlJFUExBQ0UpIHJldHVybjtcblxuICBpZiAodW5leHBlY3RlZEtleXMubGVuZ3RoID4gMCkge1xuICAgIHJldHVybiBcIlVuZXhwZWN0ZWQgXCIgKyAodW5leHBlY3RlZEtleXMubGVuZ3RoID4gMSA/ICdrZXlzJyA6ICdrZXknKSArIFwiIFwiICsgKFwiXFxcIlwiICsgdW5leHBlY3RlZEtleXMuam9pbignXCIsIFwiJykgKyBcIlxcXCIgZm91bmQgaW4gXCIgKyBhcmd1bWVudE5hbWUgKyBcIi4gXCIpICsgXCJFeHBlY3RlZCB0byBmaW5kIG9uZSBvZiB0aGUga25vd24gcmVkdWNlciBrZXlzIGluc3RlYWQ6IFwiICsgKFwiXFxcIlwiICsgcmVkdWNlcktleXMuam9pbignXCIsIFwiJykgKyBcIlxcXCIuIFVuZXhwZWN0ZWQga2V5cyB3aWxsIGJlIGlnbm9yZWQuXCIpO1xuICB9XG59XG5cbmZ1bmN0aW9uIGFzc2VydFJlZHVjZXJTaGFwZShyZWR1Y2Vycykge1xuICBPYmplY3Qua2V5cyhyZWR1Y2VycykuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgdmFyIHJlZHVjZXIgPSByZWR1Y2Vyc1trZXldO1xuICAgIHZhciBpbml0aWFsU3RhdGUgPSByZWR1Y2VyKHVuZGVmaW5lZCwge1xuICAgICAgdHlwZTogQWN0aW9uVHlwZXMuSU5JVFxuICAgIH0pO1xuXG4gICAgaWYgKHR5cGVvZiBpbml0aWFsU3RhdGUgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09IFwicHJvZHVjdGlvblwiID8gZm9ybWF0UHJvZEVycm9yTWVzc2FnZSgxMikgOiBcIlRoZSBzbGljZSByZWR1Y2VyIGZvciBrZXkgXFxcIlwiICsga2V5ICsgXCJcXFwiIHJldHVybmVkIHVuZGVmaW5lZCBkdXJpbmcgaW5pdGlhbGl6YXRpb24uIFwiICsgXCJJZiB0aGUgc3RhdGUgcGFzc2VkIHRvIHRoZSByZWR1Y2VyIGlzIHVuZGVmaW5lZCwgeW91IG11c3QgXCIgKyBcImV4cGxpY2l0bHkgcmV0dXJuIHRoZSBpbml0aWFsIHN0YXRlLiBUaGUgaW5pdGlhbCBzdGF0ZSBtYXkgXCIgKyBcIm5vdCBiZSB1bmRlZmluZWQuIElmIHlvdSBkb24ndCB3YW50IHRvIHNldCBhIHZhbHVlIGZvciB0aGlzIHJlZHVjZXIsIFwiICsgXCJ5b3UgY2FuIHVzZSBudWxsIGluc3RlYWQgb2YgdW5kZWZpbmVkLlwiKTtcbiAgICB9XG5cbiAgICBpZiAodHlwZW9mIHJlZHVjZXIodW5kZWZpbmVkLCB7XG4gICAgICB0eXBlOiBBY3Rpb25UeXBlcy5QUk9CRV9VTktOT1dOX0FDVElPTigpXG4gICAgfSkgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09IFwicHJvZHVjdGlvblwiID8gZm9ybWF0UHJvZEVycm9yTWVzc2FnZSgxMykgOiBcIlRoZSBzbGljZSByZWR1Y2VyIGZvciBrZXkgXFxcIlwiICsga2V5ICsgXCJcXFwiIHJldHVybmVkIHVuZGVmaW5lZCB3aGVuIHByb2JlZCB3aXRoIGEgcmFuZG9tIHR5cGUuIFwiICsgKFwiRG9uJ3QgdHJ5IHRvIGhhbmRsZSAnXCIgKyBBY3Rpb25UeXBlcy5JTklUICsgXCInIG9yIG90aGVyIGFjdGlvbnMgaW4gXFxcInJlZHV4LypcXFwiIFwiKSArIFwibmFtZXNwYWNlLiBUaGV5IGFyZSBjb25zaWRlcmVkIHByaXZhdGUuIEluc3RlYWQsIHlvdSBtdXN0IHJldHVybiB0aGUgXCIgKyBcImN1cnJlbnQgc3RhdGUgZm9yIGFueSB1bmtub3duIGFjdGlvbnMsIHVubGVzcyBpdCBpcyB1bmRlZmluZWQsIFwiICsgXCJpbiB3aGljaCBjYXNlIHlvdSBtdXN0IHJldHVybiB0aGUgaW5pdGlhbCBzdGF0ZSwgcmVnYXJkbGVzcyBvZiB0aGUgXCIgKyBcImFjdGlvbiB0eXBlLiBUaGUgaW5pdGlhbCBzdGF0ZSBtYXkgbm90IGJlIHVuZGVmaW5lZCwgYnV0IGNhbiBiZSBudWxsLlwiKTtcbiAgICB9XG4gIH0pO1xufVxuLyoqXG4gKiBUdXJucyBhbiBvYmplY3Qgd2hvc2UgdmFsdWVzIGFyZSBkaWZmZXJlbnQgcmVkdWNlciBmdW5jdGlvbnMsIGludG8gYSBzaW5nbGVcbiAqIHJlZHVjZXIgZnVuY3Rpb24uIEl0IHdpbGwgY2FsbCBldmVyeSBjaGlsZCByZWR1Y2VyLCBhbmQgZ2F0aGVyIHRoZWlyIHJlc3VsdHNcbiAqIGludG8gYSBzaW5nbGUgc3RhdGUgb2JqZWN0LCB3aG9zZSBrZXlzIGNvcnJlc3BvbmQgdG8gdGhlIGtleXMgb2YgdGhlIHBhc3NlZFxuICogcmVkdWNlciBmdW5jdGlvbnMuXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHJlZHVjZXJzIEFuIG9iamVjdCB3aG9zZSB2YWx1ZXMgY29ycmVzcG9uZCB0byBkaWZmZXJlbnRcbiAqIHJlZHVjZXIgZnVuY3Rpb25zIHRoYXQgbmVlZCB0byBiZSBjb21iaW5lZCBpbnRvIG9uZS4gT25lIGhhbmR5IHdheSB0byBvYnRhaW5cbiAqIGl0IGlzIHRvIHVzZSBFUzYgYGltcG9ydCAqIGFzIHJlZHVjZXJzYCBzeW50YXguIFRoZSByZWR1Y2VycyBtYXkgbmV2ZXIgcmV0dXJuXG4gKiB1bmRlZmluZWQgZm9yIGFueSBhY3Rpb24uIEluc3RlYWQsIHRoZXkgc2hvdWxkIHJldHVybiB0aGVpciBpbml0aWFsIHN0YXRlXG4gKiBpZiB0aGUgc3RhdGUgcGFzc2VkIHRvIHRoZW0gd2FzIHVuZGVmaW5lZCwgYW5kIHRoZSBjdXJyZW50IHN0YXRlIGZvciBhbnlcbiAqIHVucmVjb2duaXplZCBhY3Rpb24uXG4gKlxuICogQHJldHVybnMge0Z1bmN0aW9ufSBBIHJlZHVjZXIgZnVuY3Rpb24gdGhhdCBpbnZva2VzIGV2ZXJ5IHJlZHVjZXIgaW5zaWRlIHRoZVxuICogcGFzc2VkIG9iamVjdCwgYW5kIGJ1aWxkcyBhIHN0YXRlIG9iamVjdCB3aXRoIHRoZSBzYW1lIHNoYXBlLlxuICovXG5cblxuZnVuY3Rpb24gY29tYmluZVJlZHVjZXJzKHJlZHVjZXJzKSB7XG4gIHZhciByZWR1Y2VyS2V5cyA9IE9iamVjdC5rZXlzKHJlZHVjZXJzKTtcbiAgdmFyIGZpbmFsUmVkdWNlcnMgPSB7fTtcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IHJlZHVjZXJLZXlzLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIGtleSA9IHJlZHVjZXJLZXlzW2ldO1xuXG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIGlmICh0eXBlb2YgcmVkdWNlcnNba2V5XSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgd2FybmluZyhcIk5vIHJlZHVjZXIgcHJvdmlkZWQgZm9yIGtleSBcXFwiXCIgKyBrZXkgKyBcIlxcXCJcIik7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKHR5cGVvZiByZWR1Y2Vyc1trZXldID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICBmaW5hbFJlZHVjZXJzW2tleV0gPSByZWR1Y2Vyc1trZXldO1xuICAgIH1cbiAgfVxuXG4gIHZhciBmaW5hbFJlZHVjZXJLZXlzID0gT2JqZWN0LmtleXMoZmluYWxSZWR1Y2Vycyk7IC8vIFRoaXMgaXMgdXNlZCB0byBtYWtlIHN1cmUgd2UgZG9uJ3Qgd2FybiBhYm91dCB0aGUgc2FtZVxuICAvLyBrZXlzIG11bHRpcGxlIHRpbWVzLlxuXG4gIHZhciB1bmV4cGVjdGVkS2V5Q2FjaGU7XG5cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICB1bmV4cGVjdGVkS2V5Q2FjaGUgPSB7fTtcbiAgfVxuXG4gIHZhciBzaGFwZUFzc2VydGlvbkVycm9yO1xuXG4gIHRyeSB7XG4gICAgYXNzZXJ0UmVkdWNlclNoYXBlKGZpbmFsUmVkdWNlcnMpO1xuICB9IGNhdGNoIChlKSB7XG4gICAgc2hhcGVBc3NlcnRpb25FcnJvciA9IGU7XG4gIH1cblxuICByZXR1cm4gZnVuY3Rpb24gY29tYmluYXRpb24oc3RhdGUsIGFjdGlvbikge1xuICAgIGlmIChzdGF0ZSA9PT0gdm9pZCAwKSB7XG4gICAgICBzdGF0ZSA9IHt9O1xuICAgIH1cblxuICAgIGlmIChzaGFwZUFzc2VydGlvbkVycm9yKSB7XG4gICAgICB0aHJvdyBzaGFwZUFzc2VydGlvbkVycm9yO1xuICAgIH1cblxuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICB2YXIgd2FybmluZ01lc3NhZ2UgPSBnZXRVbmV4cGVjdGVkU3RhdGVTaGFwZVdhcm5pbmdNZXNzYWdlKHN0YXRlLCBmaW5hbFJlZHVjZXJzLCBhY3Rpb24sIHVuZXhwZWN0ZWRLZXlDYWNoZSk7XG5cbiAgICAgIGlmICh3YXJuaW5nTWVzc2FnZSkge1xuICAgICAgICB3YXJuaW5nKHdhcm5pbmdNZXNzYWdlKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB2YXIgaGFzQ2hhbmdlZCA9IGZhbHNlO1xuICAgIHZhciBuZXh0U3RhdGUgPSB7fTtcblxuICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBmaW5hbFJlZHVjZXJLZXlzLmxlbmd0aDsgX2krKykge1xuICAgICAgdmFyIF9rZXkgPSBmaW5hbFJlZHVjZXJLZXlzW19pXTtcbiAgICAgIHZhciByZWR1Y2VyID0gZmluYWxSZWR1Y2Vyc1tfa2V5XTtcbiAgICAgIHZhciBwcmV2aW91c1N0YXRlRm9yS2V5ID0gc3RhdGVbX2tleV07XG4gICAgICB2YXIgbmV4dFN0YXRlRm9yS2V5ID0gcmVkdWNlcihwcmV2aW91c1N0YXRlRm9yS2V5LCBhY3Rpb24pO1xuXG4gICAgICBpZiAodHlwZW9mIG5leHRTdGF0ZUZvcktleSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgdmFyIGFjdGlvblR5cGUgPSBhY3Rpb24gJiYgYWN0aW9uLnR5cGU7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gXCJwcm9kdWN0aW9uXCIgPyBmb3JtYXRQcm9kRXJyb3JNZXNzYWdlKDE0KSA6IFwiV2hlbiBjYWxsZWQgd2l0aCBhbiBhY3Rpb24gb2YgdHlwZSBcIiArIChhY3Rpb25UeXBlID8gXCJcXFwiXCIgKyBTdHJpbmcoYWN0aW9uVHlwZSkgKyBcIlxcXCJcIiA6ICcodW5rbm93biB0eXBlKScpICsgXCIsIHRoZSBzbGljZSByZWR1Y2VyIGZvciBrZXkgXFxcIlwiICsgX2tleSArIFwiXFxcIiByZXR1cm5lZCB1bmRlZmluZWQuIFwiICsgXCJUbyBpZ25vcmUgYW4gYWN0aW9uLCB5b3UgbXVzdCBleHBsaWNpdGx5IHJldHVybiB0aGUgcHJldmlvdXMgc3RhdGUuIFwiICsgXCJJZiB5b3Ugd2FudCB0aGlzIHJlZHVjZXIgdG8gaG9sZCBubyB2YWx1ZSwgeW91IGNhbiByZXR1cm4gbnVsbCBpbnN0ZWFkIG9mIHVuZGVmaW5lZC5cIik7XG4gICAgICB9XG5cbiAgICAgIG5leHRTdGF0ZVtfa2V5XSA9IG5leHRTdGF0ZUZvcktleTtcbiAgICAgIGhhc0NoYW5nZWQgPSBoYXNDaGFuZ2VkIHx8IG5leHRTdGF0ZUZvcktleSAhPT0gcHJldmlvdXNTdGF0ZUZvcktleTtcbiAgICB9XG5cbiAgICBoYXNDaGFuZ2VkID0gaGFzQ2hhbmdlZCB8fCBmaW5hbFJlZHVjZXJLZXlzLmxlbmd0aCAhPT0gT2JqZWN0LmtleXMoc3RhdGUpLmxlbmd0aDtcbiAgICByZXR1cm4gaGFzQ2hhbmdlZCA/IG5leHRTdGF0ZSA6IHN0YXRlO1xuICB9O1xufVxuXG5mdW5jdGlvbiBiaW5kQWN0aW9uQ3JlYXRvcihhY3Rpb25DcmVhdG9yLCBkaXNwYXRjaCkge1xuICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBkaXNwYXRjaChhY3Rpb25DcmVhdG9yLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykpO1xuICB9O1xufVxuLyoqXG4gKiBUdXJucyBhbiBvYmplY3Qgd2hvc2UgdmFsdWVzIGFyZSBhY3Rpb24gY3JlYXRvcnMsIGludG8gYW4gb2JqZWN0IHdpdGggdGhlXG4gKiBzYW1lIGtleXMsIGJ1dCB3aXRoIGV2ZXJ5IGZ1bmN0aW9uIHdyYXBwZWQgaW50byBhIGBkaXNwYXRjaGAgY2FsbCBzbyB0aGV5XG4gKiBtYXkgYmUgaW52b2tlZCBkaXJlY3RseS4gVGhpcyBpcyBqdXN0IGEgY29udmVuaWVuY2UgbWV0aG9kLCBhcyB5b3UgY2FuIGNhbGxcbiAqIGBzdG9yZS5kaXNwYXRjaChNeUFjdGlvbkNyZWF0b3JzLmRvU29tZXRoaW5nKCkpYCB5b3Vyc2VsZiBqdXN0IGZpbmUuXG4gKlxuICogRm9yIGNvbnZlbmllbmNlLCB5b3UgY2FuIGFsc28gcGFzcyBhbiBhY3Rpb24gY3JlYXRvciBhcyB0aGUgZmlyc3QgYXJndW1lbnQsXG4gKiBhbmQgZ2V0IGEgZGlzcGF0Y2ggd3JhcHBlZCBmdW5jdGlvbiBpbiByZXR1cm4uXG4gKlxuICogQHBhcmFtIHtGdW5jdGlvbnxPYmplY3R9IGFjdGlvbkNyZWF0b3JzIEFuIG9iamVjdCB3aG9zZSB2YWx1ZXMgYXJlIGFjdGlvblxuICogY3JlYXRvciBmdW5jdGlvbnMuIE9uZSBoYW5keSB3YXkgdG8gb2J0YWluIGl0IGlzIHRvIHVzZSBFUzYgYGltcG9ydCAqIGFzYFxuICogc3ludGF4LiBZb3UgbWF5IGFsc28gcGFzcyBhIHNpbmdsZSBmdW5jdGlvbi5cbiAqXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBkaXNwYXRjaCBUaGUgYGRpc3BhdGNoYCBmdW5jdGlvbiBhdmFpbGFibGUgb24geW91ciBSZWR1eFxuICogc3RvcmUuXG4gKlxuICogQHJldHVybnMge0Z1bmN0aW9ufE9iamVjdH0gVGhlIG9iamVjdCBtaW1pY2tpbmcgdGhlIG9yaWdpbmFsIG9iamVjdCwgYnV0IHdpdGhcbiAqIGV2ZXJ5IGFjdGlvbiBjcmVhdG9yIHdyYXBwZWQgaW50byB0aGUgYGRpc3BhdGNoYCBjYWxsLiBJZiB5b3UgcGFzc2VkIGFcbiAqIGZ1bmN0aW9uIGFzIGBhY3Rpb25DcmVhdG9yc2AsIHRoZSByZXR1cm4gdmFsdWUgd2lsbCBhbHNvIGJlIGEgc2luZ2xlXG4gKiBmdW5jdGlvbi5cbiAqL1xuXG5cbmZ1bmN0aW9uIGJpbmRBY3Rpb25DcmVhdG9ycyhhY3Rpb25DcmVhdG9ycywgZGlzcGF0Y2gpIHtcbiAgaWYgKHR5cGVvZiBhY3Rpb25DcmVhdG9ycyA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIHJldHVybiBiaW5kQWN0aW9uQ3JlYXRvcihhY3Rpb25DcmVhdG9ycywgZGlzcGF0Y2gpO1xuICB9XG5cbiAgaWYgKHR5cGVvZiBhY3Rpb25DcmVhdG9ycyAhPT0gJ29iamVjdCcgfHwgYWN0aW9uQ3JlYXRvcnMgPT09IG51bGwpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09IFwicHJvZHVjdGlvblwiID8gZm9ybWF0UHJvZEVycm9yTWVzc2FnZSgxNikgOiBcImJpbmRBY3Rpb25DcmVhdG9ycyBleHBlY3RlZCBhbiBvYmplY3Qgb3IgYSBmdW5jdGlvbiwgYnV0IGluc3RlYWQgcmVjZWl2ZWQ6ICdcIiArIGtpbmRPZihhY3Rpb25DcmVhdG9ycykgKyBcIicuIFwiICsgXCJEaWQgeW91IHdyaXRlIFxcXCJpbXBvcnQgQWN0aW9uQ3JlYXRvcnMgZnJvbVxcXCIgaW5zdGVhZCBvZiBcXFwiaW1wb3J0ICogYXMgQWN0aW9uQ3JlYXRvcnMgZnJvbVxcXCI/XCIpO1xuICB9XG5cbiAgdmFyIGJvdW5kQWN0aW9uQ3JlYXRvcnMgPSB7fTtcblxuICBmb3IgKHZhciBrZXkgaW4gYWN0aW9uQ3JlYXRvcnMpIHtcbiAgICB2YXIgYWN0aW9uQ3JlYXRvciA9IGFjdGlvbkNyZWF0b3JzW2tleV07XG5cbiAgICBpZiAodHlwZW9mIGFjdGlvbkNyZWF0b3IgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIGJvdW5kQWN0aW9uQ3JlYXRvcnNba2V5XSA9IGJpbmRBY3Rpb25DcmVhdG9yKGFjdGlvbkNyZWF0b3IsIGRpc3BhdGNoKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gYm91bmRBY3Rpb25DcmVhdG9ycztcbn1cblxuLyoqXG4gKiBDb21wb3NlcyBzaW5nbGUtYXJndW1lbnQgZnVuY3Rpb25zIGZyb20gcmlnaHQgdG8gbGVmdC4gVGhlIHJpZ2h0bW9zdFxuICogZnVuY3Rpb24gY2FuIHRha2UgbXVsdGlwbGUgYXJndW1lbnRzIGFzIGl0IHByb3ZpZGVzIHRoZSBzaWduYXR1cmUgZm9yXG4gKiB0aGUgcmVzdWx0aW5nIGNvbXBvc2l0ZSBmdW5jdGlvbi5cbiAqXG4gKiBAcGFyYW0gey4uLkZ1bmN0aW9ufSBmdW5jcyBUaGUgZnVuY3Rpb25zIHRvIGNvbXBvc2UuXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259IEEgZnVuY3Rpb24gb2J0YWluZWQgYnkgY29tcG9zaW5nIHRoZSBhcmd1bWVudCBmdW5jdGlvbnNcbiAqIGZyb20gcmlnaHQgdG8gbGVmdC4gRm9yIGV4YW1wbGUsIGNvbXBvc2UoZiwgZywgaCkgaXMgaWRlbnRpY2FsIHRvIGRvaW5nXG4gKiAoLi4uYXJncykgPT4gZihnKGgoLi4uYXJncykpKS5cbiAqL1xuZnVuY3Rpb24gY29tcG9zZSgpIHtcbiAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGZ1bmNzID0gbmV3IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgIGZ1bmNzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICB9XG5cbiAgaWYgKGZ1bmNzLmxlbmd0aCA9PT0gMCkge1xuICAgIHJldHVybiBmdW5jdGlvbiAoYXJnKSB7XG4gICAgICByZXR1cm4gYXJnO1xuICAgIH07XG4gIH1cblxuICBpZiAoZnVuY3MubGVuZ3RoID09PSAxKSB7XG4gICAgcmV0dXJuIGZ1bmNzWzBdO1xuICB9XG5cbiAgcmV0dXJuIGZ1bmNzLnJlZHVjZShmdW5jdGlvbiAoYSwgYikge1xuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gYShiLmFwcGx5KHZvaWQgMCwgYXJndW1lbnRzKSk7XG4gICAgfTtcbiAgfSk7XG59XG5cbi8qKlxuICogQ3JlYXRlcyBhIHN0b3JlIGVuaGFuY2VyIHRoYXQgYXBwbGllcyBtaWRkbGV3YXJlIHRvIHRoZSBkaXNwYXRjaCBtZXRob2RcbiAqIG9mIHRoZSBSZWR1eCBzdG9yZS4gVGhpcyBpcyBoYW5keSBmb3IgYSB2YXJpZXR5IG9mIHRhc2tzLCBzdWNoIGFzIGV4cHJlc3NpbmdcbiAqIGFzeW5jaHJvbm91cyBhY3Rpb25zIGluIGEgY29uY2lzZSBtYW5uZXIsIG9yIGxvZ2dpbmcgZXZlcnkgYWN0aW9uIHBheWxvYWQuXG4gKlxuICogU2VlIGByZWR1eC10aHVua2AgcGFja2FnZSBhcyBhbiBleGFtcGxlIG9mIHRoZSBSZWR1eCBtaWRkbGV3YXJlLlxuICpcbiAqIEJlY2F1c2UgbWlkZGxld2FyZSBpcyBwb3RlbnRpYWxseSBhc3luY2hyb25vdXMsIHRoaXMgc2hvdWxkIGJlIHRoZSBmaXJzdFxuICogc3RvcmUgZW5oYW5jZXIgaW4gdGhlIGNvbXBvc2l0aW9uIGNoYWluLlxuICpcbiAqIE5vdGUgdGhhdCBlYWNoIG1pZGRsZXdhcmUgd2lsbCBiZSBnaXZlbiB0aGUgYGRpc3BhdGNoYCBhbmQgYGdldFN0YXRlYCBmdW5jdGlvbnNcbiAqIGFzIG5hbWVkIGFyZ3VtZW50cy5cbiAqXG4gKiBAcGFyYW0gey4uLkZ1bmN0aW9ufSBtaWRkbGV3YXJlcyBUaGUgbWlkZGxld2FyZSBjaGFpbiB0byBiZSBhcHBsaWVkLlxuICogQHJldHVybnMge0Z1bmN0aW9ufSBBIHN0b3JlIGVuaGFuY2VyIGFwcGx5aW5nIHRoZSBtaWRkbGV3YXJlLlxuICovXG5cbmZ1bmN0aW9uIGFwcGx5TWlkZGxld2FyZSgpIHtcbiAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIG1pZGRsZXdhcmVzID0gbmV3IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgIG1pZGRsZXdhcmVzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICB9XG5cbiAgcmV0dXJuIGZ1bmN0aW9uIChjcmVhdGVTdG9yZSkge1xuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgc3RvcmUgPSBjcmVhdGVTdG9yZS5hcHBseSh2b2lkIDAsIGFyZ3VtZW50cyk7XG5cbiAgICAgIHZhciBfZGlzcGF0Y2ggPSBmdW5jdGlvbiBkaXNwYXRjaCgpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSBcInByb2R1Y3Rpb25cIiA/IGZvcm1hdFByb2RFcnJvck1lc3NhZ2UoMTUpIDogJ0Rpc3BhdGNoaW5nIHdoaWxlIGNvbnN0cnVjdGluZyB5b3VyIG1pZGRsZXdhcmUgaXMgbm90IGFsbG93ZWQuICcgKyAnT3RoZXIgbWlkZGxld2FyZSB3b3VsZCBub3QgYmUgYXBwbGllZCB0byB0aGlzIGRpc3BhdGNoLicpO1xuICAgICAgfTtcblxuICAgICAgdmFyIG1pZGRsZXdhcmVBUEkgPSB7XG4gICAgICAgIGdldFN0YXRlOiBzdG9yZS5nZXRTdGF0ZSxcbiAgICAgICAgZGlzcGF0Y2g6IGZ1bmN0aW9uIGRpc3BhdGNoKCkge1xuICAgICAgICAgIHJldHVybiBfZGlzcGF0Y2guYXBwbHkodm9pZCAwLCBhcmd1bWVudHMpO1xuICAgICAgICB9XG4gICAgICB9O1xuICAgICAgdmFyIGNoYWluID0gbWlkZGxld2FyZXMubWFwKGZ1bmN0aW9uIChtaWRkbGV3YXJlKSB7XG4gICAgICAgIHJldHVybiBtaWRkbGV3YXJlKG1pZGRsZXdhcmVBUEkpO1xuICAgICAgfSk7XG4gICAgICBfZGlzcGF0Y2ggPSBjb21wb3NlLmFwcGx5KHZvaWQgMCwgY2hhaW4pKHN0b3JlLmRpc3BhdGNoKTtcbiAgICAgIHJldHVybiBfb2JqZWN0U3ByZWFkKF9vYmplY3RTcHJlYWQoe30sIHN0b3JlKSwge30sIHtcbiAgICAgICAgZGlzcGF0Y2g6IF9kaXNwYXRjaFxuICAgICAgfSk7XG4gICAgfTtcbiAgfTtcbn1cblxuLypcbiAqIFRoaXMgaXMgYSBkdW1teSBmdW5jdGlvbiB0byBjaGVjayBpZiB0aGUgZnVuY3Rpb24gbmFtZSBoYXMgYmVlbiBhbHRlcmVkIGJ5IG1pbmlmaWNhdGlvbi5cbiAqIElmIHRoZSBmdW5jdGlvbiBoYXMgYmVlbiBtaW5pZmllZCBhbmQgTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJywgd2FybiB0aGUgdXNlci5cbiAqL1xuXG5mdW5jdGlvbiBpc0NydXNoZWQoKSB7fVxuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiB0eXBlb2YgaXNDcnVzaGVkLm5hbWUgPT09ICdzdHJpbmcnICYmIGlzQ3J1c2hlZC5uYW1lICE9PSAnaXNDcnVzaGVkJykge1xuICB3YXJuaW5nKCdZb3UgYXJlIGN1cnJlbnRseSB1c2luZyBtaW5pZmllZCBjb2RlIG91dHNpZGUgb2YgTk9ERV9FTlYgPT09IFwicHJvZHVjdGlvblwiLiAnICsgJ1RoaXMgbWVhbnMgdGhhdCB5b3UgYXJlIHJ1bm5pbmcgYSBzbG93ZXIgZGV2ZWxvcG1lbnQgYnVpbGQgb2YgUmVkdXguICcgKyAnWW91IGNhbiB1c2UgbG9vc2UtZW52aWZ5IChodHRwczovL2dpdGh1Yi5jb20vemVydG9zaC9sb29zZS1lbnZpZnkpIGZvciBicm93c2VyaWZ5ICcgKyAnb3Igc2V0dGluZyBtb2RlIHRvIHByb2R1Y3Rpb24gaW4gd2VicGFjayAoaHR0cHM6Ly93ZWJwYWNrLmpzLm9yZy9jb25jZXB0cy9tb2RlLykgJyArICd0byBlbnN1cmUgeW91IGhhdmUgdGhlIGNvcnJlY3QgY29kZSBmb3IgeW91ciBwcm9kdWN0aW9uIGJ1aWxkLicpO1xufVxuXG5leHBvcnQgeyBBY3Rpb25UeXBlcyBhcyBfX0RPX05PVF9VU0VfX0FjdGlvblR5cGVzLCBhcHBseU1pZGRsZXdhcmUsIGJpbmRBY3Rpb25DcmVhdG9ycywgY29tYmluZVJlZHVjZXJzLCBjb21wb3NlLCBjcmVhdGVTdG9yZSB9O1xuIiwiLy8gQ2FjaGUgaW1wbGVtZW50YXRpb24gYmFzZWQgb24gRXJpayBSYXNtdXNzZW4ncyBgbHJ1LW1lbW9pemVgOlxuLy8gaHR0cHM6Ly9naXRodWIuY29tL2VyaWtyYXMvbHJ1LW1lbW9pemVcbnZhciBOT1RfRk9VTkQgPSAnTk9UX0ZPVU5EJztcblxuZnVuY3Rpb24gY3JlYXRlU2luZ2xldG9uQ2FjaGUoZXF1YWxzKSB7XG4gIHZhciBlbnRyeTtcbiAgcmV0dXJuIHtcbiAgICBnZXQ6IGZ1bmN0aW9uIGdldChrZXkpIHtcbiAgICAgIGlmIChlbnRyeSAmJiBlcXVhbHMoZW50cnkua2V5LCBrZXkpKSB7XG4gICAgICAgIHJldHVybiBlbnRyeS52YWx1ZTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIE5PVF9GT1VORDtcbiAgICB9LFxuICAgIHB1dDogZnVuY3Rpb24gcHV0KGtleSwgdmFsdWUpIHtcbiAgICAgIGVudHJ5ID0ge1xuICAgICAgICBrZXk6IGtleSxcbiAgICAgICAgdmFsdWU6IHZhbHVlXG4gICAgICB9O1xuICAgIH0sXG4gICAgZ2V0RW50cmllczogZnVuY3Rpb24gZ2V0RW50cmllcygpIHtcbiAgICAgIHJldHVybiBlbnRyeSA/IFtlbnRyeV0gOiBbXTtcbiAgICB9LFxuICAgIGNsZWFyOiBmdW5jdGlvbiBjbGVhcigpIHtcbiAgICAgIGVudHJ5ID0gdW5kZWZpbmVkO1xuICAgIH1cbiAgfTtcbn1cblxuZnVuY3Rpb24gY3JlYXRlTHJ1Q2FjaGUobWF4U2l6ZSwgZXF1YWxzKSB7XG4gIHZhciBlbnRyaWVzID0gW107XG5cbiAgZnVuY3Rpb24gZ2V0KGtleSkge1xuICAgIHZhciBjYWNoZUluZGV4ID0gZW50cmllcy5maW5kSW5kZXgoZnVuY3Rpb24gKGVudHJ5KSB7XG4gICAgICByZXR1cm4gZXF1YWxzKGtleSwgZW50cnkua2V5KTtcbiAgICB9KTsgLy8gV2UgZm91bmQgYSBjYWNoZWQgZW50cnlcblxuICAgIGlmIChjYWNoZUluZGV4ID4gLTEpIHtcbiAgICAgIHZhciBlbnRyeSA9IGVudHJpZXNbY2FjaGVJbmRleF07IC8vIENhY2hlZCBlbnRyeSBub3QgYXQgdG9wIG9mIGNhY2hlLCBtb3ZlIGl0IHRvIHRoZSB0b3BcblxuICAgICAgaWYgKGNhY2hlSW5kZXggPiAwKSB7XG4gICAgICAgIGVudHJpZXMuc3BsaWNlKGNhY2hlSW5kZXgsIDEpO1xuICAgICAgICBlbnRyaWVzLnVuc2hpZnQoZW50cnkpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gZW50cnkudmFsdWU7XG4gICAgfSAvLyBObyBlbnRyeSBmb3VuZCBpbiBjYWNoZSwgcmV0dXJuIHNlbnRpbmVsXG5cblxuICAgIHJldHVybiBOT1RfRk9VTkQ7XG4gIH1cblxuICBmdW5jdGlvbiBwdXQoa2V5LCB2YWx1ZSkge1xuICAgIGlmIChnZXQoa2V5KSA9PT0gTk9UX0ZPVU5EKSB7XG4gICAgICAvLyBUT0RPIElzIHVuc2hpZnQgc2xvdz9cbiAgICAgIGVudHJpZXMudW5zaGlmdCh7XG4gICAgICAgIGtleToga2V5LFxuICAgICAgICB2YWx1ZTogdmFsdWVcbiAgICAgIH0pO1xuXG4gICAgICBpZiAoZW50cmllcy5sZW5ndGggPiBtYXhTaXplKSB7XG4gICAgICAgIGVudHJpZXMucG9wKCk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gZ2V0RW50cmllcygpIHtcbiAgICByZXR1cm4gZW50cmllcztcbiAgfVxuXG4gIGZ1bmN0aW9uIGNsZWFyKCkge1xuICAgIGVudHJpZXMgPSBbXTtcbiAgfVxuXG4gIHJldHVybiB7XG4gICAgZ2V0OiBnZXQsXG4gICAgcHV0OiBwdXQsXG4gICAgZ2V0RW50cmllczogZ2V0RW50cmllcyxcbiAgICBjbGVhcjogY2xlYXJcbiAgfTtcbn1cblxuZXhwb3J0IHZhciBkZWZhdWx0RXF1YWxpdHlDaGVjayA9IGZ1bmN0aW9uIGRlZmF1bHRFcXVhbGl0eUNoZWNrKGEsIGIpIHtcbiAgcmV0dXJuIGEgPT09IGI7XG59O1xuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZUNhY2hlS2V5Q29tcGFyYXRvcihlcXVhbGl0eUNoZWNrKSB7XG4gIHJldHVybiBmdW5jdGlvbiBhcmVBcmd1bWVudHNTaGFsbG93bHlFcXVhbChwcmV2LCBuZXh0KSB7XG4gICAgaWYgKHByZXYgPT09IG51bGwgfHwgbmV4dCA9PT0gbnVsbCB8fCBwcmV2Lmxlbmd0aCAhPT0gbmV4dC5sZW5ndGgpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9IC8vIERvIHRoaXMgaW4gYSBmb3IgbG9vcCAoYW5kIG5vdCBhIGBmb3JFYWNoYCBvciBhbiBgZXZlcnlgKSBzbyB3ZSBjYW4gZGV0ZXJtaW5lIGVxdWFsaXR5IGFzIGZhc3QgYXMgcG9zc2libGUuXG5cblxuICAgIHZhciBsZW5ndGggPSBwcmV2Lmxlbmd0aDtcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICAgIGlmICghZXF1YWxpdHlDaGVjayhwcmV2W2ldLCBuZXh0W2ldKSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHRydWU7XG4gIH07XG59XG4vLyBkZWZhdWx0TWVtb2l6ZSBub3cgc3VwcG9ydHMgYSBjb25maWd1cmFibGUgY2FjaGUgc2l6ZSB3aXRoIExSVSBiZWhhdmlvcixcbi8vIGFuZCBvcHRpb25hbCBjb21wYXJpc29uIG9mIHRoZSByZXN1bHQgdmFsdWUgd2l0aCBleGlzdGluZyB2YWx1ZXNcbmV4cG9ydCBmdW5jdGlvbiBkZWZhdWx0TWVtb2l6ZShmdW5jLCBlcXVhbGl0eUNoZWNrT3JPcHRpb25zKSB7XG4gIHZhciBwcm92aWRlZE9wdGlvbnMgPSB0eXBlb2YgZXF1YWxpdHlDaGVja09yT3B0aW9ucyA9PT0gJ29iamVjdCcgPyBlcXVhbGl0eUNoZWNrT3JPcHRpb25zIDoge1xuICAgIGVxdWFsaXR5Q2hlY2s6IGVxdWFsaXR5Q2hlY2tPck9wdGlvbnNcbiAgfTtcbiAgdmFyIF9wcm92aWRlZE9wdGlvbnMkZXF1YSA9IHByb3ZpZGVkT3B0aW9ucy5lcXVhbGl0eUNoZWNrLFxuICAgICAgZXF1YWxpdHlDaGVjayA9IF9wcm92aWRlZE9wdGlvbnMkZXF1YSA9PT0gdm9pZCAwID8gZGVmYXVsdEVxdWFsaXR5Q2hlY2sgOiBfcHJvdmlkZWRPcHRpb25zJGVxdWEsXG4gICAgICBfcHJvdmlkZWRPcHRpb25zJG1heFMgPSBwcm92aWRlZE9wdGlvbnMubWF4U2l6ZSxcbiAgICAgIG1heFNpemUgPSBfcHJvdmlkZWRPcHRpb25zJG1heFMgPT09IHZvaWQgMCA/IDEgOiBfcHJvdmlkZWRPcHRpb25zJG1heFMsXG4gICAgICByZXN1bHRFcXVhbGl0eUNoZWNrID0gcHJvdmlkZWRPcHRpb25zLnJlc3VsdEVxdWFsaXR5Q2hlY2s7XG4gIHZhciBjb21wYXJhdG9yID0gY3JlYXRlQ2FjaGVLZXlDb21wYXJhdG9yKGVxdWFsaXR5Q2hlY2spO1xuICB2YXIgY2FjaGUgPSBtYXhTaXplID09PSAxID8gY3JlYXRlU2luZ2xldG9uQ2FjaGUoY29tcGFyYXRvcikgOiBjcmVhdGVMcnVDYWNoZShtYXhTaXplLCBjb21wYXJhdG9yKTsgLy8gd2UgcmVmZXJlbmNlIGFyZ3VtZW50cyBpbnN0ZWFkIG9mIHNwcmVhZGluZyB0aGVtIGZvciBwZXJmb3JtYW5jZSByZWFzb25zXG5cbiAgZnVuY3Rpb24gbWVtb2l6ZWQoKSB7XG4gICAgdmFyIHZhbHVlID0gY2FjaGUuZ2V0KGFyZ3VtZW50cyk7XG5cbiAgICBpZiAodmFsdWUgPT09IE5PVF9GT1VORCkge1xuICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgdmFsdWUgPSBmdW5jLmFwcGx5KG51bGwsIGFyZ3VtZW50cyk7XG5cbiAgICAgIGlmIChyZXN1bHRFcXVhbGl0eUNoZWNrKSB7XG4gICAgICAgIHZhciBlbnRyaWVzID0gY2FjaGUuZ2V0RW50cmllcygpO1xuICAgICAgICB2YXIgbWF0Y2hpbmdFbnRyeSA9IGVudHJpZXMuZmluZChmdW5jdGlvbiAoZW50cnkpIHtcbiAgICAgICAgICByZXR1cm4gcmVzdWx0RXF1YWxpdHlDaGVjayhlbnRyeS52YWx1ZSwgdmFsdWUpO1xuICAgICAgICB9KTtcblxuICAgICAgICBpZiAobWF0Y2hpbmdFbnRyeSkge1xuICAgICAgICAgIHZhbHVlID0gbWF0Y2hpbmdFbnRyeS52YWx1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBjYWNoZS5wdXQoYXJndW1lbnRzLCB2YWx1ZSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHZhbHVlO1xuICB9XG5cbiAgbWVtb2l6ZWQuY2xlYXJDYWNoZSA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gY2FjaGUuY2xlYXIoKTtcbiAgfTtcblxuICByZXR1cm4gbWVtb2l6ZWQ7XG59IiwiaW1wb3J0IHsgZGVmYXVsdE1lbW9pemUsIGRlZmF1bHRFcXVhbGl0eUNoZWNrIH0gZnJvbSAnLi9kZWZhdWx0TWVtb2l6ZSc7XG5leHBvcnQgeyBkZWZhdWx0TWVtb2l6ZSwgZGVmYXVsdEVxdWFsaXR5Q2hlY2sgfTtcblxuZnVuY3Rpb24gZ2V0RGVwZW5kZW5jaWVzKGZ1bmNzKSB7XG4gIHZhciBkZXBlbmRlbmNpZXMgPSBBcnJheS5pc0FycmF5KGZ1bmNzWzBdKSA/IGZ1bmNzWzBdIDogZnVuY3M7XG5cbiAgaWYgKCFkZXBlbmRlbmNpZXMuZXZlcnkoZnVuY3Rpb24gKGRlcCkge1xuICAgIHJldHVybiB0eXBlb2YgZGVwID09PSAnZnVuY3Rpb24nO1xuICB9KSkge1xuICAgIHZhciBkZXBlbmRlbmN5VHlwZXMgPSBkZXBlbmRlbmNpZXMubWFwKGZ1bmN0aW9uIChkZXApIHtcbiAgICAgIHJldHVybiB0eXBlb2YgZGVwID09PSAnZnVuY3Rpb24nID8gXCJmdW5jdGlvbiBcIiArIChkZXAubmFtZSB8fCAndW5uYW1lZCcpICsgXCIoKVwiIDogdHlwZW9mIGRlcDtcbiAgICB9KS5qb2luKCcsICcpO1xuICAgIHRocm93IG5ldyBFcnJvcihcImNyZWF0ZVNlbGVjdG9yIGV4cGVjdHMgYWxsIGlucHV0LXNlbGVjdG9ycyB0byBiZSBmdW5jdGlvbnMsIGJ1dCByZWNlaXZlZCB0aGUgZm9sbG93aW5nIHR5cGVzOiBbXCIgKyBkZXBlbmRlbmN5VHlwZXMgKyBcIl1cIik7XG4gIH1cblxuICByZXR1cm4gZGVwZW5kZW5jaWVzO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlU2VsZWN0b3JDcmVhdG9yKG1lbW9pemUpIHtcbiAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIG1lbW9pemVPcHRpb25zRnJvbUFyZ3MgPSBuZXcgQXJyYXkoX2xlbiA+IDEgPyBfbGVuIC0gMSA6IDApLCBfa2V5ID0gMTsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgIG1lbW9pemVPcHRpb25zRnJvbUFyZ3NbX2tleSAtIDFdID0gYXJndW1lbnRzW19rZXldO1xuICB9XG5cbiAgdmFyIGNyZWF0ZVNlbGVjdG9yID0gZnVuY3Rpb24gY3JlYXRlU2VsZWN0b3IoKSB7XG4gICAgZm9yICh2YXIgX2xlbjIgPSBhcmd1bWVudHMubGVuZ3RoLCBmdW5jcyA9IG5ldyBBcnJheShfbGVuMiksIF9rZXkyID0gMDsgX2tleTIgPCBfbGVuMjsgX2tleTIrKykge1xuICAgICAgZnVuY3NbX2tleTJdID0gYXJndW1lbnRzW19rZXkyXTtcbiAgICB9XG5cbiAgICB2YXIgX3JlY29tcHV0YXRpb25zID0gMDtcblxuICAgIHZhciBfbGFzdFJlc3VsdDsgLy8gRHVlIHRvIHRoZSBpbnRyaWNhY2llcyBvZiByZXN0IHBhcmFtcywgd2UgY2FuJ3QgZG8gYW4gb3B0aW9uYWwgYXJnIGFmdGVyIGAuLi5mdW5jc2AuXG4gICAgLy8gU28sIHN0YXJ0IGJ5IGRlY2xhcmluZyB0aGUgZGVmYXVsdCB2YWx1ZSBoZXJlLlxuICAgIC8vIChBbmQgeWVzLCB0aGUgd29yZHMgJ21lbW9pemUnIGFuZCAnb3B0aW9ucycgYXBwZWFyIHRvbyBtYW55IHRpbWVzIGluIHRoaXMgbmV4dCBzZXF1ZW5jZS4pXG5cblxuICAgIHZhciBkaXJlY3RseVBhc3NlZE9wdGlvbnMgPSB7XG4gICAgICBtZW1vaXplT3B0aW9uczogdW5kZWZpbmVkXG4gICAgfTsgLy8gTm9ybWFsbHksIHRoZSByZXN1bHQgZnVuYyBvciBcIm91dHB1dCBzZWxlY3RvclwiIGlzIHRoZSBsYXN0IGFyZ1xuXG4gICAgdmFyIHJlc3VsdEZ1bmMgPSBmdW5jcy5wb3AoKTsgLy8gSWYgdGhlIHJlc3VsdCBmdW5jIGlzIGFjdHVhbGx5IGFuIF9vYmplY3RfLCBhc3N1bWUgaXQncyBvdXIgb3B0aW9ucyBvYmplY3RcblxuICAgIGlmICh0eXBlb2YgcmVzdWx0RnVuYyA9PT0gJ29iamVjdCcpIHtcbiAgICAgIGRpcmVjdGx5UGFzc2VkT3B0aW9ucyA9IHJlc3VsdEZ1bmM7IC8vIGFuZCBwb3AgdGhlIHJlYWwgcmVzdWx0IGZ1bmMgb2ZmXG5cbiAgICAgIHJlc3VsdEZ1bmMgPSBmdW5jcy5wb3AoKTtcbiAgICB9XG5cbiAgICBpZiAodHlwZW9mIHJlc3VsdEZ1bmMgIT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcImNyZWF0ZVNlbGVjdG9yIGV4cGVjdHMgYW4gb3V0cHV0IGZ1bmN0aW9uIGFmdGVyIHRoZSBpbnB1dHMsIGJ1dCByZWNlaXZlZDogW1wiICsgdHlwZW9mIHJlc3VsdEZ1bmMgKyBcIl1cIik7XG4gICAgfSAvLyBEZXRlcm1pbmUgd2hpY2ggc2V0IG9mIG9wdGlvbnMgd2UncmUgdXNpbmcuIFByZWZlciBvcHRpb25zIHBhc3NlZCBkaXJlY3RseSxcbiAgICAvLyBidXQgZmFsbCBiYWNrIHRvIG9wdGlvbnMgZ2l2ZW4gdG8gY3JlYXRlU2VsZWN0b3JDcmVhdG9yLlxuXG5cbiAgICB2YXIgX2RpcmVjdGx5UGFzc2VkT3B0aW9uID0gZGlyZWN0bHlQYXNzZWRPcHRpb25zLFxuICAgICAgICBfZGlyZWN0bHlQYXNzZWRPcHRpb24yID0gX2RpcmVjdGx5UGFzc2VkT3B0aW9uLm1lbW9pemVPcHRpb25zLFxuICAgICAgICBtZW1vaXplT3B0aW9ucyA9IF9kaXJlY3RseVBhc3NlZE9wdGlvbjIgPT09IHZvaWQgMCA/IG1lbW9pemVPcHRpb25zRnJvbUFyZ3MgOiBfZGlyZWN0bHlQYXNzZWRPcHRpb24yOyAvLyBTaW1wbGlmeWluZyBhc3N1bXB0aW9uOiBpdCdzIHVubGlrZWx5IHRoYXQgdGhlIGZpcnN0IG9wdGlvbnMgYXJnIG9mIHRoZSBwcm92aWRlZCBtZW1vaXplclxuICAgIC8vIGlzIGFuIGFycmF5LiBJbiBtb3N0IGxpYnMgSSd2ZSBsb29rZWQgYXQsIGl0J3MgYW4gZXF1YWxpdHkgZnVuY3Rpb24gb3Igb3B0aW9ucyBvYmplY3QuXG4gICAgLy8gQmFzZWQgb24gdGhhdCwgaWYgYG1lbW9pemVPcHRpb25zYCBfaXNfIGFuIGFycmF5LCB3ZSBhc3N1bWUgaXQncyBhIGZ1bGxcbiAgICAvLyB1c2VyLXByb3ZpZGVkIGFycmF5IG9mIG9wdGlvbnMuIE90aGVyd2lzZSwgaXQgbXVzdCBiZSBqdXN0IHRoZSBfZmlyc3RfIGFyZywgYW5kIHNvXG4gICAgLy8gd2Ugd3JhcCBpdCBpbiBhbiBhcnJheSBzbyB3ZSBjYW4gYXBwbHkgaXQuXG5cbiAgICB2YXIgZmluYWxNZW1vaXplT3B0aW9ucyA9IEFycmF5LmlzQXJyYXkobWVtb2l6ZU9wdGlvbnMpID8gbWVtb2l6ZU9wdGlvbnMgOiBbbWVtb2l6ZU9wdGlvbnNdO1xuICAgIHZhciBkZXBlbmRlbmNpZXMgPSBnZXREZXBlbmRlbmNpZXMoZnVuY3MpO1xuICAgIHZhciBtZW1vaXplZFJlc3VsdEZ1bmMgPSBtZW1vaXplLmFwcGx5KHZvaWQgMCwgW2Z1bmN0aW9uICgpIHtcbiAgICAgIF9yZWNvbXB1dGF0aW9ucysrOyAvLyBhcHBseSBhcmd1bWVudHMgaW5zdGVhZCBvZiBzcHJlYWRpbmcgZm9yIHBlcmZvcm1hbmNlLlxuXG4gICAgICByZXR1cm4gcmVzdWx0RnVuYy5hcHBseShudWxsLCBhcmd1bWVudHMpO1xuICAgIH1dLmNvbmNhdChmaW5hbE1lbW9pemVPcHRpb25zKSk7IC8vIElmIGEgc2VsZWN0b3IgaXMgY2FsbGVkIHdpdGggdGhlIGV4YWN0IHNhbWUgYXJndW1lbnRzIHdlIGRvbid0IG5lZWQgdG8gdHJhdmVyc2Ugb3VyIGRlcGVuZGVuY2llcyBhZ2Fpbi5cblxuICAgIHZhciBzZWxlY3RvciA9IG1lbW9pemUoZnVuY3Rpb24gKCkge1xuICAgICAgdmFyIHBhcmFtcyA9IFtdO1xuICAgICAgdmFyIGxlbmd0aCA9IGRlcGVuZGVuY2llcy5sZW5ndGg7XG5cbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICAgICAgLy8gYXBwbHkgYXJndW1lbnRzIGluc3RlYWQgb2Ygc3ByZWFkaW5nIGFuZCBtdXRhdGUgYSBsb2NhbCBsaXN0IG9mIHBhcmFtcyBmb3IgcGVyZm9ybWFuY2UuXG4gICAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgICAgcGFyYW1zLnB1c2goZGVwZW5kZW5jaWVzW2ldLmFwcGx5KG51bGwsIGFyZ3VtZW50cykpO1xuICAgICAgfSAvLyBhcHBseSBhcmd1bWVudHMgaW5zdGVhZCBvZiBzcHJlYWRpbmcgZm9yIHBlcmZvcm1hbmNlLlxuXG5cbiAgICAgIF9sYXN0UmVzdWx0ID0gbWVtb2l6ZWRSZXN1bHRGdW5jLmFwcGx5KG51bGwsIHBhcmFtcyk7XG4gICAgICByZXR1cm4gX2xhc3RSZXN1bHQ7XG4gICAgfSk7XG4gICAgT2JqZWN0LmFzc2lnbihzZWxlY3Rvciwge1xuICAgICAgcmVzdWx0RnVuYzogcmVzdWx0RnVuYyxcbiAgICAgIG1lbW9pemVkUmVzdWx0RnVuYzogbWVtb2l6ZWRSZXN1bHRGdW5jLFxuICAgICAgZGVwZW5kZW5jaWVzOiBkZXBlbmRlbmNpZXMsXG4gICAgICBsYXN0UmVzdWx0OiBmdW5jdGlvbiBsYXN0UmVzdWx0KCkge1xuICAgICAgICByZXR1cm4gX2xhc3RSZXN1bHQ7XG4gICAgICB9LFxuICAgICAgcmVjb21wdXRhdGlvbnM6IGZ1bmN0aW9uIHJlY29tcHV0YXRpb25zKCkge1xuICAgICAgICByZXR1cm4gX3JlY29tcHV0YXRpb25zO1xuICAgICAgfSxcbiAgICAgIHJlc2V0UmVjb21wdXRhdGlvbnM6IGZ1bmN0aW9uIHJlc2V0UmVjb21wdXRhdGlvbnMoKSB7XG4gICAgICAgIHJldHVybiBfcmVjb21wdXRhdGlvbnMgPSAwO1xuICAgICAgfVxuICAgIH0pO1xuICAgIHJldHVybiBzZWxlY3RvcjtcbiAgfTsgLy8gQHRzLWlnbm9yZVxuXG5cbiAgcmV0dXJuIGNyZWF0ZVNlbGVjdG9yO1xufVxuZXhwb3J0IHZhciBjcmVhdGVTZWxlY3RvciA9IC8qICNfX1BVUkVfXyAqL2NyZWF0ZVNlbGVjdG9yQ3JlYXRvcihkZWZhdWx0TWVtb2l6ZSk7XG4vLyBNYW51YWwgZGVmaW5pdGlvbiBvZiBzdGF0ZSBhbmQgb3V0cHV0IGFyZ3VtZW50c1xuZXhwb3J0IHZhciBjcmVhdGVTdHJ1Y3R1cmVkU2VsZWN0b3IgPSBmdW5jdGlvbiBjcmVhdGVTdHJ1Y3R1cmVkU2VsZWN0b3Ioc2VsZWN0b3JzLCBzZWxlY3RvckNyZWF0b3IpIHtcbiAgaWYgKHNlbGVjdG9yQ3JlYXRvciA9PT0gdm9pZCAwKSB7XG4gICAgc2VsZWN0b3JDcmVhdG9yID0gY3JlYXRlU2VsZWN0b3I7XG4gIH1cblxuICBpZiAodHlwZW9mIHNlbGVjdG9ycyAhPT0gJ29iamVjdCcpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ2NyZWF0ZVN0cnVjdHVyZWRTZWxlY3RvciBleHBlY3RzIGZpcnN0IGFyZ3VtZW50IHRvIGJlIGFuIG9iamVjdCAnICsgKFwid2hlcmUgZWFjaCBwcm9wZXJ0eSBpcyBhIHNlbGVjdG9yLCBpbnN0ZWFkIHJlY2VpdmVkIGEgXCIgKyB0eXBlb2Ygc2VsZWN0b3JzKSk7XG4gIH1cblxuICB2YXIgb2JqZWN0S2V5cyA9IE9iamVjdC5rZXlzKHNlbGVjdG9ycyk7XG4gIHZhciByZXN1bHRTZWxlY3RvciA9IHNlbGVjdG9yQ3JlYXRvciggLy8gQHRzLWlnbm9yZVxuICBvYmplY3RLZXlzLm1hcChmdW5jdGlvbiAoa2V5KSB7XG4gICAgcmV0dXJuIHNlbGVjdG9yc1trZXldO1xuICB9KSwgZnVuY3Rpb24gKCkge1xuICAgIGZvciAodmFyIF9sZW4zID0gYXJndW1lbnRzLmxlbmd0aCwgdmFsdWVzID0gbmV3IEFycmF5KF9sZW4zKSwgX2tleTMgPSAwOyBfa2V5MyA8IF9sZW4zOyBfa2V5MysrKSB7XG4gICAgICB2YWx1ZXNbX2tleTNdID0gYXJndW1lbnRzW19rZXkzXTtcbiAgICB9XG5cbiAgICByZXR1cm4gdmFsdWVzLnJlZHVjZShmdW5jdGlvbiAoY29tcG9zaXRpb24sIHZhbHVlLCBpbmRleCkge1xuICAgICAgY29tcG9zaXRpb25bb2JqZWN0S2V5c1tpbmRleF1dID0gdmFsdWU7XG4gICAgICByZXR1cm4gY29tcG9zaXRpb247XG4gICAgfSwge30pO1xuICB9KTtcbiAgcmV0dXJuIHJlc3VsdFNlbGVjdG9yO1xufTsiLCIvKiogQSBmdW5jdGlvbiB0aGF0IGFjY2VwdHMgYSBwb3RlbnRpYWwgXCJleHRyYSBhcmd1bWVudFwiIHZhbHVlIHRvIGJlIGluamVjdGVkIGxhdGVyLFxyXG4gKiBhbmQgcmV0dXJucyBhbiBpbnN0YW5jZSBvZiB0aGUgdGh1bmsgbWlkZGxld2FyZSB0aGF0IHVzZXMgdGhhdCB2YWx1ZVxyXG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZVRodW5rTWlkZGxld2FyZShleHRyYUFyZ3VtZW50KSB7XG4gIC8vIFN0YW5kYXJkIFJlZHV4IG1pZGRsZXdhcmUgZGVmaW5pdGlvbiBwYXR0ZXJuOlxuICAvLyBTZWU6IGh0dHBzOi8vcmVkdXguanMub3JnL3R1dG9yaWFscy9mdW5kYW1lbnRhbHMvcGFydC00LXN0b3JlI3dyaXRpbmctY3VzdG9tLW1pZGRsZXdhcmVcbiAgdmFyIG1pZGRsZXdhcmUgPSBmdW5jdGlvbiBtaWRkbGV3YXJlKF9yZWYpIHtcbiAgICB2YXIgZGlzcGF0Y2ggPSBfcmVmLmRpc3BhdGNoLFxuICAgICAgICBnZXRTdGF0ZSA9IF9yZWYuZ2V0U3RhdGU7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChuZXh0KSB7XG4gICAgICByZXR1cm4gZnVuY3Rpb24gKGFjdGlvbikge1xuICAgICAgICAvLyBUaGUgdGh1bmsgbWlkZGxld2FyZSBsb29rcyBmb3IgYW55IGZ1bmN0aW9ucyB0aGF0IHdlcmUgcGFzc2VkIHRvIGBzdG9yZS5kaXNwYXRjaGAuXG4gICAgICAgIC8vIElmIHRoaXMgXCJhY3Rpb25cIiBpcyByZWFsbHkgYSBmdW5jdGlvbiwgY2FsbCBpdCBhbmQgcmV0dXJuIHRoZSByZXN1bHQuXG4gICAgICAgIGlmICh0eXBlb2YgYWN0aW9uID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgLy8gSW5qZWN0IHRoZSBzdG9yZSdzIGBkaXNwYXRjaGAgYW5kIGBnZXRTdGF0ZWAgbWV0aG9kcywgYXMgd2VsbCBhcyBhbnkgXCJleHRyYSBhcmdcIlxuICAgICAgICAgIHJldHVybiBhY3Rpb24oZGlzcGF0Y2gsIGdldFN0YXRlLCBleHRyYUFyZ3VtZW50KTtcbiAgICAgICAgfSAvLyBPdGhlcndpc2UsIHBhc3MgdGhlIGFjdGlvbiBkb3duIHRoZSBtaWRkbGV3YXJlIGNoYWluIGFzIHVzdWFsXG5cblxuICAgICAgICByZXR1cm4gbmV4dChhY3Rpb24pO1xuICAgICAgfTtcbiAgICB9O1xuICB9O1xuXG4gIHJldHVybiBtaWRkbGV3YXJlO1xufVxuXG52YXIgdGh1bmsgPSBjcmVhdGVUaHVua01pZGRsZXdhcmUoKTsgLy8gQXR0YWNoIHRoZSBmYWN0b3J5IGZ1bmN0aW9uIHNvIHVzZXJzIGNhbiBjcmVhdGUgYSBjdXN0b21pemVkIHZlcnNpb25cbi8vIHdpdGggd2hhdGV2ZXIgXCJleHRyYSBhcmdcIiB0aGV5IHdhbnQgdG8gaW5qZWN0IGludG8gdGhlaXIgdGh1bmtzXG5cbnRodW5rLndpdGhFeHRyYUFyZ3VtZW50ID0gY3JlYXRlVGh1bmtNaWRkbGV3YXJlO1xuZXhwb3J0IGRlZmF1bHQgdGh1bms7IiwidmFyIF9fZXh0ZW5kcyA9ICh0aGlzICYmIHRoaXMuX19leHRlbmRzKSB8fCAoZnVuY3Rpb24gKCkge1xyXG4gICAgdmFyIGV4dGVuZFN0YXRpY3MgPSBmdW5jdGlvbiAoZCwgYikge1xyXG4gICAgICAgIGV4dGVuZFN0YXRpY3MgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgfHxcclxuICAgICAgICAgICAgKHsgX19wcm90b19fOiBbXSB9IGluc3RhbmNlb2YgQXJyYXkgJiYgZnVuY3Rpb24gKGQsIGIpIHsgZC5fX3Byb3RvX18gPSBiOyB9KSB8fFxyXG4gICAgICAgICAgICBmdW5jdGlvbiAoZCwgYikgeyBmb3IgKHZhciBwIGluIGIpIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoYiwgcCkpIGRbcF0gPSBiW3BdOyB9O1xyXG4gICAgICAgIHJldHVybiBleHRlbmRTdGF0aWNzKGQsIGIpO1xyXG4gICAgfTtcclxuICAgIHJldHVybiBmdW5jdGlvbiAoZCwgYikge1xyXG4gICAgICAgIGlmICh0eXBlb2YgYiAhPT0gXCJmdW5jdGlvblwiICYmIGIgIT09IG51bGwpXHJcbiAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJDbGFzcyBleHRlbmRzIHZhbHVlIFwiICsgU3RyaW5nKGIpICsgXCIgaXMgbm90IGEgY29uc3RydWN0b3Igb3IgbnVsbFwiKTtcclxuICAgICAgICBleHRlbmRTdGF0aWNzKGQsIGIpO1xyXG4gICAgICAgIGZ1bmN0aW9uIF9fKCkgeyB0aGlzLmNvbnN0cnVjdG9yID0gZDsgfVxyXG4gICAgICAgIGQucHJvdG90eXBlID0gYiA9PT0gbnVsbCA/IE9iamVjdC5jcmVhdGUoYikgOiAoX18ucHJvdG90eXBlID0gYi5wcm90b3R5cGUsIG5ldyBfXygpKTtcclxuICAgIH07XHJcbn0pKCk7XHJcbnZhciBfX2dlbmVyYXRvciA9ICh0aGlzICYmIHRoaXMuX19nZW5lcmF0b3IpIHx8IGZ1bmN0aW9uICh0aGlzQXJnLCBib2R5KSB7XHJcbiAgICB2YXIgXyA9IHsgbGFiZWw6IDAsIHNlbnQ6IGZ1bmN0aW9uKCkgeyBpZiAodFswXSAmIDEpIHRocm93IHRbMV07IHJldHVybiB0WzFdOyB9LCB0cnlzOiBbXSwgb3BzOiBbXSB9LCBmLCB5LCB0LCBnO1xyXG4gICAgcmV0dXJuIGcgPSB7IG5leHQ6IHZlcmIoMCksIFwidGhyb3dcIjogdmVyYigxKSwgXCJyZXR1cm5cIjogdmVyYigyKSB9LCB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgKGdbU3ltYm9sLml0ZXJhdG9yXSA9IGZ1bmN0aW9uKCkgeyByZXR1cm4gdGhpczsgfSksIGc7XHJcbiAgICBmdW5jdGlvbiB2ZXJiKG4pIHsgcmV0dXJuIGZ1bmN0aW9uICh2KSB7IHJldHVybiBzdGVwKFtuLCB2XSk7IH07IH1cclxuICAgIGZ1bmN0aW9uIHN0ZXAob3ApIHtcclxuICAgICAgICBpZiAoZikgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkdlbmVyYXRvciBpcyBhbHJlYWR5IGV4ZWN1dGluZy5cIik7XHJcbiAgICAgICAgd2hpbGUgKF8pIHRyeSB7XHJcbiAgICAgICAgICAgIGlmIChmID0gMSwgeSAmJiAodCA9IG9wWzBdICYgMiA/IHlbXCJyZXR1cm5cIl0gOiBvcFswXSA/IHlbXCJ0aHJvd1wiXSB8fCAoKHQgPSB5W1wicmV0dXJuXCJdKSAmJiB0LmNhbGwoeSksIDApIDogeS5uZXh0KSAmJiAhKHQgPSB0LmNhbGwoeSwgb3BbMV0pKS5kb25lKSByZXR1cm4gdDtcclxuICAgICAgICAgICAgaWYgKHkgPSAwLCB0KSBvcCA9IFtvcFswXSAmIDIsIHQudmFsdWVdO1xyXG4gICAgICAgICAgICBzd2l0Y2ggKG9wWzBdKSB7XHJcbiAgICAgICAgICAgICAgICBjYXNlIDA6IGNhc2UgMTogdCA9IG9wOyBicmVhaztcclxuICAgICAgICAgICAgICAgIGNhc2UgNDogXy5sYWJlbCsrOyByZXR1cm4geyB2YWx1ZTogb3BbMV0sIGRvbmU6IGZhbHNlIH07XHJcbiAgICAgICAgICAgICAgICBjYXNlIDU6IF8ubGFiZWwrKzsgeSA9IG9wWzFdOyBvcCA9IFswXTsgY29udGludWU7XHJcbiAgICAgICAgICAgICAgICBjYXNlIDc6IG9wID0gXy5vcHMucG9wKCk7IF8udHJ5cy5wb3AoKTsgY29udGludWU7XHJcbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgICAgICAgICAgIGlmICghKHQgPSBfLnRyeXMsIHQgPSB0Lmxlbmd0aCA+IDAgJiYgdFt0Lmxlbmd0aCAtIDFdKSAmJiAob3BbMF0gPT09IDYgfHwgb3BbMF0gPT09IDIpKSB7IF8gPSAwOyBjb250aW51ZTsgfVxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChvcFswXSA9PT0gMyAmJiAoIXQgfHwgKG9wWzFdID4gdFswXSAmJiBvcFsxXSA8IHRbM10pKSkgeyBfLmxhYmVsID0gb3BbMV07IGJyZWFrOyB9XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKG9wWzBdID09PSA2ICYmIF8ubGFiZWwgPCB0WzFdKSB7IF8ubGFiZWwgPSB0WzFdOyB0ID0gb3A7IGJyZWFrOyB9XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHQgJiYgXy5sYWJlbCA8IHRbMl0pIHsgXy5sYWJlbCA9IHRbMl07IF8ub3BzLnB1c2gob3ApOyBicmVhazsgfVxyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0WzJdKSBfLm9wcy5wb3AoKTtcclxuICAgICAgICAgICAgICAgICAgICBfLnRyeXMucG9wKCk7IGNvbnRpbnVlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIG9wID0gYm9keS5jYWxsKHRoaXNBcmcsIF8pO1xyXG4gICAgICAgIH0gY2F0Y2ggKGUpIHsgb3AgPSBbNiwgZV07IHkgPSAwOyB9IGZpbmFsbHkgeyBmID0gdCA9IDA7IH1cclxuICAgICAgICBpZiAob3BbMF0gJiA1KSB0aHJvdyBvcFsxXTsgcmV0dXJuIHsgdmFsdWU6IG9wWzBdID8gb3BbMV0gOiB2b2lkIDAsIGRvbmU6IHRydWUgfTtcclxuICAgIH1cclxufTtcclxudmFyIF9fc3ByZWFkQXJyYXkgPSAodGhpcyAmJiB0aGlzLl9fc3ByZWFkQXJyYXkpIHx8IGZ1bmN0aW9uICh0bywgZnJvbSkge1xyXG4gICAgZm9yICh2YXIgaSA9IDAsIGlsID0gZnJvbS5sZW5ndGgsIGogPSB0by5sZW5ndGg7IGkgPCBpbDsgaSsrLCBqKyspXHJcbiAgICAgICAgdG9bal0gPSBmcm9tW2ldO1xyXG4gICAgcmV0dXJuIHRvO1xyXG59O1xyXG52YXIgX19kZWZQcm9wID0gT2JqZWN0LmRlZmluZVByb3BlcnR5O1xyXG52YXIgX19kZWZQcm9wcyA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzO1xyXG52YXIgX19nZXRPd25Qcm9wRGVzY3MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycztcclxudmFyIF9fZ2V0T3duUHJvcFN5bWJvbHMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzO1xyXG52YXIgX19oYXNPd25Qcm9wID0gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eTtcclxudmFyIF9fcHJvcElzRW51bSA9IE9iamVjdC5wcm90b3R5cGUucHJvcGVydHlJc0VudW1lcmFibGU7XHJcbnZhciBfX2RlZk5vcm1hbFByb3AgPSBmdW5jdGlvbiAob2JqLCBrZXksIHZhbHVlKSB7IHJldHVybiBrZXkgaW4gb2JqID8gX19kZWZQcm9wKG9iaiwga2V5LCB7IGVudW1lcmFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSwgd3JpdGFibGU6IHRydWUsIHZhbHVlOiB2YWx1ZSB9KSA6IG9ialtrZXldID0gdmFsdWU7IH07XHJcbnZhciBfX3NwcmVhZFZhbHVlcyA9IGZ1bmN0aW9uIChhLCBiKSB7XHJcbiAgICBmb3IgKHZhciBwcm9wIGluIGIgfHwgKGIgPSB7fSkpXHJcbiAgICAgICAgaWYgKF9faGFzT3duUHJvcC5jYWxsKGIsIHByb3ApKVxyXG4gICAgICAgICAgICBfX2RlZk5vcm1hbFByb3AoYSwgcHJvcCwgYltwcm9wXSk7XHJcbiAgICBpZiAoX19nZXRPd25Qcm9wU3ltYm9scylcclxuICAgICAgICBmb3IgKHZhciBfaSA9IDAsIF9jID0gX19nZXRPd25Qcm9wU3ltYm9scyhiKTsgX2kgPCBfYy5sZW5ndGg7IF9pKyspIHtcclxuICAgICAgICAgICAgdmFyIHByb3AgPSBfY1tfaV07XHJcbiAgICAgICAgICAgIGlmIChfX3Byb3BJc0VudW0uY2FsbChiLCBwcm9wKSlcclxuICAgICAgICAgICAgICAgIF9fZGVmTm9ybWFsUHJvcChhLCBwcm9wLCBiW3Byb3BdKTtcclxuICAgICAgICB9XHJcbiAgICByZXR1cm4gYTtcclxufTtcclxudmFyIF9fc3ByZWFkUHJvcHMgPSBmdW5jdGlvbiAoYSwgYikgeyByZXR1cm4gX19kZWZQcm9wcyhhLCBfX2dldE93blByb3BEZXNjcyhiKSk7IH07XHJcbnZhciBfX2FzeW5jID0gZnVuY3Rpb24gKF9fdGhpcywgX19hcmd1bWVudHMsIGdlbmVyYXRvcikge1xyXG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcclxuICAgICAgICB2YXIgZnVsZmlsbGVkID0gZnVuY3Rpb24gKHZhbHVlKSB7XHJcbiAgICAgICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgICAgICBzdGVwKGdlbmVyYXRvci5uZXh0KHZhbHVlKSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgY2F0Y2ggKGUpIHtcclxuICAgICAgICAgICAgICAgIHJlamVjdChlKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH07XHJcbiAgICAgICAgdmFyIHJlamVjdGVkID0gZnVuY3Rpb24gKHZhbHVlKSB7XHJcbiAgICAgICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgICAgICBzdGVwKGdlbmVyYXRvci50aHJvdyh2YWx1ZSkpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGNhdGNoIChlKSB7XHJcbiAgICAgICAgICAgICAgICByZWplY3QoZSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9O1xyXG4gICAgICAgIHZhciBzdGVwID0gZnVuY3Rpb24gKHgpIHsgcmV0dXJuIHguZG9uZSA/IHJlc29sdmUoeC52YWx1ZSkgOiBQcm9taXNlLnJlc29sdmUoeC52YWx1ZSkudGhlbihmdWxmaWxsZWQsIHJlamVjdGVkKTsgfTtcclxuICAgICAgICBzdGVwKChnZW5lcmF0b3IgPSBnZW5lcmF0b3IuYXBwbHkoX190aGlzLCBfX2FyZ3VtZW50cykpLm5leHQoKSk7XHJcbiAgICB9KTtcclxufTtcclxuLy8gc3JjL2luZGV4LnRzXHJcbmltcG9ydCB7IGVuYWJsZUVTNSB9IGZyb20gXCJpbW1lclwiO1xyXG5leHBvcnQgKiBmcm9tIFwicmVkdXhcIjtcclxuaW1wb3J0IHsgZGVmYXVsdCBhcyBkZWZhdWx0MiwgY3VycmVudCBhcyBjdXJyZW50MiwgZnJlZXplLCBvcmlnaW5hbCwgaXNEcmFmdCBhcyBpc0RyYWZ0NCB9IGZyb20gXCJpbW1lclwiO1xyXG5pbXBvcnQgeyBjcmVhdGVTZWxlY3RvciBhcyBjcmVhdGVTZWxlY3RvcjIgfSBmcm9tIFwicmVzZWxlY3RcIjtcclxuLy8gc3JjL2NyZWF0ZURyYWZ0U2FmZVNlbGVjdG9yLnRzXHJcbmltcG9ydCB7IGN1cnJlbnQsIGlzRHJhZnQgfSBmcm9tIFwiaW1tZXJcIjtcclxuaW1wb3J0IHsgY3JlYXRlU2VsZWN0b3IgfSBmcm9tIFwicmVzZWxlY3RcIjtcclxudmFyIGNyZWF0ZURyYWZ0U2FmZVNlbGVjdG9yID0gZnVuY3Rpb24gKCkge1xyXG4gICAgdmFyIGFyZ3MgPSBbXTtcclxuICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBhcmd1bWVudHMubGVuZ3RoOyBfaSsrKSB7XHJcbiAgICAgICAgYXJnc1tfaV0gPSBhcmd1bWVudHNbX2ldO1xyXG4gICAgfVxyXG4gICAgdmFyIHNlbGVjdG9yID0gY3JlYXRlU2VsZWN0b3IuYXBwbHkodm9pZCAwLCBhcmdzKTtcclxuICAgIHZhciB3cmFwcGVkU2VsZWN0b3IgPSBmdW5jdGlvbiAodmFsdWUpIHtcclxuICAgICAgICB2YXIgcmVzdCA9IFtdO1xyXG4gICAgICAgIGZvciAodmFyIF9pID0gMTsgX2kgPCBhcmd1bWVudHMubGVuZ3RoOyBfaSsrKSB7XHJcbiAgICAgICAgICAgIHJlc3RbX2kgLSAxXSA9IGFyZ3VtZW50c1tfaV07XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBzZWxlY3Rvci5hcHBseSh2b2lkIDAsIF9fc3ByZWFkQXJyYXkoW2lzRHJhZnQodmFsdWUpID8gY3VycmVudCh2YWx1ZSkgOiB2YWx1ZV0sIHJlc3QpKTtcclxuICAgIH07XHJcbiAgICByZXR1cm4gd3JhcHBlZFNlbGVjdG9yO1xyXG59O1xyXG4vLyBzcmMvY29uZmlndXJlU3RvcmUudHNcclxuaW1wb3J0IHsgY3JlYXRlU3RvcmUsIGNvbXBvc2UgYXMgY29tcG9zZTIsIGFwcGx5TWlkZGxld2FyZSwgY29tYmluZVJlZHVjZXJzIH0gZnJvbSBcInJlZHV4XCI7XHJcbi8vIHNyYy9kZXZ0b29sc0V4dGVuc2lvbi50c1xyXG5pbXBvcnQgeyBjb21wb3NlIH0gZnJvbSBcInJlZHV4XCI7XHJcbnZhciBjb21wb3NlV2l0aERldlRvb2xzID0gdHlwZW9mIHdpbmRvdyAhPT0gXCJ1bmRlZmluZWRcIiAmJiB3aW5kb3cuX19SRURVWF9ERVZUT09MU19FWFRFTlNJT05fQ09NUE9TRV9fID8gd2luZG93Ll9fUkVEVVhfREVWVE9PTFNfRVhURU5TSU9OX0NPTVBPU0VfXyA6IGZ1bmN0aW9uICgpIHtcclxuICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID09PSAwKVxyXG4gICAgICAgIHJldHVybiB2b2lkIDA7XHJcbiAgICBpZiAodHlwZW9mIGFyZ3VtZW50c1swXSA9PT0gXCJvYmplY3RcIilcclxuICAgICAgICByZXR1cm4gY29tcG9zZTtcclxuICAgIHJldHVybiBjb21wb3NlLmFwcGx5KG51bGwsIGFyZ3VtZW50cyk7XHJcbn07XHJcbnZhciBkZXZUb29sc0VuaGFuY2VyID0gdHlwZW9mIHdpbmRvdyAhPT0gXCJ1bmRlZmluZWRcIiAmJiB3aW5kb3cuX19SRURVWF9ERVZUT09MU19FWFRFTlNJT05fXyA/IHdpbmRvdy5fX1JFRFVYX0RFVlRPT0xTX0VYVEVOU0lPTl9fIDogZnVuY3Rpb24gKCkge1xyXG4gICAgcmV0dXJuIGZ1bmN0aW9uIChub29wMikge1xyXG4gICAgICAgIHJldHVybiBub29wMjtcclxuICAgIH07XHJcbn07XHJcbi8vIHNyYy9pc1BsYWluT2JqZWN0LnRzXHJcbmZ1bmN0aW9uIGlzUGxhaW5PYmplY3QodmFsdWUpIHtcclxuICAgIGlmICh0eXBlb2YgdmFsdWUgIT09IFwib2JqZWN0XCIgfHwgdmFsdWUgPT09IG51bGwpXHJcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgdmFyIHByb3RvID0gT2JqZWN0LmdldFByb3RvdHlwZU9mKHZhbHVlKTtcclxuICAgIGlmIChwcm90byA9PT0gbnVsbClcclxuICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgIHZhciBiYXNlUHJvdG8gPSBwcm90bztcclxuICAgIHdoaWxlIChPYmplY3QuZ2V0UHJvdG90eXBlT2YoYmFzZVByb3RvKSAhPT0gbnVsbCkge1xyXG4gICAgICAgIGJhc2VQcm90byA9IE9iamVjdC5nZXRQcm90b3R5cGVPZihiYXNlUHJvdG8pO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHByb3RvID09PSBiYXNlUHJvdG87XHJcbn1cclxuLy8gc3JjL2dldERlZmF1bHRNaWRkbGV3YXJlLnRzXHJcbmltcG9ydCB0aHVua01pZGRsZXdhcmUgZnJvbSBcInJlZHV4LXRodW5rXCI7XHJcbi8vIHNyYy91dGlscy50c1xyXG5mdW5jdGlvbiBnZXRUaW1lTWVhc3VyZVV0aWxzKG1heERlbGF5LCBmbk5hbWUpIHtcclxuICAgIHZhciBlbGFwc2VkID0gMDtcclxuICAgIHJldHVybiB7XHJcbiAgICAgICAgbWVhc3VyZVRpbWU6IGZ1bmN0aW9uIChmbikge1xyXG4gICAgICAgICAgICB2YXIgc3RhcnRlZCA9IERhdGUubm93KCk7XHJcbiAgICAgICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gZm4oKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBmaW5hbGx5IHtcclxuICAgICAgICAgICAgICAgIHZhciBmaW5pc2hlZCA9IERhdGUubm93KCk7XHJcbiAgICAgICAgICAgICAgICBlbGFwc2VkICs9IGZpbmlzaGVkIC0gc3RhcnRlZDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgd2FybklmRXhjZWVkZWQ6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgaWYgKGVsYXBzZWQgPiBtYXhEZWxheSkge1xyXG4gICAgICAgICAgICAgICAgY29uc29sZS53YXJuKGZuTmFtZSArIFwiIHRvb2sgXCIgKyBlbGFwc2VkICsgXCJtcywgd2hpY2ggaXMgbW9yZSB0aGFuIHRoZSB3YXJuaW5nIHRocmVzaG9sZCBvZiBcIiArIG1heERlbGF5ICsgXCJtcy4gXFxuSWYgeW91ciBzdGF0ZSBvciBhY3Rpb25zIGFyZSB2ZXJ5IGxhcmdlLCB5b3UgbWF5IHdhbnQgdG8gZGlzYWJsZSB0aGUgbWlkZGxld2FyZSBhcyBpdCBtaWdodCBjYXVzZSB0b28gbXVjaCBvZiBhIHNsb3dkb3duIGluIGRldmVsb3BtZW50IG1vZGUuIFNlZSBodHRwczovL3JlZHV4LXRvb2xraXQuanMub3JnL2FwaS9nZXREZWZhdWx0TWlkZGxld2FyZSBmb3IgaW5zdHJ1Y3Rpb25zLlxcbkl0IGlzIGRpc2FibGVkIGluIHByb2R1Y3Rpb24gYnVpbGRzLCBzbyB5b3UgZG9uJ3QgbmVlZCB0byB3b3JyeSBhYm91dCB0aGF0LlwiKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH07XHJcbn1cclxudmFyIE1pZGRsZXdhcmVBcnJheSA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcclxuICAgIF9fZXh0ZW5kcyhNaWRkbGV3YXJlQXJyYXksIF9zdXBlcik7XHJcbiAgICBmdW5jdGlvbiBNaWRkbGV3YXJlQXJyYXkoKSB7XHJcbiAgICAgICAgdmFyIGFyZ3MgPSBbXTtcclxuICAgICAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgYXJndW1lbnRzLmxlbmd0aDsgX2krKykge1xyXG4gICAgICAgICAgICBhcmdzW19pXSA9IGFyZ3VtZW50c1tfaV07XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHZhciBfdGhpcyA9IF9zdXBlci5hcHBseSh0aGlzLCBhcmdzKSB8fCB0aGlzO1xyXG4gICAgICAgIE9iamVjdC5zZXRQcm90b3R5cGVPZihfdGhpcywgTWlkZGxld2FyZUFycmF5LnByb3RvdHlwZSk7XHJcbiAgICAgICAgcmV0dXJuIF90aGlzO1xyXG4gICAgfVxyXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KE1pZGRsZXdhcmVBcnJheSwgU3ltYm9sLnNwZWNpZXMsIHtcclxuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgcmV0dXJuIE1pZGRsZXdhcmVBcnJheTtcclxuICAgICAgICB9LFxyXG4gICAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxyXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxyXG4gICAgfSk7XHJcbiAgICBNaWRkbGV3YXJlQXJyYXkucHJvdG90eXBlLmNvbmNhdCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB2YXIgYXJyID0gW107XHJcbiAgICAgICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IGFyZ3VtZW50cy5sZW5ndGg7IF9pKyspIHtcclxuICAgICAgICAgICAgYXJyW19pXSA9IGFyZ3VtZW50c1tfaV07XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBfc3VwZXIucHJvdG90eXBlLmNvbmNhdC5hcHBseSh0aGlzLCBhcnIpO1xyXG4gICAgfTtcclxuICAgIE1pZGRsZXdhcmVBcnJheS5wcm90b3R5cGUucHJlcGVuZCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB2YXIgYXJyID0gW107XHJcbiAgICAgICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IGFyZ3VtZW50cy5sZW5ndGg7IF9pKyspIHtcclxuICAgICAgICAgICAgYXJyW19pXSA9IGFyZ3VtZW50c1tfaV07XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChhcnIubGVuZ3RoID09PSAxICYmIEFycmF5LmlzQXJyYXkoYXJyWzBdKSkge1xyXG4gICAgICAgICAgICByZXR1cm4gbmV3IChNaWRkbGV3YXJlQXJyYXkuYmluZC5hcHBseShNaWRkbGV3YXJlQXJyYXksIF9fc3ByZWFkQXJyYXkoW3ZvaWQgMF0sIGFyclswXS5jb25jYXQodGhpcykpKSkoKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIG5ldyAoTWlkZGxld2FyZUFycmF5LmJpbmQuYXBwbHkoTWlkZGxld2FyZUFycmF5LCBfX3NwcmVhZEFycmF5KFt2b2lkIDBdLCBhcnIuY29uY2F0KHRoaXMpKSkpKCk7XHJcbiAgICB9O1xyXG4gICAgcmV0dXJuIE1pZGRsZXdhcmVBcnJheTtcclxufShBcnJheSkpO1xyXG4vLyBzcmMvaW1tdXRhYmxlU3RhdGVJbnZhcmlhbnRNaWRkbGV3YXJlLnRzXHJcbnZhciBpc1Byb2R1Y3Rpb24gPSBwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gXCJwcm9kdWN0aW9uXCI7XHJcbnZhciBwcmVmaXggPSBcIkludmFyaWFudCBmYWlsZWRcIjtcclxuZnVuY3Rpb24gaW52YXJpYW50KGNvbmRpdGlvbiwgbWVzc2FnZSkge1xyXG4gICAgaWYgKGNvbmRpdGlvbikge1xyXG4gICAgICAgIHJldHVybjtcclxuICAgIH1cclxuICAgIGlmIChpc1Byb2R1Y3Rpb24pIHtcclxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IocHJlZml4KTtcclxuICAgIH1cclxuICAgIHRocm93IG5ldyBFcnJvcihwcmVmaXggKyBcIjogXCIgKyAobWVzc2FnZSB8fCBcIlwiKSk7XHJcbn1cclxuZnVuY3Rpb24gc3RyaW5naWZ5KG9iaiwgc2VyaWFsaXplciwgaW5kZW50LCBkZWN5Y2xlcikge1xyXG4gICAgcmV0dXJuIEpTT04uc3RyaW5naWZ5KG9iaiwgZ2V0U2VyaWFsaXplKHNlcmlhbGl6ZXIsIGRlY3ljbGVyKSwgaW5kZW50KTtcclxufVxyXG5mdW5jdGlvbiBnZXRTZXJpYWxpemUoc2VyaWFsaXplciwgZGVjeWNsZXIpIHtcclxuICAgIHZhciBzdGFjayA9IFtdLCBrZXlzID0gW107XHJcbiAgICBpZiAoIWRlY3ljbGVyKVxyXG4gICAgICAgIGRlY3ljbGVyID0gZnVuY3Rpb24gKF8sIHZhbHVlKSB7XHJcbiAgICAgICAgICAgIGlmIChzdGFja1swXSA9PT0gdmFsdWUpXHJcbiAgICAgICAgICAgICAgICByZXR1cm4gXCJbQ2lyY3VsYXIgfl1cIjtcclxuICAgICAgICAgICAgcmV0dXJuIFwiW0NpcmN1bGFyIH4uXCIgKyBrZXlzLnNsaWNlKDAsIHN0YWNrLmluZGV4T2YodmFsdWUpKS5qb2luKFwiLlwiKSArIFwiXVwiO1xyXG4gICAgICAgIH07XHJcbiAgICByZXR1cm4gZnVuY3Rpb24gKGtleSwgdmFsdWUpIHtcclxuICAgICAgICBpZiAoc3RhY2subGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICB2YXIgdGhpc1BvcyA9IHN0YWNrLmluZGV4T2YodGhpcyk7XHJcbiAgICAgICAgICAgIH50aGlzUG9zID8gc3RhY2suc3BsaWNlKHRoaXNQb3MgKyAxKSA6IHN0YWNrLnB1c2godGhpcyk7XHJcbiAgICAgICAgICAgIH50aGlzUG9zID8ga2V5cy5zcGxpY2UodGhpc1BvcywgSW5maW5pdHksIGtleSkgOiBrZXlzLnB1c2goa2V5KTtcclxuICAgICAgICAgICAgaWYgKH5zdGFjay5pbmRleE9mKHZhbHVlKSlcclxuICAgICAgICAgICAgICAgIHZhbHVlID0gZGVjeWNsZXIuY2FsbCh0aGlzLCBrZXksIHZhbHVlKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZVxyXG4gICAgICAgICAgICBzdGFjay5wdXNoKHZhbHVlKTtcclxuICAgICAgICByZXR1cm4gc2VyaWFsaXplciA9PSBudWxsID8gdmFsdWUgOiBzZXJpYWxpemVyLmNhbGwodGhpcywga2V5LCB2YWx1ZSk7XHJcbiAgICB9O1xyXG59XHJcbmZ1bmN0aW9uIGlzSW1tdXRhYmxlRGVmYXVsdCh2YWx1ZSkge1xyXG4gICAgcmV0dXJuIHR5cGVvZiB2YWx1ZSAhPT0gXCJvYmplY3RcIiB8fCB2YWx1ZSA9PT0gbnVsbCB8fCB0eXBlb2YgdmFsdWUgPT09IFwidW5kZWZpbmVkXCIgfHwgT2JqZWN0LmlzRnJvemVuKHZhbHVlKTtcclxufVxyXG5mdW5jdGlvbiB0cmFja0Zvck11dGF0aW9ucyhpc0ltbXV0YWJsZSwgaWdub3JlUGF0aHMsIG9iaikge1xyXG4gICAgdmFyIHRyYWNrZWRQcm9wZXJ0aWVzID0gdHJhY2tQcm9wZXJ0aWVzKGlzSW1tdXRhYmxlLCBpZ25vcmVQYXRocywgb2JqKTtcclxuICAgIHJldHVybiB7XHJcbiAgICAgICAgZGV0ZWN0TXV0YXRpb25zOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBkZXRlY3RNdXRhdGlvbnMoaXNJbW11dGFibGUsIGlnbm9yZVBhdGhzLCB0cmFja2VkUHJvcGVydGllcywgb2JqKTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG59XHJcbmZ1bmN0aW9uIHRyYWNrUHJvcGVydGllcyhpc0ltbXV0YWJsZSwgaWdub3JlUGF0aHMsIG9iaiwgcGF0aCkge1xyXG4gICAgaWYgKGlnbm9yZVBhdGhzID09PSB2b2lkIDApIHsgaWdub3JlUGF0aHMgPSBbXTsgfVxyXG4gICAgaWYgKHBhdGggPT09IHZvaWQgMCkgeyBwYXRoID0gXCJcIjsgfVxyXG4gICAgdmFyIHRyYWNrZWQgPSB7IHZhbHVlOiBvYmogfTtcclxuICAgIGlmICghaXNJbW11dGFibGUob2JqKSkge1xyXG4gICAgICAgIHRyYWNrZWQuY2hpbGRyZW4gPSB7fTtcclxuICAgICAgICBmb3IgKHZhciBrZXkgaW4gb2JqKSB7XHJcbiAgICAgICAgICAgIHZhciBjaGlsZFBhdGggPSBwYXRoID8gcGF0aCArIFwiLlwiICsga2V5IDoga2V5O1xyXG4gICAgICAgICAgICBpZiAoaWdub3JlUGF0aHMubGVuZ3RoICYmIGlnbm9yZVBhdGhzLmluZGV4T2YoY2hpbGRQYXRoKSAhPT0gLTEpIHtcclxuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHRyYWNrZWQuY2hpbGRyZW5ba2V5XSA9IHRyYWNrUHJvcGVydGllcyhpc0ltbXV0YWJsZSwgaWdub3JlUGF0aHMsIG9ialtrZXldLCBjaGlsZFBhdGgpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIHJldHVybiB0cmFja2VkO1xyXG59XHJcbmZ1bmN0aW9uIGRldGVjdE11dGF0aW9ucyhpc0ltbXV0YWJsZSwgaWdub3JlUGF0aHMsIHRyYWNrZWRQcm9wZXJ0eSwgb2JqLCBzYW1lUGFyZW50UmVmLCBwYXRoKSB7XHJcbiAgICBpZiAoaWdub3JlUGF0aHMgPT09IHZvaWQgMCkgeyBpZ25vcmVQYXRocyA9IFtdOyB9XHJcbiAgICBpZiAoc2FtZVBhcmVudFJlZiA9PT0gdm9pZCAwKSB7IHNhbWVQYXJlbnRSZWYgPSBmYWxzZTsgfVxyXG4gICAgaWYgKHBhdGggPT09IHZvaWQgMCkgeyBwYXRoID0gXCJcIjsgfVxyXG4gICAgdmFyIHByZXZPYmogPSB0cmFja2VkUHJvcGVydHkgPyB0cmFja2VkUHJvcGVydHkudmFsdWUgOiB2b2lkIDA7XHJcbiAgICB2YXIgc2FtZVJlZiA9IHByZXZPYmogPT09IG9iajtcclxuICAgIGlmIChzYW1lUGFyZW50UmVmICYmICFzYW1lUmVmICYmICFOdW1iZXIuaXNOYU4ob2JqKSkge1xyXG4gICAgICAgIHJldHVybiB7IHdhc011dGF0ZWQ6IHRydWUsIHBhdGg6IHBhdGggfTtcclxuICAgIH1cclxuICAgIGlmIChpc0ltbXV0YWJsZShwcmV2T2JqKSB8fCBpc0ltbXV0YWJsZShvYmopKSB7XHJcbiAgICAgICAgcmV0dXJuIHsgd2FzTXV0YXRlZDogZmFsc2UgfTtcclxuICAgIH1cclxuICAgIHZhciBrZXlzVG9EZXRlY3QgPSB7fTtcclxuICAgIGZvciAodmFyIGtleSBpbiB0cmFja2VkUHJvcGVydHkuY2hpbGRyZW4pIHtcclxuICAgICAgICBrZXlzVG9EZXRlY3Rba2V5XSA9IHRydWU7XHJcbiAgICB9XHJcbiAgICBmb3IgKHZhciBrZXkgaW4gb2JqKSB7XHJcbiAgICAgICAga2V5c1RvRGV0ZWN0W2tleV0gPSB0cnVlO1xyXG4gICAgfVxyXG4gICAgZm9yICh2YXIga2V5IGluIGtleXNUb0RldGVjdCkge1xyXG4gICAgICAgIHZhciBjaGlsZFBhdGggPSBwYXRoID8gcGF0aCArIFwiLlwiICsga2V5IDoga2V5O1xyXG4gICAgICAgIGlmIChpZ25vcmVQYXRocy5sZW5ndGggJiYgaWdub3JlUGF0aHMuaW5kZXhPZihjaGlsZFBhdGgpICE9PSAtMSkge1xyXG4gICAgICAgICAgICBjb250aW51ZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdmFyIHJlc3VsdCA9IGRldGVjdE11dGF0aW9ucyhpc0ltbXV0YWJsZSwgaWdub3JlUGF0aHMsIHRyYWNrZWRQcm9wZXJ0eS5jaGlsZHJlbltrZXldLCBvYmpba2V5XSwgc2FtZVJlZiwgY2hpbGRQYXRoKTtcclxuICAgICAgICBpZiAocmVzdWx0Lndhc011dGF0ZWQpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICByZXR1cm4geyB3YXNNdXRhdGVkOiBmYWxzZSB9O1xyXG59XHJcbmZ1bmN0aW9uIGNyZWF0ZUltbXV0YWJsZVN0YXRlSW52YXJpYW50TWlkZGxld2FyZShvcHRpb25zKSB7XHJcbiAgICBpZiAob3B0aW9ucyA9PT0gdm9pZCAwKSB7IG9wdGlvbnMgPSB7fTsgfVxyXG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSBcInByb2R1Y3Rpb25cIikge1xyXG4gICAgICAgIHJldHVybiBmdW5jdGlvbiAoKSB7IHJldHVybiBmdW5jdGlvbiAobmV4dCkgeyByZXR1cm4gZnVuY3Rpb24gKGFjdGlvbikgeyByZXR1cm4gbmV4dChhY3Rpb24pOyB9OyB9OyB9O1xyXG4gICAgfVxyXG4gICAgdmFyIF9jID0gb3B0aW9ucy5pc0ltbXV0YWJsZSwgaXNJbW11dGFibGUgPSBfYyA9PT0gdm9pZCAwID8gaXNJbW11dGFibGVEZWZhdWx0IDogX2MsIGlnbm9yZWRQYXRocyA9IG9wdGlvbnMuaWdub3JlZFBhdGhzLCBfZCA9IG9wdGlvbnMud2FybkFmdGVyLCB3YXJuQWZ0ZXIgPSBfZCA9PT0gdm9pZCAwID8gMzIgOiBfZCwgaWdub3JlID0gb3B0aW9ucy5pZ25vcmU7XHJcbiAgICBpZ25vcmVkUGF0aHMgPSBpZ25vcmVkUGF0aHMgfHwgaWdub3JlO1xyXG4gICAgdmFyIHRyYWNrID0gdHJhY2tGb3JNdXRhdGlvbnMuYmluZChudWxsLCBpc0ltbXV0YWJsZSwgaWdub3JlZFBhdGhzKTtcclxuICAgIHJldHVybiBmdW5jdGlvbiAoX2MpIHtcclxuICAgICAgICB2YXIgZ2V0U3RhdGUgPSBfYy5nZXRTdGF0ZTtcclxuICAgICAgICB2YXIgc3RhdGUgPSBnZXRTdGF0ZSgpO1xyXG4gICAgICAgIHZhciB0cmFja2VyID0gdHJhY2soc3RhdGUpO1xyXG4gICAgICAgIHZhciByZXN1bHQ7XHJcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIChuZXh0KSB7IHJldHVybiBmdW5jdGlvbiAoYWN0aW9uKSB7XHJcbiAgICAgICAgICAgIHZhciBtZWFzdXJlVXRpbHMgPSBnZXRUaW1lTWVhc3VyZVV0aWxzKHdhcm5BZnRlciwgXCJJbW11dGFibGVTdGF0ZUludmFyaWFudE1pZGRsZXdhcmVcIik7XHJcbiAgICAgICAgICAgIG1lYXN1cmVVdGlscy5tZWFzdXJlVGltZShmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICBzdGF0ZSA9IGdldFN0YXRlKCk7XHJcbiAgICAgICAgICAgICAgICByZXN1bHQgPSB0cmFja2VyLmRldGVjdE11dGF0aW9ucygpO1xyXG4gICAgICAgICAgICAgICAgdHJhY2tlciA9IHRyYWNrKHN0YXRlKTtcclxuICAgICAgICAgICAgICAgIGludmFyaWFudCghcmVzdWx0Lndhc011dGF0ZWQsIFwiQSBzdGF0ZSBtdXRhdGlvbiB3YXMgZGV0ZWN0ZWQgYmV0d2VlbiBkaXNwYXRjaGVzLCBpbiB0aGUgcGF0aCAnXCIgKyAocmVzdWx0LnBhdGggfHwgXCJcIikgKyBcIicuICBUaGlzIG1heSBjYXVzZSBpbmNvcnJlY3QgYmVoYXZpb3IuIChodHRwczovL3JlZHV4LmpzLm9yZy9zdHlsZS1ndWlkZS9zdHlsZS1ndWlkZSNkby1ub3QtbXV0YXRlLXN0YXRlKVwiKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIHZhciBkaXNwYXRjaGVkQWN0aW9uID0gbmV4dChhY3Rpb24pO1xyXG4gICAgICAgICAgICBtZWFzdXJlVXRpbHMubWVhc3VyZVRpbWUoZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgc3RhdGUgPSBnZXRTdGF0ZSgpO1xyXG4gICAgICAgICAgICAgICAgcmVzdWx0ID0gdHJhY2tlci5kZXRlY3RNdXRhdGlvbnMoKTtcclxuICAgICAgICAgICAgICAgIHRyYWNrZXIgPSB0cmFjayhzdGF0ZSk7XHJcbiAgICAgICAgICAgICAgICByZXN1bHQud2FzTXV0YXRlZCAmJiBpbnZhcmlhbnQoIXJlc3VsdC53YXNNdXRhdGVkLCBcIkEgc3RhdGUgbXV0YXRpb24gd2FzIGRldGVjdGVkIGluc2lkZSBhIGRpc3BhdGNoLCBpbiB0aGUgcGF0aDogXCIgKyAocmVzdWx0LnBhdGggfHwgXCJcIikgKyBcIi4gVGFrZSBhIGxvb2sgYXQgdGhlIHJlZHVjZXIocykgaGFuZGxpbmcgdGhlIGFjdGlvbiBcIiArIHN0cmluZ2lmeShhY3Rpb24pICsgXCIuIChodHRwczovL3JlZHV4LmpzLm9yZy9zdHlsZS1ndWlkZS9zdHlsZS1ndWlkZSNkby1ub3QtbXV0YXRlLXN0YXRlKVwiKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIG1lYXN1cmVVdGlscy53YXJuSWZFeGNlZWRlZCgpO1xyXG4gICAgICAgICAgICByZXR1cm4gZGlzcGF0Y2hlZEFjdGlvbjtcclxuICAgICAgICB9OyB9O1xyXG4gICAgfTtcclxufVxyXG4vLyBzcmMvc2VyaWFsaXphYmxlU3RhdGVJbnZhcmlhbnRNaWRkbGV3YXJlLnRzXHJcbmZ1bmN0aW9uIGlzUGxhaW4odmFsKSB7XHJcbiAgICB2YXIgdHlwZSA9IHR5cGVvZiB2YWw7XHJcbiAgICByZXR1cm4gdHlwZSA9PT0gXCJ1bmRlZmluZWRcIiB8fCB2YWwgPT09IG51bGwgfHwgdHlwZSA9PT0gXCJzdHJpbmdcIiB8fCB0eXBlID09PSBcImJvb2xlYW5cIiB8fCB0eXBlID09PSBcIm51bWJlclwiIHx8IEFycmF5LmlzQXJyYXkodmFsKSB8fCBpc1BsYWluT2JqZWN0KHZhbCk7XHJcbn1cclxuZnVuY3Rpb24gZmluZE5vblNlcmlhbGl6YWJsZVZhbHVlKHZhbHVlLCBwYXRoLCBpc1NlcmlhbGl6YWJsZSwgZ2V0RW50cmllcywgaWdub3JlZFBhdGhzKSB7XHJcbiAgICBpZiAocGF0aCA9PT0gdm9pZCAwKSB7IHBhdGggPSBcIlwiOyB9XHJcbiAgICBpZiAoaXNTZXJpYWxpemFibGUgPT09IHZvaWQgMCkgeyBpc1NlcmlhbGl6YWJsZSA9IGlzUGxhaW47IH1cclxuICAgIGlmIChpZ25vcmVkUGF0aHMgPT09IHZvaWQgMCkgeyBpZ25vcmVkUGF0aHMgPSBbXTsgfVxyXG4gICAgdmFyIGZvdW5kTmVzdGVkU2VyaWFsaXphYmxlO1xyXG4gICAgaWYgKCFpc1NlcmlhbGl6YWJsZSh2YWx1ZSkpIHtcclxuICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICBrZXlQYXRoOiBwYXRoIHx8IFwiPHJvb3Q+XCIsXHJcbiAgICAgICAgICAgIHZhbHVlOiB2YWx1ZVxyXG4gICAgICAgIH07XHJcbiAgICB9XHJcbiAgICBpZiAodHlwZW9mIHZhbHVlICE9PSBcIm9iamVjdFwiIHx8IHZhbHVlID09PSBudWxsKSB7XHJcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgfVxyXG4gICAgdmFyIGVudHJpZXMgPSBnZXRFbnRyaWVzICE9IG51bGwgPyBnZXRFbnRyaWVzKHZhbHVlKSA6IE9iamVjdC5lbnRyaWVzKHZhbHVlKTtcclxuICAgIHZhciBoYXNJZ25vcmVkUGF0aHMgPSBpZ25vcmVkUGF0aHMubGVuZ3RoID4gMDtcclxuICAgIGZvciAodmFyIF9pID0gMCwgZW50cmllc18xID0gZW50cmllczsgX2kgPCBlbnRyaWVzXzEubGVuZ3RoOyBfaSsrKSB7XHJcbiAgICAgICAgdmFyIF9jID0gZW50cmllc18xW19pXSwga2V5ID0gX2NbMF0sIG5lc3RlZFZhbHVlID0gX2NbMV07XHJcbiAgICAgICAgdmFyIG5lc3RlZFBhdGggPSBwYXRoID8gcGF0aCArIFwiLlwiICsga2V5IDoga2V5O1xyXG4gICAgICAgIGlmIChoYXNJZ25vcmVkUGF0aHMgJiYgaWdub3JlZFBhdGhzLmluZGV4T2YobmVzdGVkUGF0aCkgPj0gMCkge1xyXG4gICAgICAgICAgICBjb250aW51ZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKCFpc1NlcmlhbGl6YWJsZShuZXN0ZWRWYWx1ZSkpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgICAgIGtleVBhdGg6IG5lc3RlZFBhdGgsXHJcbiAgICAgICAgICAgICAgICB2YWx1ZTogbmVzdGVkVmFsdWVcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHR5cGVvZiBuZXN0ZWRWYWx1ZSA9PT0gXCJvYmplY3RcIikge1xyXG4gICAgICAgICAgICBmb3VuZE5lc3RlZFNlcmlhbGl6YWJsZSA9IGZpbmROb25TZXJpYWxpemFibGVWYWx1ZShuZXN0ZWRWYWx1ZSwgbmVzdGVkUGF0aCwgaXNTZXJpYWxpemFibGUsIGdldEVudHJpZXMsIGlnbm9yZWRQYXRocyk7XHJcbiAgICAgICAgICAgIGlmIChmb3VuZE5lc3RlZFNlcmlhbGl6YWJsZSkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGZvdW5kTmVzdGVkU2VyaWFsaXphYmxlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIGZhbHNlO1xyXG59XHJcbmZ1bmN0aW9uIGNyZWF0ZVNlcmlhbGl6YWJsZVN0YXRlSW52YXJpYW50TWlkZGxld2FyZShvcHRpb25zKSB7XHJcbiAgICBpZiAob3B0aW9ucyA9PT0gdm9pZCAwKSB7IG9wdGlvbnMgPSB7fTsgfVxyXG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSBcInByb2R1Y3Rpb25cIikge1xyXG4gICAgICAgIHJldHVybiBmdW5jdGlvbiAoKSB7IHJldHVybiBmdW5jdGlvbiAobmV4dCkgeyByZXR1cm4gZnVuY3Rpb24gKGFjdGlvbikgeyByZXR1cm4gbmV4dChhY3Rpb24pOyB9OyB9OyB9O1xyXG4gICAgfVxyXG4gICAgdmFyIF9jID0gb3B0aW9ucy5pc1NlcmlhbGl6YWJsZSwgaXNTZXJpYWxpemFibGUgPSBfYyA9PT0gdm9pZCAwID8gaXNQbGFpbiA6IF9jLCBnZXRFbnRyaWVzID0gb3B0aW9ucy5nZXRFbnRyaWVzLCBfZCA9IG9wdGlvbnMuaWdub3JlZEFjdGlvbnMsIGlnbm9yZWRBY3Rpb25zID0gX2QgPT09IHZvaWQgMCA/IFtdIDogX2QsIF9lID0gb3B0aW9ucy5pZ25vcmVkQWN0aW9uUGF0aHMsIGlnbm9yZWRBY3Rpb25QYXRocyA9IF9lID09PSB2b2lkIDAgPyBbXCJtZXRhLmFyZ1wiLCBcIm1ldGEuYmFzZVF1ZXJ5TWV0YVwiXSA6IF9lLCBfZiA9IG9wdGlvbnMuaWdub3JlZFBhdGhzLCBpZ25vcmVkUGF0aHMgPSBfZiA9PT0gdm9pZCAwID8gW10gOiBfZiwgX2cgPSBvcHRpb25zLndhcm5BZnRlciwgd2FybkFmdGVyID0gX2cgPT09IHZvaWQgMCA/IDMyIDogX2csIF9oID0gb3B0aW9ucy5pZ25vcmVTdGF0ZSwgaWdub3JlU3RhdGUgPSBfaCA9PT0gdm9pZCAwID8gZmFsc2UgOiBfaCwgX2ogPSBvcHRpb25zLmlnbm9yZUFjdGlvbnMsIGlnbm9yZUFjdGlvbnMgPSBfaiA9PT0gdm9pZCAwID8gZmFsc2UgOiBfajtcclxuICAgIHJldHVybiBmdW5jdGlvbiAoc3RvcmVBUEkpIHsgcmV0dXJuIGZ1bmN0aW9uIChuZXh0KSB7IHJldHVybiBmdW5jdGlvbiAoYWN0aW9uKSB7XHJcbiAgICAgICAgdmFyIHJlc3VsdCA9IG5leHQoYWN0aW9uKTtcclxuICAgICAgICB2YXIgbWVhc3VyZVV0aWxzID0gZ2V0VGltZU1lYXN1cmVVdGlscyh3YXJuQWZ0ZXIsIFwiU2VyaWFsaXphYmxlU3RhdGVJbnZhcmlhbnRNaWRkbGV3YXJlXCIpO1xyXG4gICAgICAgIGlmICghaWdub3JlQWN0aW9ucyAmJiAhKGlnbm9yZWRBY3Rpb25zLmxlbmd0aCAmJiBpZ25vcmVkQWN0aW9ucy5pbmRleE9mKGFjdGlvbi50eXBlKSAhPT0gLTEpKSB7XHJcbiAgICAgICAgICAgIG1lYXN1cmVVdGlscy5tZWFzdXJlVGltZShmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgZm91bmRBY3Rpb25Ob25TZXJpYWxpemFibGVWYWx1ZSA9IGZpbmROb25TZXJpYWxpemFibGVWYWx1ZShhY3Rpb24sIFwiXCIsIGlzU2VyaWFsaXphYmxlLCBnZXRFbnRyaWVzLCBpZ25vcmVkQWN0aW9uUGF0aHMpO1xyXG4gICAgICAgICAgICAgICAgaWYgKGZvdW5kQWN0aW9uTm9uU2VyaWFsaXphYmxlVmFsdWUpIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIga2V5UGF0aCA9IGZvdW5kQWN0aW9uTm9uU2VyaWFsaXphYmxlVmFsdWUua2V5UGF0aCwgdmFsdWUgPSBmb3VuZEFjdGlvbk5vblNlcmlhbGl6YWJsZVZhbHVlLnZhbHVlO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoXCJBIG5vbi1zZXJpYWxpemFibGUgdmFsdWUgd2FzIGRldGVjdGVkIGluIGFuIGFjdGlvbiwgaW4gdGhlIHBhdGg6IGBcIiArIGtleVBhdGggKyBcImAuIFZhbHVlOlwiLCB2YWx1ZSwgXCJcXG5UYWtlIGEgbG9vayBhdCB0aGUgbG9naWMgdGhhdCBkaXNwYXRjaGVkIHRoaXMgYWN0aW9uOiBcIiwgYWN0aW9uLCBcIlxcbihTZWUgaHR0cHM6Ly9yZWR1eC5qcy5vcmcvZmFxL2FjdGlvbnMjd2h5LXNob3VsZC10eXBlLWJlLWEtc3RyaW5nLW9yLWF0LWxlYXN0LXNlcmlhbGl6YWJsZS13aHktc2hvdWxkLW15LWFjdGlvbi10eXBlcy1iZS1jb25zdGFudHMpXCIsIFwiXFxuKFRvIGFsbG93IG5vbi1zZXJpYWxpemFibGUgdmFsdWVzIHNlZTogaHR0cHM6Ly9yZWR1eC10b29sa2l0LmpzLm9yZy91c2FnZS91c2FnZS1ndWlkZSN3b3JraW5nLXdpdGgtbm9uLXNlcmlhbGl6YWJsZS1kYXRhKVwiKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICghaWdub3JlU3RhdGUpIHtcclxuICAgICAgICAgICAgbWVhc3VyZVV0aWxzLm1lYXN1cmVUaW1lKGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgIHZhciBzdGF0ZSA9IHN0b3JlQVBJLmdldFN0YXRlKCk7XHJcbiAgICAgICAgICAgICAgICB2YXIgZm91bmRTdGF0ZU5vblNlcmlhbGl6YWJsZVZhbHVlID0gZmluZE5vblNlcmlhbGl6YWJsZVZhbHVlKHN0YXRlLCBcIlwiLCBpc1NlcmlhbGl6YWJsZSwgZ2V0RW50cmllcywgaWdub3JlZFBhdGhzKTtcclxuICAgICAgICAgICAgICAgIGlmIChmb3VuZFN0YXRlTm9uU2VyaWFsaXphYmxlVmFsdWUpIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIga2V5UGF0aCA9IGZvdW5kU3RhdGVOb25TZXJpYWxpemFibGVWYWx1ZS5rZXlQYXRoLCB2YWx1ZSA9IGZvdW5kU3RhdGVOb25TZXJpYWxpemFibGVWYWx1ZS52YWx1ZTtcclxuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKFwiQSBub24tc2VyaWFsaXphYmxlIHZhbHVlIHdhcyBkZXRlY3RlZCBpbiB0aGUgc3RhdGUsIGluIHRoZSBwYXRoOiBgXCIgKyBrZXlQYXRoICsgXCJgLiBWYWx1ZTpcIiwgdmFsdWUsIFwiXFxuVGFrZSBhIGxvb2sgYXQgdGhlIHJlZHVjZXIocykgaGFuZGxpbmcgdGhpcyBhY3Rpb24gdHlwZTogXCIgKyBhY3Rpb24udHlwZSArIFwiLlxcbihTZWUgaHR0cHM6Ly9yZWR1eC5qcy5vcmcvZmFxL29yZ2FuaXppbmctc3RhdGUjY2FuLWktcHV0LWZ1bmN0aW9ucy1wcm9taXNlcy1vci1vdGhlci1ub24tc2VyaWFsaXphYmxlLWl0ZW1zLWluLW15LXN0b3JlLXN0YXRlKVwiKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIG1lYXN1cmVVdGlscy53YXJuSWZFeGNlZWRlZCgpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gcmVzdWx0O1xyXG4gICAgfTsgfTsgfTtcclxufVxyXG4vLyBzcmMvZ2V0RGVmYXVsdE1pZGRsZXdhcmUudHNcclxuZnVuY3Rpb24gaXNCb29sZWFuKHgpIHtcclxuICAgIHJldHVybiB0eXBlb2YgeCA9PT0gXCJib29sZWFuXCI7XHJcbn1cclxuZnVuY3Rpb24gY3VycnlHZXREZWZhdWx0TWlkZGxld2FyZSgpIHtcclxuICAgIHJldHVybiBmdW5jdGlvbiBjdXJyaWVkR2V0RGVmYXVsdE1pZGRsZXdhcmUob3B0aW9ucykge1xyXG4gICAgICAgIHJldHVybiBnZXREZWZhdWx0TWlkZGxld2FyZShvcHRpb25zKTtcclxuICAgIH07XHJcbn1cclxuZnVuY3Rpb24gZ2V0RGVmYXVsdE1pZGRsZXdhcmUob3B0aW9ucykge1xyXG4gICAgaWYgKG9wdGlvbnMgPT09IHZvaWQgMCkgeyBvcHRpb25zID0ge307IH1cclxuICAgIHZhciBfYyA9IG9wdGlvbnMudGh1bmssIHRodW5rID0gX2MgPT09IHZvaWQgMCA/IHRydWUgOiBfYywgX2QgPSBvcHRpb25zLmltbXV0YWJsZUNoZWNrLCBpbW11dGFibGVDaGVjayA9IF9kID09PSB2b2lkIDAgPyB0cnVlIDogX2QsIF9lID0gb3B0aW9ucy5zZXJpYWxpemFibGVDaGVjaywgc2VyaWFsaXphYmxlQ2hlY2sgPSBfZSA9PT0gdm9pZCAwID8gdHJ1ZSA6IF9lO1xyXG4gICAgdmFyIG1pZGRsZXdhcmVBcnJheSA9IG5ldyBNaWRkbGV3YXJlQXJyYXkoKTtcclxuICAgIGlmICh0aHVuaykge1xyXG4gICAgICAgIGlmIChpc0Jvb2xlYW4odGh1bmspKSB7XHJcbiAgICAgICAgICAgIG1pZGRsZXdhcmVBcnJheS5wdXNoKHRodW5rTWlkZGxld2FyZSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICBtaWRkbGV3YXJlQXJyYXkucHVzaCh0aHVua01pZGRsZXdhcmUud2l0aEV4dHJhQXJndW1lbnQodGh1bmsuZXh0cmFBcmd1bWVudCkpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcclxuICAgICAgICBpZiAoaW1tdXRhYmxlQ2hlY2spIHtcclxuICAgICAgICAgICAgdmFyIGltbXV0YWJsZU9wdGlvbnMgPSB7fTtcclxuICAgICAgICAgICAgaWYgKCFpc0Jvb2xlYW4oaW1tdXRhYmxlQ2hlY2spKSB7XHJcbiAgICAgICAgICAgICAgICBpbW11dGFibGVPcHRpb25zID0gaW1tdXRhYmxlQ2hlY2s7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgbWlkZGxld2FyZUFycmF5LnVuc2hpZnQoY3JlYXRlSW1tdXRhYmxlU3RhdGVJbnZhcmlhbnRNaWRkbGV3YXJlKGltbXV0YWJsZU9wdGlvbnMpKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHNlcmlhbGl6YWJsZUNoZWNrKSB7XHJcbiAgICAgICAgICAgIHZhciBzZXJpYWxpemFibGVPcHRpb25zID0ge307XHJcbiAgICAgICAgICAgIGlmICghaXNCb29sZWFuKHNlcmlhbGl6YWJsZUNoZWNrKSkge1xyXG4gICAgICAgICAgICAgICAgc2VyaWFsaXphYmxlT3B0aW9ucyA9IHNlcmlhbGl6YWJsZUNoZWNrO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIG1pZGRsZXdhcmVBcnJheS5wdXNoKGNyZWF0ZVNlcmlhbGl6YWJsZVN0YXRlSW52YXJpYW50TWlkZGxld2FyZShzZXJpYWxpemFibGVPcHRpb25zKSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIG1pZGRsZXdhcmVBcnJheTtcclxufVxyXG4vLyBzcmMvY29uZmlndXJlU3RvcmUudHNcclxudmFyIElTX1BST0RVQ1RJT04gPSBwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gXCJwcm9kdWN0aW9uXCI7XHJcbmZ1bmN0aW9uIGNvbmZpZ3VyZVN0b3JlKG9wdGlvbnMpIHtcclxuICAgIHZhciBjdXJyaWVkR2V0RGVmYXVsdE1pZGRsZXdhcmUgPSBjdXJyeUdldERlZmF1bHRNaWRkbGV3YXJlKCk7XHJcbiAgICB2YXIgX2MgPSBvcHRpb25zIHx8IHt9LCBfZCA9IF9jLnJlZHVjZXIsIHJlZHVjZXIgPSBfZCA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2QsIF9lID0gX2MubWlkZGxld2FyZSwgbWlkZGxld2FyZSA9IF9lID09PSB2b2lkIDAgPyBjdXJyaWVkR2V0RGVmYXVsdE1pZGRsZXdhcmUoKSA6IF9lLCBfZiA9IF9jLmRldlRvb2xzLCBkZXZUb29scyA9IF9mID09PSB2b2lkIDAgPyB0cnVlIDogX2YsIF9nID0gX2MucHJlbG9hZGVkU3RhdGUsIHByZWxvYWRlZFN0YXRlID0gX2cgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9nLCBfaCA9IF9jLmVuaGFuY2VycywgZW5oYW5jZXJzID0gX2ggPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9oO1xyXG4gICAgdmFyIHJvb3RSZWR1Y2VyO1xyXG4gICAgaWYgKHR5cGVvZiByZWR1Y2VyID09PSBcImZ1bmN0aW9uXCIpIHtcclxuICAgICAgICByb290UmVkdWNlciA9IHJlZHVjZXI7XHJcbiAgICB9XHJcbiAgICBlbHNlIGlmIChpc1BsYWluT2JqZWN0KHJlZHVjZXIpKSB7XHJcbiAgICAgICAgcm9vdFJlZHVjZXIgPSBjb21iaW5lUmVkdWNlcnMocmVkdWNlcik7XHJcbiAgICB9XHJcbiAgICBlbHNlIHtcclxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1wicmVkdWNlclwiIGlzIGEgcmVxdWlyZWQgYXJndW1lbnQsIGFuZCBtdXN0IGJlIGEgZnVuY3Rpb24gb3IgYW4gb2JqZWN0IG9mIGZ1bmN0aW9ucyB0aGF0IGNhbiBiZSBwYXNzZWQgdG8gY29tYmluZVJlZHVjZXJzJyk7XHJcbiAgICB9XHJcbiAgICB2YXIgZmluYWxNaWRkbGV3YXJlID0gbWlkZGxld2FyZTtcclxuICAgIGlmICh0eXBlb2YgZmluYWxNaWRkbGV3YXJlID09PSBcImZ1bmN0aW9uXCIpIHtcclxuICAgICAgICBmaW5hbE1pZGRsZXdhcmUgPSBmaW5hbE1pZGRsZXdhcmUoY3VycmllZEdldERlZmF1bHRNaWRkbGV3YXJlKTtcclxuICAgICAgICBpZiAoIUlTX1BST0RVQ1RJT04gJiYgIUFycmF5LmlzQXJyYXkoZmluYWxNaWRkbGV3YXJlKSkge1xyXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJ3aGVuIHVzaW5nIGEgbWlkZGxld2FyZSBidWlsZGVyIGZ1bmN0aW9uLCBhbiBhcnJheSBvZiBtaWRkbGV3YXJlIG11c3QgYmUgcmV0dXJuZWRcIik7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgaWYgKCFJU19QUk9EVUNUSU9OICYmIGZpbmFsTWlkZGxld2FyZS5zb21lKGZ1bmN0aW9uIChpdGVtKSB7IHJldHVybiB0eXBlb2YgaXRlbSAhPT0gXCJmdW5jdGlvblwiOyB9KSkge1xyXG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcImVhY2ggbWlkZGxld2FyZSBwcm92aWRlZCB0byBjb25maWd1cmVTdG9yZSBtdXN0IGJlIGEgZnVuY3Rpb25cIik7XHJcbiAgICB9XHJcbiAgICB2YXIgbWlkZGxld2FyZUVuaGFuY2VyID0gYXBwbHlNaWRkbGV3YXJlLmFwcGx5KHZvaWQgMCwgZmluYWxNaWRkbGV3YXJlKTtcclxuICAgIHZhciBmaW5hbENvbXBvc2UgPSBjb21wb3NlMjtcclxuICAgIGlmIChkZXZUb29scykge1xyXG4gICAgICAgIGZpbmFsQ29tcG9zZSA9IGNvbXBvc2VXaXRoRGV2VG9vbHMoX19zcHJlYWRWYWx1ZXMoe1xyXG4gICAgICAgICAgICB0cmFjZTogIUlTX1BST0RVQ1RJT05cclxuICAgICAgICB9LCB0eXBlb2YgZGV2VG9vbHMgPT09IFwib2JqZWN0XCIgJiYgZGV2VG9vbHMpKTtcclxuICAgIH1cclxuICAgIHZhciBzdG9yZUVuaGFuY2VycyA9IFttaWRkbGV3YXJlRW5oYW5jZXJdO1xyXG4gICAgaWYgKEFycmF5LmlzQXJyYXkoZW5oYW5jZXJzKSkge1xyXG4gICAgICAgIHN0b3JlRW5oYW5jZXJzID0gX19zcHJlYWRBcnJheShbbWlkZGxld2FyZUVuaGFuY2VyXSwgZW5oYW5jZXJzKTtcclxuICAgIH1cclxuICAgIGVsc2UgaWYgKHR5cGVvZiBlbmhhbmNlcnMgPT09IFwiZnVuY3Rpb25cIikge1xyXG4gICAgICAgIHN0b3JlRW5oYW5jZXJzID0gZW5oYW5jZXJzKHN0b3JlRW5oYW5jZXJzKTtcclxuICAgIH1cclxuICAgIHZhciBjb21wb3NlZEVuaGFuY2VyID0gZmluYWxDb21wb3NlLmFwcGx5KHZvaWQgMCwgc3RvcmVFbmhhbmNlcnMpO1xyXG4gICAgcmV0dXJuIGNyZWF0ZVN0b3JlKHJvb3RSZWR1Y2VyLCBwcmVsb2FkZWRTdGF0ZSwgY29tcG9zZWRFbmhhbmNlcik7XHJcbn1cclxuLy8gc3JjL2NyZWF0ZUFjdGlvbi50c1xyXG5mdW5jdGlvbiBjcmVhdGVBY3Rpb24odHlwZSwgcHJlcGFyZUFjdGlvbikge1xyXG4gICAgZnVuY3Rpb24gYWN0aW9uQ3JlYXRvcigpIHtcclxuICAgICAgICB2YXIgYXJncyA9IFtdO1xyXG4gICAgICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBhcmd1bWVudHMubGVuZ3RoOyBfaSsrKSB7XHJcbiAgICAgICAgICAgIGFyZ3NbX2ldID0gYXJndW1lbnRzW19pXTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHByZXBhcmVBY3Rpb24pIHtcclxuICAgICAgICAgICAgdmFyIHByZXBhcmVkID0gcHJlcGFyZUFjdGlvbi5hcHBseSh2b2lkIDAsIGFyZ3MpO1xyXG4gICAgICAgICAgICBpZiAoIXByZXBhcmVkKSB7XHJcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJwcmVwYXJlQWN0aW9uIGRpZCBub3QgcmV0dXJuIGFuIG9iamVjdFwiKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gX19zcHJlYWRWYWx1ZXMoX19zcHJlYWRWYWx1ZXMoe1xyXG4gICAgICAgICAgICAgICAgdHlwZTogdHlwZSxcclxuICAgICAgICAgICAgICAgIHBheWxvYWQ6IHByZXBhcmVkLnBheWxvYWRcclxuICAgICAgICAgICAgfSwgXCJtZXRhXCIgaW4gcHJlcGFyZWQgJiYgeyBtZXRhOiBwcmVwYXJlZC5tZXRhIH0pLCBcImVycm9yXCIgaW4gcHJlcGFyZWQgJiYgeyBlcnJvcjogcHJlcGFyZWQuZXJyb3IgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB7IHR5cGU6IHR5cGUsIHBheWxvYWQ6IGFyZ3NbMF0gfTtcclxuICAgIH1cclxuICAgIGFjdGlvbkNyZWF0b3IudG9TdHJpbmcgPSBmdW5jdGlvbiAoKSB7IHJldHVybiBcIlwiICsgdHlwZTsgfTtcclxuICAgIGFjdGlvbkNyZWF0b3IudHlwZSA9IHR5cGU7XHJcbiAgICBhY3Rpb25DcmVhdG9yLm1hdGNoID0gZnVuY3Rpb24gKGFjdGlvbikgeyByZXR1cm4gYWN0aW9uLnR5cGUgPT09IHR5cGU7IH07XHJcbiAgICByZXR1cm4gYWN0aW9uQ3JlYXRvcjtcclxufVxyXG5mdW5jdGlvbiBpc0ZTQShhY3Rpb24pIHtcclxuICAgIHJldHVybiBpc1BsYWluT2JqZWN0KGFjdGlvbikgJiYgdHlwZW9mIGFjdGlvbi50eXBlID09PSBcInN0cmluZ1wiICYmIE9iamVjdC5rZXlzKGFjdGlvbikuZXZlcnkoaXNWYWxpZEtleSk7XHJcbn1cclxuZnVuY3Rpb24gaXNWYWxpZEtleShrZXkpIHtcclxuICAgIHJldHVybiBbXCJ0eXBlXCIsIFwicGF5bG9hZFwiLCBcImVycm9yXCIsIFwibWV0YVwiXS5pbmRleE9mKGtleSkgPiAtMTtcclxufVxyXG5mdW5jdGlvbiBnZXRUeXBlKGFjdGlvbkNyZWF0b3IpIHtcclxuICAgIHJldHVybiBcIlwiICsgYWN0aW9uQ3JlYXRvcjtcclxufVxyXG4vLyBzcmMvY3JlYXRlUmVkdWNlci50c1xyXG5pbXBvcnQgY3JlYXRlTmV4dFN0YXRlLCB7IGlzRHJhZnQgYXMgaXNEcmFmdDIsIGlzRHJhZnRhYmxlIH0gZnJvbSBcImltbWVyXCI7XHJcbi8vIHNyYy9tYXBCdWlsZGVycy50c1xyXG5mdW5jdGlvbiBleGVjdXRlUmVkdWNlckJ1aWxkZXJDYWxsYmFjayhidWlsZGVyQ2FsbGJhY2spIHtcclxuICAgIHZhciBhY3Rpb25zTWFwID0ge307XHJcbiAgICB2YXIgYWN0aW9uTWF0Y2hlcnMgPSBbXTtcclxuICAgIHZhciBkZWZhdWx0Q2FzZVJlZHVjZXI7XHJcbiAgICB2YXIgYnVpbGRlciA9IHtcclxuICAgICAgICBhZGRDYXNlOiBmdW5jdGlvbiAodHlwZU9yQWN0aW9uQ3JlYXRvciwgcmVkdWNlcikge1xyXG4gICAgICAgICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoYWN0aW9uTWF0Y2hlcnMubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcImBidWlsZGVyLmFkZENhc2VgIHNob3VsZCBvbmx5IGJlIGNhbGxlZCBiZWZvcmUgY2FsbGluZyBgYnVpbGRlci5hZGRNYXRjaGVyYFwiKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmIChkZWZhdWx0Q2FzZVJlZHVjZXIpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJgYnVpbGRlci5hZGRDYXNlYCBzaG91bGQgb25seSBiZSBjYWxsZWQgYmVmb3JlIGNhbGxpbmcgYGJ1aWxkZXIuYWRkRGVmYXVsdENhc2VgXCIpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHZhciB0eXBlID0gdHlwZW9mIHR5cGVPckFjdGlvbkNyZWF0b3IgPT09IFwic3RyaW5nXCIgPyB0eXBlT3JBY3Rpb25DcmVhdG9yIDogdHlwZU9yQWN0aW9uQ3JlYXRvci50eXBlO1xyXG4gICAgICAgICAgICBpZiAodHlwZSBpbiBhY3Rpb25zTWFwKSB7XHJcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJhZGRDYXNlIGNhbm5vdCBiZSBjYWxsZWQgd2l0aCB0d28gcmVkdWNlcnMgZm9yIHRoZSBzYW1lIGFjdGlvbiB0eXBlXCIpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGFjdGlvbnNNYXBbdHlwZV0gPSByZWR1Y2VyO1xyXG4gICAgICAgICAgICByZXR1cm4gYnVpbGRlcjtcclxuICAgICAgICB9LFxyXG4gICAgICAgIGFkZE1hdGNoZXI6IGZ1bmN0aW9uIChtYXRjaGVyLCByZWR1Y2VyKSB7XHJcbiAgICAgICAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcclxuICAgICAgICAgICAgICAgIGlmIChkZWZhdWx0Q2FzZVJlZHVjZXIpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJgYnVpbGRlci5hZGRNYXRjaGVyYCBzaG91bGQgb25seSBiZSBjYWxsZWQgYmVmb3JlIGNhbGxpbmcgYGJ1aWxkZXIuYWRkRGVmYXVsdENhc2VgXCIpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGFjdGlvbk1hdGNoZXJzLnB1c2goeyBtYXRjaGVyOiBtYXRjaGVyLCByZWR1Y2VyOiByZWR1Y2VyIH0pO1xyXG4gICAgICAgICAgICByZXR1cm4gYnVpbGRlcjtcclxuICAgICAgICB9LFxyXG4gICAgICAgIGFkZERlZmF1bHRDYXNlOiBmdW5jdGlvbiAocmVkdWNlcikge1xyXG4gICAgICAgICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoZGVmYXVsdENhc2VSZWR1Y2VyKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiYGJ1aWxkZXIuYWRkRGVmYXVsdENhc2VgIGNhbiBvbmx5IGJlIGNhbGxlZCBvbmNlXCIpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGRlZmF1bHRDYXNlUmVkdWNlciA9IHJlZHVjZXI7XHJcbiAgICAgICAgICAgIHJldHVybiBidWlsZGVyO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICBidWlsZGVyQ2FsbGJhY2soYnVpbGRlcik7XHJcbiAgICByZXR1cm4gW2FjdGlvbnNNYXAsIGFjdGlvbk1hdGNoZXJzLCBkZWZhdWx0Q2FzZVJlZHVjZXJdO1xyXG59XHJcbi8vIHNyYy9jcmVhdGVSZWR1Y2VyLnRzXHJcbmZ1bmN0aW9uIGlzU3RhdGVGdW5jdGlvbih4KSB7XHJcbiAgICByZXR1cm4gdHlwZW9mIHggPT09IFwiZnVuY3Rpb25cIjtcclxufVxyXG5mdW5jdGlvbiBjcmVhdGVSZWR1Y2VyKGluaXRpYWxTdGF0ZSwgbWFwT3JCdWlsZGVyQ2FsbGJhY2ssIGFjdGlvbk1hdGNoZXJzLCBkZWZhdWx0Q2FzZVJlZHVjZXIpIHtcclxuICAgIGlmIChhY3Rpb25NYXRjaGVycyA9PT0gdm9pZCAwKSB7IGFjdGlvbk1hdGNoZXJzID0gW107IH1cclxuICAgIHZhciBfYyA9IHR5cGVvZiBtYXBPckJ1aWxkZXJDYWxsYmFjayA9PT0gXCJmdW5jdGlvblwiID8gZXhlY3V0ZVJlZHVjZXJCdWlsZGVyQ2FsbGJhY2sobWFwT3JCdWlsZGVyQ2FsbGJhY2spIDogW21hcE9yQnVpbGRlckNhbGxiYWNrLCBhY3Rpb25NYXRjaGVycywgZGVmYXVsdENhc2VSZWR1Y2VyXSwgYWN0aW9uc01hcCA9IF9jWzBdLCBmaW5hbEFjdGlvbk1hdGNoZXJzID0gX2NbMV0sIGZpbmFsRGVmYXVsdENhc2VSZWR1Y2VyID0gX2NbMl07XHJcbiAgICB2YXIgZ2V0SW5pdGlhbFN0YXRlO1xyXG4gICAgaWYgKGlzU3RhdGVGdW5jdGlvbihpbml0aWFsU3RhdGUpKSB7XHJcbiAgICAgICAgZ2V0SW5pdGlhbFN0YXRlID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gY3JlYXRlTmV4dFN0YXRlKGluaXRpYWxTdGF0ZSgpLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgfSk7IH07XHJcbiAgICB9XHJcbiAgICBlbHNlIHtcclxuICAgICAgICB2YXIgZnJvemVuSW5pdGlhbFN0YXRlXzEgPSBjcmVhdGVOZXh0U3RhdGUoaW5pdGlhbFN0YXRlLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgZ2V0SW5pdGlhbFN0YXRlID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gZnJvemVuSW5pdGlhbFN0YXRlXzE7IH07XHJcbiAgICB9XHJcbiAgICBmdW5jdGlvbiByZWR1Y2VyKHN0YXRlLCBhY3Rpb24pIHtcclxuICAgICAgICBpZiAoc3RhdGUgPT09IHZvaWQgMCkgeyBzdGF0ZSA9IGdldEluaXRpYWxTdGF0ZSgpOyB9XHJcbiAgICAgICAgdmFyIGNhc2VSZWR1Y2VycyA9IF9fc3ByZWFkQXJyYXkoW1xyXG4gICAgICAgICAgICBhY3Rpb25zTWFwW2FjdGlvbi50eXBlXVxyXG4gICAgICAgIF0sIGZpbmFsQWN0aW9uTWF0Y2hlcnMuZmlsdGVyKGZ1bmN0aW9uIChfYykge1xyXG4gICAgICAgICAgICB2YXIgbWF0Y2hlciA9IF9jLm1hdGNoZXI7XHJcbiAgICAgICAgICAgIHJldHVybiBtYXRjaGVyKGFjdGlvbik7XHJcbiAgICAgICAgfSkubWFwKGZ1bmN0aW9uIChfYykge1xyXG4gICAgICAgICAgICB2YXIgcmVkdWNlcjIgPSBfYy5yZWR1Y2VyO1xyXG4gICAgICAgICAgICByZXR1cm4gcmVkdWNlcjI7XHJcbiAgICAgICAgfSkpO1xyXG4gICAgICAgIGlmIChjYXNlUmVkdWNlcnMuZmlsdGVyKGZ1bmN0aW9uIChjcikgeyByZXR1cm4gISFjcjsgfSkubGVuZ3RoID09PSAwKSB7XHJcbiAgICAgICAgICAgIGNhc2VSZWR1Y2VycyA9IFtmaW5hbERlZmF1bHRDYXNlUmVkdWNlcl07XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBjYXNlUmVkdWNlcnMucmVkdWNlKGZ1bmN0aW9uIChwcmV2aW91c1N0YXRlLCBjYXNlUmVkdWNlcikge1xyXG4gICAgICAgICAgICBpZiAoY2FzZVJlZHVjZXIpIHtcclxuICAgICAgICAgICAgICAgIGlmIChpc0RyYWZ0MihwcmV2aW91c1N0YXRlKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBkcmFmdCA9IHByZXZpb3VzU3RhdGU7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIHJlc3VsdCA9IGNhc2VSZWR1Y2VyKGRyYWZ0LCBhY3Rpb24pO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgcmVzdWx0ID09PSBcInVuZGVmaW5lZFwiKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBwcmV2aW91c1N0YXRlO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSBpZiAoIWlzRHJhZnRhYmxlKHByZXZpb3VzU3RhdGUpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIHJlc3VsdCA9IGNhc2VSZWR1Y2VyKHByZXZpb3VzU3RhdGUsIGFjdGlvbik7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiByZXN1bHQgPT09IFwidW5kZWZpbmVkXCIpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHByZXZpb3VzU3RhdGUgPT09IG51bGwpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBwcmV2aW91c1N0YXRlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IEVycm9yKFwiQSBjYXNlIHJlZHVjZXIgb24gYSBub24tZHJhZnRhYmxlIHZhbHVlIG11c3Qgbm90IHJldHVybiB1bmRlZmluZWRcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gY3JlYXRlTmV4dFN0YXRlKHByZXZpb3VzU3RhdGUsIGZ1bmN0aW9uIChkcmFmdCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gY2FzZVJlZHVjZXIoZHJhZnQsIGFjdGlvbik7XHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIHByZXZpb3VzU3RhdGU7XHJcbiAgICAgICAgfSwgc3RhdGUpO1xyXG4gICAgfVxyXG4gICAgcmVkdWNlci5nZXRJbml0aWFsU3RhdGUgPSBnZXRJbml0aWFsU3RhdGU7XHJcbiAgICByZXR1cm4gcmVkdWNlcjtcclxufVxyXG4vLyBzcmMvY3JlYXRlU2xpY2UudHNcclxuZnVuY3Rpb24gZ2V0VHlwZTIoc2xpY2UsIGFjdGlvbktleSkge1xyXG4gICAgcmV0dXJuIHNsaWNlICsgXCIvXCIgKyBhY3Rpb25LZXk7XHJcbn1cclxuZnVuY3Rpb24gY3JlYXRlU2xpY2Uob3B0aW9ucykge1xyXG4gICAgdmFyIG5hbWUgPSBvcHRpb25zLm5hbWU7XHJcbiAgICBpZiAoIW5hbWUpIHtcclxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJgbmFtZWAgaXMgYSByZXF1aXJlZCBvcHRpb24gZm9yIGNyZWF0ZVNsaWNlXCIpO1xyXG4gICAgfVxyXG4gICAgdmFyIGluaXRpYWxTdGF0ZSA9IHR5cGVvZiBvcHRpb25zLmluaXRpYWxTdGF0ZSA9PSBcImZ1bmN0aW9uXCIgPyBvcHRpb25zLmluaXRpYWxTdGF0ZSA6IGRlZmF1bHQyKG9wdGlvbnMuaW5pdGlhbFN0YXRlLCBmdW5jdGlvbiAoKSB7XHJcbiAgICB9KTtcclxuICAgIHZhciByZWR1Y2VycyA9IG9wdGlvbnMucmVkdWNlcnMgfHwge307XHJcbiAgICB2YXIgcmVkdWNlck5hbWVzID0gT2JqZWN0LmtleXMocmVkdWNlcnMpO1xyXG4gICAgdmFyIHNsaWNlQ2FzZVJlZHVjZXJzQnlOYW1lID0ge307XHJcbiAgICB2YXIgc2xpY2VDYXNlUmVkdWNlcnNCeVR5cGUgPSB7fTtcclxuICAgIHZhciBhY3Rpb25DcmVhdG9ycyA9IHt9O1xyXG4gICAgcmVkdWNlck5hbWVzLmZvckVhY2goZnVuY3Rpb24gKHJlZHVjZXJOYW1lKSB7XHJcbiAgICAgICAgdmFyIG1heWJlUmVkdWNlcldpdGhQcmVwYXJlID0gcmVkdWNlcnNbcmVkdWNlck5hbWVdO1xyXG4gICAgICAgIHZhciB0eXBlID0gZ2V0VHlwZTIobmFtZSwgcmVkdWNlck5hbWUpO1xyXG4gICAgICAgIHZhciBjYXNlUmVkdWNlcjtcclxuICAgICAgICB2YXIgcHJlcGFyZUNhbGxiYWNrO1xyXG4gICAgICAgIGlmIChcInJlZHVjZXJcIiBpbiBtYXliZVJlZHVjZXJXaXRoUHJlcGFyZSkge1xyXG4gICAgICAgICAgICBjYXNlUmVkdWNlciA9IG1heWJlUmVkdWNlcldpdGhQcmVwYXJlLnJlZHVjZXI7XHJcbiAgICAgICAgICAgIHByZXBhcmVDYWxsYmFjayA9IG1heWJlUmVkdWNlcldpdGhQcmVwYXJlLnByZXBhcmU7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICBjYXNlUmVkdWNlciA9IG1heWJlUmVkdWNlcldpdGhQcmVwYXJlO1xyXG4gICAgICAgIH1cclxuICAgICAgICBzbGljZUNhc2VSZWR1Y2Vyc0J5TmFtZVtyZWR1Y2VyTmFtZV0gPSBjYXNlUmVkdWNlcjtcclxuICAgICAgICBzbGljZUNhc2VSZWR1Y2Vyc0J5VHlwZVt0eXBlXSA9IGNhc2VSZWR1Y2VyO1xyXG4gICAgICAgIGFjdGlvbkNyZWF0b3JzW3JlZHVjZXJOYW1lXSA9IHByZXBhcmVDYWxsYmFjayA/IGNyZWF0ZUFjdGlvbih0eXBlLCBwcmVwYXJlQ2FsbGJhY2spIDogY3JlYXRlQWN0aW9uKHR5cGUpO1xyXG4gICAgfSk7XHJcbiAgICBmdW5jdGlvbiBidWlsZFJlZHVjZXIoKSB7XHJcbiAgICAgICAgdmFyIF9jID0gdHlwZW9mIG9wdGlvbnMuZXh0cmFSZWR1Y2VycyA9PT0gXCJmdW5jdGlvblwiID8gZXhlY3V0ZVJlZHVjZXJCdWlsZGVyQ2FsbGJhY2sob3B0aW9ucy5leHRyYVJlZHVjZXJzKSA6IFtvcHRpb25zLmV4dHJhUmVkdWNlcnNdLCBfZCA9IF9jWzBdLCBleHRyYVJlZHVjZXJzID0gX2QgPT09IHZvaWQgMCA/IHt9IDogX2QsIF9lID0gX2NbMV0sIGFjdGlvbk1hdGNoZXJzID0gX2UgPT09IHZvaWQgMCA/IFtdIDogX2UsIF9mID0gX2NbMl0sIGRlZmF1bHRDYXNlUmVkdWNlciA9IF9mID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfZjtcclxuICAgICAgICB2YXIgZmluYWxDYXNlUmVkdWNlcnMgPSBfX3NwcmVhZFZhbHVlcyhfX3NwcmVhZFZhbHVlcyh7fSwgZXh0cmFSZWR1Y2VycyksIHNsaWNlQ2FzZVJlZHVjZXJzQnlUeXBlKTtcclxuICAgICAgICByZXR1cm4gY3JlYXRlUmVkdWNlcihpbml0aWFsU3RhdGUsIGZpbmFsQ2FzZVJlZHVjZXJzLCBhY3Rpb25NYXRjaGVycywgZGVmYXVsdENhc2VSZWR1Y2VyKTtcclxuICAgIH1cclxuICAgIHZhciBfcmVkdWNlcjtcclxuICAgIHJldHVybiB7XHJcbiAgICAgICAgbmFtZTogbmFtZSxcclxuICAgICAgICByZWR1Y2VyOiBmdW5jdGlvbiAoc3RhdGUsIGFjdGlvbikge1xyXG4gICAgICAgICAgICBpZiAoIV9yZWR1Y2VyKVxyXG4gICAgICAgICAgICAgICAgX3JlZHVjZXIgPSBidWlsZFJlZHVjZXIoKTtcclxuICAgICAgICAgICAgcmV0dXJuIF9yZWR1Y2VyKHN0YXRlLCBhY3Rpb24pO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgYWN0aW9uczogYWN0aW9uQ3JlYXRvcnMsXHJcbiAgICAgICAgY2FzZVJlZHVjZXJzOiBzbGljZUNhc2VSZWR1Y2Vyc0J5TmFtZSxcclxuICAgICAgICBnZXRJbml0aWFsU3RhdGU6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgaWYgKCFfcmVkdWNlcilcclxuICAgICAgICAgICAgICAgIF9yZWR1Y2VyID0gYnVpbGRSZWR1Y2VyKCk7XHJcbiAgICAgICAgICAgIHJldHVybiBfcmVkdWNlci5nZXRJbml0aWFsU3RhdGUoKTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG59XHJcbi8vIHNyYy9lbnRpdGllcy9lbnRpdHlfc3RhdGUudHNcclxuZnVuY3Rpb24gZ2V0SW5pdGlhbEVudGl0eVN0YXRlKCkge1xyXG4gICAgcmV0dXJuIHtcclxuICAgICAgICBpZHM6IFtdLFxyXG4gICAgICAgIGVudGl0aWVzOiB7fVxyXG4gICAgfTtcclxufVxyXG5mdW5jdGlvbiBjcmVhdGVJbml0aWFsU3RhdGVGYWN0b3J5KCkge1xyXG4gICAgZnVuY3Rpb24gZ2V0SW5pdGlhbFN0YXRlKGFkZGl0aW9uYWxTdGF0ZSkge1xyXG4gICAgICAgIGlmIChhZGRpdGlvbmFsU3RhdGUgPT09IHZvaWQgMCkgeyBhZGRpdGlvbmFsU3RhdGUgPSB7fTsgfVxyXG4gICAgICAgIHJldHVybiBPYmplY3QuYXNzaWduKGdldEluaXRpYWxFbnRpdHlTdGF0ZSgpLCBhZGRpdGlvbmFsU3RhdGUpO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHsgZ2V0SW5pdGlhbFN0YXRlOiBnZXRJbml0aWFsU3RhdGUgfTtcclxufVxyXG4vLyBzcmMvZW50aXRpZXMvc3RhdGVfc2VsZWN0b3JzLnRzXHJcbmZ1bmN0aW9uIGNyZWF0ZVNlbGVjdG9yc0ZhY3RvcnkoKSB7XHJcbiAgICBmdW5jdGlvbiBnZXRTZWxlY3RvcnMoc2VsZWN0U3RhdGUpIHtcclxuICAgICAgICB2YXIgc2VsZWN0SWRzID0gZnVuY3Rpb24gKHN0YXRlKSB7IHJldHVybiBzdGF0ZS5pZHM7IH07XHJcbiAgICAgICAgdmFyIHNlbGVjdEVudGl0aWVzID0gZnVuY3Rpb24gKHN0YXRlKSB7IHJldHVybiBzdGF0ZS5lbnRpdGllczsgfTtcclxuICAgICAgICB2YXIgc2VsZWN0QWxsID0gY3JlYXRlRHJhZnRTYWZlU2VsZWN0b3Ioc2VsZWN0SWRzLCBzZWxlY3RFbnRpdGllcywgZnVuY3Rpb24gKGlkcywgZW50aXRpZXMpIHsgcmV0dXJuIGlkcy5tYXAoZnVuY3Rpb24gKGlkKSB7IHJldHVybiBlbnRpdGllc1tpZF07IH0pOyB9KTtcclxuICAgICAgICB2YXIgc2VsZWN0SWQgPSBmdW5jdGlvbiAoXywgaWQpIHsgcmV0dXJuIGlkOyB9O1xyXG4gICAgICAgIHZhciBzZWxlY3RCeUlkID0gZnVuY3Rpb24gKGVudGl0aWVzLCBpZCkgeyByZXR1cm4gZW50aXRpZXNbaWRdOyB9O1xyXG4gICAgICAgIHZhciBzZWxlY3RUb3RhbCA9IGNyZWF0ZURyYWZ0U2FmZVNlbGVjdG9yKHNlbGVjdElkcywgZnVuY3Rpb24gKGlkcykgeyByZXR1cm4gaWRzLmxlbmd0aDsgfSk7XHJcbiAgICAgICAgaWYgKCFzZWxlY3RTdGF0ZSkge1xyXG4gICAgICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICAgICAgc2VsZWN0SWRzOiBzZWxlY3RJZHMsXHJcbiAgICAgICAgICAgICAgICBzZWxlY3RFbnRpdGllczogc2VsZWN0RW50aXRpZXMsXHJcbiAgICAgICAgICAgICAgICBzZWxlY3RBbGw6IHNlbGVjdEFsbCxcclxuICAgICAgICAgICAgICAgIHNlbGVjdFRvdGFsOiBzZWxlY3RUb3RhbCxcclxuICAgICAgICAgICAgICAgIHNlbGVjdEJ5SWQ6IGNyZWF0ZURyYWZ0U2FmZVNlbGVjdG9yKHNlbGVjdEVudGl0aWVzLCBzZWxlY3RJZCwgc2VsZWN0QnlJZClcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdmFyIHNlbGVjdEdsb2JhbGl6ZWRFbnRpdGllcyA9IGNyZWF0ZURyYWZ0U2FmZVNlbGVjdG9yKHNlbGVjdFN0YXRlLCBzZWxlY3RFbnRpdGllcyk7XHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgc2VsZWN0SWRzOiBjcmVhdGVEcmFmdFNhZmVTZWxlY3RvcihzZWxlY3RTdGF0ZSwgc2VsZWN0SWRzKSxcclxuICAgICAgICAgICAgc2VsZWN0RW50aXRpZXM6IHNlbGVjdEdsb2JhbGl6ZWRFbnRpdGllcyxcclxuICAgICAgICAgICAgc2VsZWN0QWxsOiBjcmVhdGVEcmFmdFNhZmVTZWxlY3RvcihzZWxlY3RTdGF0ZSwgc2VsZWN0QWxsKSxcclxuICAgICAgICAgICAgc2VsZWN0VG90YWw6IGNyZWF0ZURyYWZ0U2FmZVNlbGVjdG9yKHNlbGVjdFN0YXRlLCBzZWxlY3RUb3RhbCksXHJcbiAgICAgICAgICAgIHNlbGVjdEJ5SWQ6IGNyZWF0ZURyYWZ0U2FmZVNlbGVjdG9yKHNlbGVjdEdsb2JhbGl6ZWRFbnRpdGllcywgc2VsZWN0SWQsIHNlbGVjdEJ5SWQpXHJcbiAgICAgICAgfTtcclxuICAgIH1cclxuICAgIHJldHVybiB7IGdldFNlbGVjdG9yczogZ2V0U2VsZWN0b3JzIH07XHJcbn1cclxuLy8gc3JjL2VudGl0aWVzL3N0YXRlX2FkYXB0ZXIudHNcclxuaW1wb3J0IGNyZWF0ZU5leHRTdGF0ZTIsIHsgaXNEcmFmdCBhcyBpc0RyYWZ0MyB9IGZyb20gXCJpbW1lclwiO1xyXG5mdW5jdGlvbiBjcmVhdGVTaW5nbGVBcmd1bWVudFN0YXRlT3BlcmF0b3IobXV0YXRvcikge1xyXG4gICAgdmFyIG9wZXJhdG9yID0gY3JlYXRlU3RhdGVPcGVyYXRvcihmdW5jdGlvbiAoXywgc3RhdGUpIHsgcmV0dXJuIG11dGF0b3Ioc3RhdGUpOyB9KTtcclxuICAgIHJldHVybiBmdW5jdGlvbiBvcGVyYXRpb24oc3RhdGUpIHtcclxuICAgICAgICByZXR1cm4gb3BlcmF0b3Ioc3RhdGUsIHZvaWQgMCk7XHJcbiAgICB9O1xyXG59XHJcbmZ1bmN0aW9uIGNyZWF0ZVN0YXRlT3BlcmF0b3IobXV0YXRvcikge1xyXG4gICAgcmV0dXJuIGZ1bmN0aW9uIG9wZXJhdGlvbihzdGF0ZSwgYXJnKSB7XHJcbiAgICAgICAgZnVuY3Rpb24gaXNQYXlsb2FkQWN0aW9uQXJndW1lbnQoYXJnMikge1xyXG4gICAgICAgICAgICByZXR1cm4gaXNGU0EoYXJnMik7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHZhciBydW5NdXRhdG9yID0gZnVuY3Rpb24gKGRyYWZ0KSB7XHJcbiAgICAgICAgICAgIGlmIChpc1BheWxvYWRBY3Rpb25Bcmd1bWVudChhcmcpKSB7XHJcbiAgICAgICAgICAgICAgICBtdXRhdG9yKGFyZy5wYXlsb2FkLCBkcmFmdCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBtdXRhdG9yKGFyZywgZHJhZnQpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfTtcclxuICAgICAgICBpZiAoaXNEcmFmdDMoc3RhdGUpKSB7XHJcbiAgICAgICAgICAgIHJ1bk11dGF0b3Ioc3RhdGUpO1xyXG4gICAgICAgICAgICByZXR1cm4gc3RhdGU7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICByZXR1cm4gY3JlYXRlTmV4dFN0YXRlMihzdGF0ZSwgcnVuTXV0YXRvcik7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxufVxyXG4vLyBzcmMvZW50aXRpZXMvdXRpbHMudHNcclxuZnVuY3Rpb24gc2VsZWN0SWRWYWx1ZShlbnRpdHksIHNlbGVjdElkKSB7XHJcbiAgICB2YXIga2V5ID0gc2VsZWN0SWQoZW50aXR5KTtcclxuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgJiYga2V5ID09PSB2b2lkIDApIHtcclxuICAgICAgICBjb25zb2xlLndhcm4oXCJUaGUgZW50aXR5IHBhc3NlZCB0byB0aGUgYHNlbGVjdElkYCBpbXBsZW1lbnRhdGlvbiByZXR1cm5lZCB1bmRlZmluZWQuXCIsIFwiWW91IHNob3VsZCBwcm9iYWJseSBwcm92aWRlIHlvdXIgb3duIGBzZWxlY3RJZGAgaW1wbGVtZW50YXRpb24uXCIsIFwiVGhlIGVudGl0eSB0aGF0IHdhcyBwYXNzZWQ6XCIsIGVudGl0eSwgXCJUaGUgYHNlbGVjdElkYCBpbXBsZW1lbnRhdGlvbjpcIiwgc2VsZWN0SWQudG9TdHJpbmcoKSk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4ga2V5O1xyXG59XHJcbmZ1bmN0aW9uIGVuc3VyZUVudGl0aWVzQXJyYXkoZW50aXRpZXMpIHtcclxuICAgIGlmICghQXJyYXkuaXNBcnJheShlbnRpdGllcykpIHtcclxuICAgICAgICBlbnRpdGllcyA9IE9iamVjdC52YWx1ZXMoZW50aXRpZXMpO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIGVudGl0aWVzO1xyXG59XHJcbmZ1bmN0aW9uIHNwbGl0QWRkZWRVcGRhdGVkRW50aXRpZXMobmV3RW50aXRpZXMsIHNlbGVjdElkLCBzdGF0ZSkge1xyXG4gICAgbmV3RW50aXRpZXMgPSBlbnN1cmVFbnRpdGllc0FycmF5KG5ld0VudGl0aWVzKTtcclxuICAgIHZhciBhZGRlZCA9IFtdO1xyXG4gICAgdmFyIHVwZGF0ZWQgPSBbXTtcclxuICAgIGZvciAodmFyIF9pID0gMCwgbmV3RW50aXRpZXNfMSA9IG5ld0VudGl0aWVzOyBfaSA8IG5ld0VudGl0aWVzXzEubGVuZ3RoOyBfaSsrKSB7XHJcbiAgICAgICAgdmFyIGVudGl0eSA9IG5ld0VudGl0aWVzXzFbX2ldO1xyXG4gICAgICAgIHZhciBpZCA9IHNlbGVjdElkVmFsdWUoZW50aXR5LCBzZWxlY3RJZCk7XHJcbiAgICAgICAgaWYgKGlkIGluIHN0YXRlLmVudGl0aWVzKSB7XHJcbiAgICAgICAgICAgIHVwZGF0ZWQucHVzaCh7IGlkOiBpZCwgY2hhbmdlczogZW50aXR5IH0pO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgYWRkZWQucHVzaChlbnRpdHkpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIHJldHVybiBbYWRkZWQsIHVwZGF0ZWRdO1xyXG59XHJcbi8vIHNyYy9lbnRpdGllcy91bnNvcnRlZF9zdGF0ZV9hZGFwdGVyLnRzXHJcbmZ1bmN0aW9uIGNyZWF0ZVVuc29ydGVkU3RhdGVBZGFwdGVyKHNlbGVjdElkKSB7XHJcbiAgICBmdW5jdGlvbiBhZGRPbmVNdXRhYmx5KGVudGl0eSwgc3RhdGUpIHtcclxuICAgICAgICB2YXIga2V5ID0gc2VsZWN0SWRWYWx1ZShlbnRpdHksIHNlbGVjdElkKTtcclxuICAgICAgICBpZiAoa2V5IGluIHN0YXRlLmVudGl0aWVzKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgc3RhdGUuaWRzLnB1c2goa2V5KTtcclxuICAgICAgICBzdGF0ZS5lbnRpdGllc1trZXldID0gZW50aXR5O1xyXG4gICAgfVxyXG4gICAgZnVuY3Rpb24gYWRkTWFueU11dGFibHkobmV3RW50aXRpZXMsIHN0YXRlKSB7XHJcbiAgICAgICAgbmV3RW50aXRpZXMgPSBlbnN1cmVFbnRpdGllc0FycmF5KG5ld0VudGl0aWVzKTtcclxuICAgICAgICBmb3IgKHZhciBfaSA9IDAsIG5ld0VudGl0aWVzXzIgPSBuZXdFbnRpdGllczsgX2kgPCBuZXdFbnRpdGllc18yLmxlbmd0aDsgX2krKykge1xyXG4gICAgICAgICAgICB2YXIgZW50aXR5ID0gbmV3RW50aXRpZXNfMltfaV07XHJcbiAgICAgICAgICAgIGFkZE9uZU11dGFibHkoZW50aXR5LCBzdGF0ZSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgZnVuY3Rpb24gc2V0T25lTXV0YWJseShlbnRpdHksIHN0YXRlKSB7XHJcbiAgICAgICAgdmFyIGtleSA9IHNlbGVjdElkVmFsdWUoZW50aXR5LCBzZWxlY3RJZCk7XHJcbiAgICAgICAgaWYgKCEoa2V5IGluIHN0YXRlLmVudGl0aWVzKSkge1xyXG4gICAgICAgICAgICBzdGF0ZS5pZHMucHVzaChrZXkpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBzdGF0ZS5lbnRpdGllc1trZXldID0gZW50aXR5O1xyXG4gICAgfVxyXG4gICAgZnVuY3Rpb24gc2V0TWFueU11dGFibHkobmV3RW50aXRpZXMsIHN0YXRlKSB7XHJcbiAgICAgICAgbmV3RW50aXRpZXMgPSBlbnN1cmVFbnRpdGllc0FycmF5KG5ld0VudGl0aWVzKTtcclxuICAgICAgICBmb3IgKHZhciBfaSA9IDAsIG5ld0VudGl0aWVzXzMgPSBuZXdFbnRpdGllczsgX2kgPCBuZXdFbnRpdGllc18zLmxlbmd0aDsgX2krKykge1xyXG4gICAgICAgICAgICB2YXIgZW50aXR5ID0gbmV3RW50aXRpZXNfM1tfaV07XHJcbiAgICAgICAgICAgIHNldE9uZU11dGFibHkoZW50aXR5LCBzdGF0ZSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgZnVuY3Rpb24gc2V0QWxsTXV0YWJseShuZXdFbnRpdGllcywgc3RhdGUpIHtcclxuICAgICAgICBuZXdFbnRpdGllcyA9IGVuc3VyZUVudGl0aWVzQXJyYXkobmV3RW50aXRpZXMpO1xyXG4gICAgICAgIHN0YXRlLmlkcyA9IFtdO1xyXG4gICAgICAgIHN0YXRlLmVudGl0aWVzID0ge307XHJcbiAgICAgICAgYWRkTWFueU11dGFibHkobmV3RW50aXRpZXMsIHN0YXRlKTtcclxuICAgIH1cclxuICAgIGZ1bmN0aW9uIHJlbW92ZU9uZU11dGFibHkoa2V5LCBzdGF0ZSkge1xyXG4gICAgICAgIHJldHVybiByZW1vdmVNYW55TXV0YWJseShba2V5XSwgc3RhdGUpO1xyXG4gICAgfVxyXG4gICAgZnVuY3Rpb24gcmVtb3ZlTWFueU11dGFibHkoa2V5cywgc3RhdGUpIHtcclxuICAgICAgICB2YXIgZGlkTXV0YXRlID0gZmFsc2U7XHJcbiAgICAgICAga2V5cy5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcclxuICAgICAgICAgICAgaWYgKGtleSBpbiBzdGF0ZS5lbnRpdGllcykge1xyXG4gICAgICAgICAgICAgICAgZGVsZXRlIHN0YXRlLmVudGl0aWVzW2tleV07XHJcbiAgICAgICAgICAgICAgICBkaWRNdXRhdGUgPSB0cnVlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgaWYgKGRpZE11dGF0ZSkge1xyXG4gICAgICAgICAgICBzdGF0ZS5pZHMgPSBzdGF0ZS5pZHMuZmlsdGVyKGZ1bmN0aW9uIChpZCkgeyByZXR1cm4gaWQgaW4gc3RhdGUuZW50aXRpZXM7IH0pO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGZ1bmN0aW9uIHJlbW92ZUFsbE11dGFibHkoc3RhdGUpIHtcclxuICAgICAgICBPYmplY3QuYXNzaWduKHN0YXRlLCB7XHJcbiAgICAgICAgICAgIGlkczogW10sXHJcbiAgICAgICAgICAgIGVudGl0aWVzOiB7fVxyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG4gICAgZnVuY3Rpb24gdGFrZU5ld0tleShrZXlzLCB1cGRhdGUsIHN0YXRlKSB7XHJcbiAgICAgICAgdmFyIG9yaWdpbmFsMiA9IHN0YXRlLmVudGl0aWVzW3VwZGF0ZS5pZF07XHJcbiAgICAgICAgdmFyIHVwZGF0ZWQgPSBPYmplY3QuYXNzaWduKHt9LCBvcmlnaW5hbDIsIHVwZGF0ZS5jaGFuZ2VzKTtcclxuICAgICAgICB2YXIgbmV3S2V5ID0gc2VsZWN0SWRWYWx1ZSh1cGRhdGVkLCBzZWxlY3RJZCk7XHJcbiAgICAgICAgdmFyIGhhc05ld0tleSA9IG5ld0tleSAhPT0gdXBkYXRlLmlkO1xyXG4gICAgICAgIGlmIChoYXNOZXdLZXkpIHtcclxuICAgICAgICAgICAga2V5c1t1cGRhdGUuaWRdID0gbmV3S2V5O1xyXG4gICAgICAgICAgICBkZWxldGUgc3RhdGUuZW50aXRpZXNbdXBkYXRlLmlkXTtcclxuICAgICAgICB9XHJcbiAgICAgICAgc3RhdGUuZW50aXRpZXNbbmV3S2V5XSA9IHVwZGF0ZWQ7XHJcbiAgICAgICAgcmV0dXJuIGhhc05ld0tleTtcclxuICAgIH1cclxuICAgIGZ1bmN0aW9uIHVwZGF0ZU9uZU11dGFibHkodXBkYXRlLCBzdGF0ZSkge1xyXG4gICAgICAgIHJldHVybiB1cGRhdGVNYW55TXV0YWJseShbdXBkYXRlXSwgc3RhdGUpO1xyXG4gICAgfVxyXG4gICAgZnVuY3Rpb24gdXBkYXRlTWFueU11dGFibHkodXBkYXRlcywgc3RhdGUpIHtcclxuICAgICAgICB2YXIgbmV3S2V5cyA9IHt9O1xyXG4gICAgICAgIHZhciB1cGRhdGVzUGVyRW50aXR5ID0ge307XHJcbiAgICAgICAgdXBkYXRlcy5mb3JFYWNoKGZ1bmN0aW9uICh1cGRhdGUpIHtcclxuICAgICAgICAgICAgaWYgKHVwZGF0ZS5pZCBpbiBzdGF0ZS5lbnRpdGllcykge1xyXG4gICAgICAgICAgICAgICAgdXBkYXRlc1BlckVudGl0eVt1cGRhdGUuaWRdID0ge1xyXG4gICAgICAgICAgICAgICAgICAgIGlkOiB1cGRhdGUuaWQsXHJcbiAgICAgICAgICAgICAgICAgICAgY2hhbmdlczogX19zcHJlYWRWYWx1ZXMoX19zcHJlYWRWYWx1ZXMoe30sIHVwZGF0ZXNQZXJFbnRpdHlbdXBkYXRlLmlkXSA/IHVwZGF0ZXNQZXJFbnRpdHlbdXBkYXRlLmlkXS5jaGFuZ2VzIDogbnVsbCksIHVwZGF0ZS5jaGFuZ2VzKVxyXG4gICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHVwZGF0ZXMgPSBPYmplY3QudmFsdWVzKHVwZGF0ZXNQZXJFbnRpdHkpO1xyXG4gICAgICAgIHZhciBkaWRNdXRhdGVFbnRpdGllcyA9IHVwZGF0ZXMubGVuZ3RoID4gMDtcclxuICAgICAgICBpZiAoZGlkTXV0YXRlRW50aXRpZXMpIHtcclxuICAgICAgICAgICAgdmFyIGRpZE11dGF0ZUlkcyA9IHVwZGF0ZXMuZmlsdGVyKGZ1bmN0aW9uICh1cGRhdGUpIHsgcmV0dXJuIHRha2VOZXdLZXkobmV3S2V5cywgdXBkYXRlLCBzdGF0ZSk7IH0pLmxlbmd0aCA+IDA7XHJcbiAgICAgICAgICAgIGlmIChkaWRNdXRhdGVJZHMpIHtcclxuICAgICAgICAgICAgICAgIHN0YXRlLmlkcyA9IHN0YXRlLmlkcy5tYXAoZnVuY3Rpb24gKGlkKSB7IHJldHVybiBuZXdLZXlzW2lkXSB8fCBpZDsgfSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBmdW5jdGlvbiB1cHNlcnRPbmVNdXRhYmx5KGVudGl0eSwgc3RhdGUpIHtcclxuICAgICAgICByZXR1cm4gdXBzZXJ0TWFueU11dGFibHkoW2VudGl0eV0sIHN0YXRlKTtcclxuICAgIH1cclxuICAgIGZ1bmN0aW9uIHVwc2VydE1hbnlNdXRhYmx5KG5ld0VudGl0aWVzLCBzdGF0ZSkge1xyXG4gICAgICAgIHZhciBfYyA9IHNwbGl0QWRkZWRVcGRhdGVkRW50aXRpZXMobmV3RW50aXRpZXMsIHNlbGVjdElkLCBzdGF0ZSksIGFkZGVkID0gX2NbMF0sIHVwZGF0ZWQgPSBfY1sxXTtcclxuICAgICAgICB1cGRhdGVNYW55TXV0YWJseSh1cGRhdGVkLCBzdGF0ZSk7XHJcbiAgICAgICAgYWRkTWFueU11dGFibHkoYWRkZWQsIHN0YXRlKTtcclxuICAgIH1cclxuICAgIHJldHVybiB7XHJcbiAgICAgICAgcmVtb3ZlQWxsOiBjcmVhdGVTaW5nbGVBcmd1bWVudFN0YXRlT3BlcmF0b3IocmVtb3ZlQWxsTXV0YWJseSksXHJcbiAgICAgICAgYWRkT25lOiBjcmVhdGVTdGF0ZU9wZXJhdG9yKGFkZE9uZU11dGFibHkpLFxyXG4gICAgICAgIGFkZE1hbnk6IGNyZWF0ZVN0YXRlT3BlcmF0b3IoYWRkTWFueU11dGFibHkpLFxyXG4gICAgICAgIHNldE9uZTogY3JlYXRlU3RhdGVPcGVyYXRvcihzZXRPbmVNdXRhYmx5KSxcclxuICAgICAgICBzZXRNYW55OiBjcmVhdGVTdGF0ZU9wZXJhdG9yKHNldE1hbnlNdXRhYmx5KSxcclxuICAgICAgICBzZXRBbGw6IGNyZWF0ZVN0YXRlT3BlcmF0b3Ioc2V0QWxsTXV0YWJseSksXHJcbiAgICAgICAgdXBkYXRlT25lOiBjcmVhdGVTdGF0ZU9wZXJhdG9yKHVwZGF0ZU9uZU11dGFibHkpLFxyXG4gICAgICAgIHVwZGF0ZU1hbnk6IGNyZWF0ZVN0YXRlT3BlcmF0b3IodXBkYXRlTWFueU11dGFibHkpLFxyXG4gICAgICAgIHVwc2VydE9uZTogY3JlYXRlU3RhdGVPcGVyYXRvcih1cHNlcnRPbmVNdXRhYmx5KSxcclxuICAgICAgICB1cHNlcnRNYW55OiBjcmVhdGVTdGF0ZU9wZXJhdG9yKHVwc2VydE1hbnlNdXRhYmx5KSxcclxuICAgICAgICByZW1vdmVPbmU6IGNyZWF0ZVN0YXRlT3BlcmF0b3IocmVtb3ZlT25lTXV0YWJseSksXHJcbiAgICAgICAgcmVtb3ZlTWFueTogY3JlYXRlU3RhdGVPcGVyYXRvcihyZW1vdmVNYW55TXV0YWJseSlcclxuICAgIH07XHJcbn1cclxuLy8gc3JjL2VudGl0aWVzL3NvcnRlZF9zdGF0ZV9hZGFwdGVyLnRzXHJcbmZ1bmN0aW9uIGNyZWF0ZVNvcnRlZFN0YXRlQWRhcHRlcihzZWxlY3RJZCwgc29ydCkge1xyXG4gICAgdmFyIF9jID0gY3JlYXRlVW5zb3J0ZWRTdGF0ZUFkYXB0ZXIoc2VsZWN0SWQpLCByZW1vdmVPbmUgPSBfYy5yZW1vdmVPbmUsIHJlbW92ZU1hbnkgPSBfYy5yZW1vdmVNYW55LCByZW1vdmVBbGwgPSBfYy5yZW1vdmVBbGw7XHJcbiAgICBmdW5jdGlvbiBhZGRPbmVNdXRhYmx5KGVudGl0eSwgc3RhdGUpIHtcclxuICAgICAgICByZXR1cm4gYWRkTWFueU11dGFibHkoW2VudGl0eV0sIHN0YXRlKTtcclxuICAgIH1cclxuICAgIGZ1bmN0aW9uIGFkZE1hbnlNdXRhYmx5KG5ld0VudGl0aWVzLCBzdGF0ZSkge1xyXG4gICAgICAgIG5ld0VudGl0aWVzID0gZW5zdXJlRW50aXRpZXNBcnJheShuZXdFbnRpdGllcyk7XHJcbiAgICAgICAgdmFyIG1vZGVscyA9IG5ld0VudGl0aWVzLmZpbHRlcihmdW5jdGlvbiAobW9kZWwpIHsgcmV0dXJuICEoc2VsZWN0SWRWYWx1ZShtb2RlbCwgc2VsZWN0SWQpIGluIHN0YXRlLmVudGl0aWVzKTsgfSk7XHJcbiAgICAgICAgaWYgKG1vZGVscy5sZW5ndGggIT09IDApIHtcclxuICAgICAgICAgICAgbWVyZ2UobW9kZWxzLCBzdGF0ZSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgZnVuY3Rpb24gc2V0T25lTXV0YWJseShlbnRpdHksIHN0YXRlKSB7XHJcbiAgICAgICAgcmV0dXJuIHNldE1hbnlNdXRhYmx5KFtlbnRpdHldLCBzdGF0ZSk7XHJcbiAgICB9XHJcbiAgICBmdW5jdGlvbiBzZXRNYW55TXV0YWJseShuZXdFbnRpdGllcywgc3RhdGUpIHtcclxuICAgICAgICBuZXdFbnRpdGllcyA9IGVuc3VyZUVudGl0aWVzQXJyYXkobmV3RW50aXRpZXMpO1xyXG4gICAgICAgIGlmIChuZXdFbnRpdGllcy5sZW5ndGggIT09IDApIHtcclxuICAgICAgICAgICAgbWVyZ2UobmV3RW50aXRpZXMsIHN0YXRlKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBmdW5jdGlvbiBzZXRBbGxNdXRhYmx5KG5ld0VudGl0aWVzLCBzdGF0ZSkge1xyXG4gICAgICAgIG5ld0VudGl0aWVzID0gZW5zdXJlRW50aXRpZXNBcnJheShuZXdFbnRpdGllcyk7XHJcbiAgICAgICAgc3RhdGUuZW50aXRpZXMgPSB7fTtcclxuICAgICAgICBzdGF0ZS5pZHMgPSBbXTtcclxuICAgICAgICBhZGRNYW55TXV0YWJseShuZXdFbnRpdGllcywgc3RhdGUpO1xyXG4gICAgfVxyXG4gICAgZnVuY3Rpb24gdXBkYXRlT25lTXV0YWJseSh1cGRhdGUsIHN0YXRlKSB7XHJcbiAgICAgICAgcmV0dXJuIHVwZGF0ZU1hbnlNdXRhYmx5KFt1cGRhdGVdLCBzdGF0ZSk7XHJcbiAgICB9XHJcbiAgICBmdW5jdGlvbiB0YWtlVXBkYXRlZE1vZGVsKG1vZGVscywgdXBkYXRlLCBzdGF0ZSkge1xyXG4gICAgICAgIGlmICghKHVwZGF0ZS5pZCBpbiBzdGF0ZS5lbnRpdGllcykpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgIH1cclxuICAgICAgICB2YXIgb3JpZ2luYWwyID0gc3RhdGUuZW50aXRpZXNbdXBkYXRlLmlkXTtcclxuICAgICAgICB2YXIgdXBkYXRlZCA9IE9iamVjdC5hc3NpZ24oe30sIG9yaWdpbmFsMiwgdXBkYXRlLmNoYW5nZXMpO1xyXG4gICAgICAgIHZhciBuZXdLZXkgPSBzZWxlY3RJZFZhbHVlKHVwZGF0ZWQsIHNlbGVjdElkKTtcclxuICAgICAgICBkZWxldGUgc3RhdGUuZW50aXRpZXNbdXBkYXRlLmlkXTtcclxuICAgICAgICBtb2RlbHMucHVzaCh1cGRhdGVkKTtcclxuICAgICAgICByZXR1cm4gbmV3S2V5ICE9PSB1cGRhdGUuaWQ7XHJcbiAgICB9XHJcbiAgICBmdW5jdGlvbiB1cGRhdGVNYW55TXV0YWJseSh1cGRhdGVzLCBzdGF0ZSkge1xyXG4gICAgICAgIHZhciBtb2RlbHMgPSBbXTtcclxuICAgICAgICB1cGRhdGVzLmZvckVhY2goZnVuY3Rpb24gKHVwZGF0ZSkgeyByZXR1cm4gdGFrZVVwZGF0ZWRNb2RlbChtb2RlbHMsIHVwZGF0ZSwgc3RhdGUpOyB9KTtcclxuICAgICAgICBpZiAobW9kZWxzLmxlbmd0aCAhPT0gMCkge1xyXG4gICAgICAgICAgICBtZXJnZShtb2RlbHMsIHN0YXRlKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBmdW5jdGlvbiB1cHNlcnRPbmVNdXRhYmx5KGVudGl0eSwgc3RhdGUpIHtcclxuICAgICAgICByZXR1cm4gdXBzZXJ0TWFueU11dGFibHkoW2VudGl0eV0sIHN0YXRlKTtcclxuICAgIH1cclxuICAgIGZ1bmN0aW9uIHVwc2VydE1hbnlNdXRhYmx5KG5ld0VudGl0aWVzLCBzdGF0ZSkge1xyXG4gICAgICAgIHZhciBfYyA9IHNwbGl0QWRkZWRVcGRhdGVkRW50aXRpZXMobmV3RW50aXRpZXMsIHNlbGVjdElkLCBzdGF0ZSksIGFkZGVkID0gX2NbMF0sIHVwZGF0ZWQgPSBfY1sxXTtcclxuICAgICAgICB1cGRhdGVNYW55TXV0YWJseSh1cGRhdGVkLCBzdGF0ZSk7XHJcbiAgICAgICAgYWRkTWFueU11dGFibHkoYWRkZWQsIHN0YXRlKTtcclxuICAgIH1cclxuICAgIGZ1bmN0aW9uIGFyZUFycmF5c0VxdWFsKGEsIGIpIHtcclxuICAgICAgICBpZiAoYS5sZW5ndGggIT09IGIubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBhLmxlbmd0aCAmJiBpIDwgYi5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICBpZiAoYVtpXSA9PT0gYltpXSkge1xyXG4gICAgICAgICAgICAgICAgY29udGludWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgIH1cclxuICAgIGZ1bmN0aW9uIG1lcmdlKG1vZGVscywgc3RhdGUpIHtcclxuICAgICAgICBtb2RlbHMuZm9yRWFjaChmdW5jdGlvbiAobW9kZWwpIHtcclxuICAgICAgICAgICAgc3RhdGUuZW50aXRpZXNbc2VsZWN0SWQobW9kZWwpXSA9IG1vZGVsO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHZhciBhbGxFbnRpdGllcyA9IE9iamVjdC52YWx1ZXMoc3RhdGUuZW50aXRpZXMpO1xyXG4gICAgICAgIGFsbEVudGl0aWVzLnNvcnQoc29ydCk7XHJcbiAgICAgICAgdmFyIG5ld1NvcnRlZElkcyA9IGFsbEVudGl0aWVzLm1hcChzZWxlY3RJZCk7XHJcbiAgICAgICAgdmFyIGlkcyA9IHN0YXRlLmlkcztcclxuICAgICAgICBpZiAoIWFyZUFycmF5c0VxdWFsKGlkcywgbmV3U29ydGVkSWRzKSkge1xyXG4gICAgICAgICAgICBzdGF0ZS5pZHMgPSBuZXdTb3J0ZWRJZHM7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIHtcclxuICAgICAgICByZW1vdmVPbmU6IHJlbW92ZU9uZSxcclxuICAgICAgICByZW1vdmVNYW55OiByZW1vdmVNYW55LFxyXG4gICAgICAgIHJlbW92ZUFsbDogcmVtb3ZlQWxsLFxyXG4gICAgICAgIGFkZE9uZTogY3JlYXRlU3RhdGVPcGVyYXRvcihhZGRPbmVNdXRhYmx5KSxcclxuICAgICAgICB1cGRhdGVPbmU6IGNyZWF0ZVN0YXRlT3BlcmF0b3IodXBkYXRlT25lTXV0YWJseSksXHJcbiAgICAgICAgdXBzZXJ0T25lOiBjcmVhdGVTdGF0ZU9wZXJhdG9yKHVwc2VydE9uZU11dGFibHkpLFxyXG4gICAgICAgIHNldE9uZTogY3JlYXRlU3RhdGVPcGVyYXRvcihzZXRPbmVNdXRhYmx5KSxcclxuICAgICAgICBzZXRNYW55OiBjcmVhdGVTdGF0ZU9wZXJhdG9yKHNldE1hbnlNdXRhYmx5KSxcclxuICAgICAgICBzZXRBbGw6IGNyZWF0ZVN0YXRlT3BlcmF0b3Ioc2V0QWxsTXV0YWJseSksXHJcbiAgICAgICAgYWRkTWFueTogY3JlYXRlU3RhdGVPcGVyYXRvcihhZGRNYW55TXV0YWJseSksXHJcbiAgICAgICAgdXBkYXRlTWFueTogY3JlYXRlU3RhdGVPcGVyYXRvcih1cGRhdGVNYW55TXV0YWJseSksXHJcbiAgICAgICAgdXBzZXJ0TWFueTogY3JlYXRlU3RhdGVPcGVyYXRvcih1cHNlcnRNYW55TXV0YWJseSlcclxuICAgIH07XHJcbn1cclxuLy8gc3JjL2VudGl0aWVzL2NyZWF0ZV9hZGFwdGVyLnRzXHJcbmZ1bmN0aW9uIGNyZWF0ZUVudGl0eUFkYXB0ZXIob3B0aW9ucykge1xyXG4gICAgaWYgKG9wdGlvbnMgPT09IHZvaWQgMCkgeyBvcHRpb25zID0ge307IH1cclxuICAgIHZhciBfYyA9IF9fc3ByZWFkVmFsdWVzKHtcclxuICAgICAgICBzb3J0Q29tcGFyZXI6IGZhbHNlLFxyXG4gICAgICAgIHNlbGVjdElkOiBmdW5jdGlvbiAoaW5zdGFuY2UpIHsgcmV0dXJuIGluc3RhbmNlLmlkOyB9XHJcbiAgICB9LCBvcHRpb25zKSwgc2VsZWN0SWQgPSBfYy5zZWxlY3RJZCwgc29ydENvbXBhcmVyID0gX2Muc29ydENvbXBhcmVyO1xyXG4gICAgdmFyIHN0YXRlRmFjdG9yeSA9IGNyZWF0ZUluaXRpYWxTdGF0ZUZhY3RvcnkoKTtcclxuICAgIHZhciBzZWxlY3RvcnNGYWN0b3J5ID0gY3JlYXRlU2VsZWN0b3JzRmFjdG9yeSgpO1xyXG4gICAgdmFyIHN0YXRlQWRhcHRlciA9IHNvcnRDb21wYXJlciA/IGNyZWF0ZVNvcnRlZFN0YXRlQWRhcHRlcihzZWxlY3RJZCwgc29ydENvbXBhcmVyKSA6IGNyZWF0ZVVuc29ydGVkU3RhdGVBZGFwdGVyKHNlbGVjdElkKTtcclxuICAgIHJldHVybiBfX3NwcmVhZFZhbHVlcyhfX3NwcmVhZFZhbHVlcyhfX3NwcmVhZFZhbHVlcyh7XHJcbiAgICAgICAgc2VsZWN0SWQ6IHNlbGVjdElkLFxyXG4gICAgICAgIHNvcnRDb21wYXJlcjogc29ydENvbXBhcmVyXHJcbiAgICB9LCBzdGF0ZUZhY3RvcnkpLCBzZWxlY3RvcnNGYWN0b3J5KSwgc3RhdGVBZGFwdGVyKTtcclxufVxyXG4vLyBzcmMvbmFub2lkLnRzXHJcbnZhciB1cmxBbHBoYWJldCA9IFwiTW9kdWxlU3ltYmhhc093blByLTAxMjM0NTY3ODlBQkNERUZHSE5SVmZnY3RpVXZ6X0txWVRKa0x4cFpYSWpRV1wiO1xyXG52YXIgbmFub2lkID0gZnVuY3Rpb24gKHNpemUpIHtcclxuICAgIGlmIChzaXplID09PSB2b2lkIDApIHsgc2l6ZSA9IDIxOyB9XHJcbiAgICB2YXIgaWQgPSBcIlwiO1xyXG4gICAgdmFyIGkgPSBzaXplO1xyXG4gICAgd2hpbGUgKGktLSkge1xyXG4gICAgICAgIGlkICs9IHVybEFscGhhYmV0W01hdGgucmFuZG9tKCkgKiA2NCB8IDBdO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIGlkO1xyXG59O1xyXG4vLyBzcmMvY3JlYXRlQXN5bmNUaHVuay50c1xyXG52YXIgY29tbW9uUHJvcGVydGllcyA9IFtcclxuICAgIFwibmFtZVwiLFxyXG4gICAgXCJtZXNzYWdlXCIsXHJcbiAgICBcInN0YWNrXCIsXHJcbiAgICBcImNvZGVcIlxyXG5dO1xyXG52YXIgUmVqZWN0V2l0aFZhbHVlID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xyXG4gICAgZnVuY3Rpb24gUmVqZWN0V2l0aFZhbHVlKHBheWxvYWQsIG1ldGEpIHtcclxuICAgICAgICB0aGlzLnBheWxvYWQgPSBwYXlsb2FkO1xyXG4gICAgICAgIHRoaXMubWV0YSA9IG1ldGE7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gUmVqZWN0V2l0aFZhbHVlO1xyXG59KCkpO1xyXG52YXIgRnVsZmlsbFdpdGhNZXRhID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xyXG4gICAgZnVuY3Rpb24gRnVsZmlsbFdpdGhNZXRhKHBheWxvYWQsIG1ldGEpIHtcclxuICAgICAgICB0aGlzLnBheWxvYWQgPSBwYXlsb2FkO1xyXG4gICAgICAgIHRoaXMubWV0YSA9IG1ldGE7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gRnVsZmlsbFdpdGhNZXRhO1xyXG59KCkpO1xyXG52YXIgbWluaVNlcmlhbGl6ZUVycm9yID0gZnVuY3Rpb24gKHZhbHVlKSB7XHJcbiAgICBpZiAodHlwZW9mIHZhbHVlID09PSBcIm9iamVjdFwiICYmIHZhbHVlICE9PSBudWxsKSB7XHJcbiAgICAgICAgdmFyIHNpbXBsZUVycm9yID0ge307XHJcbiAgICAgICAgZm9yICh2YXIgX2kgPSAwLCBjb21tb25Qcm9wZXJ0aWVzXzEgPSBjb21tb25Qcm9wZXJ0aWVzOyBfaSA8IGNvbW1vblByb3BlcnRpZXNfMS5sZW5ndGg7IF9pKyspIHtcclxuICAgICAgICAgICAgdmFyIHByb3BlcnR5ID0gY29tbW9uUHJvcGVydGllc18xW19pXTtcclxuICAgICAgICAgICAgaWYgKHR5cGVvZiB2YWx1ZVtwcm9wZXJ0eV0gPT09IFwic3RyaW5nXCIpIHtcclxuICAgICAgICAgICAgICAgIHNpbXBsZUVycm9yW3Byb3BlcnR5XSA9IHZhbHVlW3Byb3BlcnR5XTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gc2ltcGxlRXJyb3I7XHJcbiAgICB9XHJcbiAgICByZXR1cm4geyBtZXNzYWdlOiBTdHJpbmcodmFsdWUpIH07XHJcbn07XHJcbmZ1bmN0aW9uIGNyZWF0ZUFzeW5jVGh1bmsodHlwZVByZWZpeCwgcGF5bG9hZENyZWF0b3IsIG9wdGlvbnMpIHtcclxuICAgIHZhciBmdWxmaWxsZWQgPSBjcmVhdGVBY3Rpb24odHlwZVByZWZpeCArIFwiL2Z1bGZpbGxlZFwiLCBmdW5jdGlvbiAocGF5bG9hZCwgcmVxdWVzdElkLCBhcmcsIG1ldGEpIHsgcmV0dXJuICh7XHJcbiAgICAgICAgcGF5bG9hZDogcGF5bG9hZCxcclxuICAgICAgICBtZXRhOiBfX3NwcmVhZFByb3BzKF9fc3ByZWFkVmFsdWVzKHt9LCBtZXRhIHx8IHt9KSwge1xyXG4gICAgICAgICAgICBhcmc6IGFyZyxcclxuICAgICAgICAgICAgcmVxdWVzdElkOiByZXF1ZXN0SWQsXHJcbiAgICAgICAgICAgIHJlcXVlc3RTdGF0dXM6IFwiZnVsZmlsbGVkXCJcclxuICAgICAgICB9KVxyXG4gICAgfSk7IH0pO1xyXG4gICAgdmFyIHBlbmRpbmcgPSBjcmVhdGVBY3Rpb24odHlwZVByZWZpeCArIFwiL3BlbmRpbmdcIiwgZnVuY3Rpb24gKHJlcXVlc3RJZCwgYXJnLCBtZXRhKSB7IHJldHVybiAoe1xyXG4gICAgICAgIHBheWxvYWQ6IHZvaWQgMCxcclxuICAgICAgICBtZXRhOiBfX3NwcmVhZFByb3BzKF9fc3ByZWFkVmFsdWVzKHt9LCBtZXRhIHx8IHt9KSwge1xyXG4gICAgICAgICAgICBhcmc6IGFyZyxcclxuICAgICAgICAgICAgcmVxdWVzdElkOiByZXF1ZXN0SWQsXHJcbiAgICAgICAgICAgIHJlcXVlc3RTdGF0dXM6IFwicGVuZGluZ1wiXHJcbiAgICAgICAgfSlcclxuICAgIH0pOyB9KTtcclxuICAgIHZhciByZWplY3RlZCA9IGNyZWF0ZUFjdGlvbih0eXBlUHJlZml4ICsgXCIvcmVqZWN0ZWRcIiwgZnVuY3Rpb24gKGVycm9yLCByZXF1ZXN0SWQsIGFyZywgcGF5bG9hZCwgbWV0YSkgeyByZXR1cm4gKHtcclxuICAgICAgICBwYXlsb2FkOiBwYXlsb2FkLFxyXG4gICAgICAgIGVycm9yOiAob3B0aW9ucyAmJiBvcHRpb25zLnNlcmlhbGl6ZUVycm9yIHx8IG1pbmlTZXJpYWxpemVFcnJvcikoZXJyb3IgfHwgXCJSZWplY3RlZFwiKSxcclxuICAgICAgICBtZXRhOiBfX3NwcmVhZFByb3BzKF9fc3ByZWFkVmFsdWVzKHt9LCBtZXRhIHx8IHt9KSwge1xyXG4gICAgICAgICAgICBhcmc6IGFyZyxcclxuICAgICAgICAgICAgcmVxdWVzdElkOiByZXF1ZXN0SWQsXHJcbiAgICAgICAgICAgIHJlamVjdGVkV2l0aFZhbHVlOiAhIXBheWxvYWQsXHJcbiAgICAgICAgICAgIHJlcXVlc3RTdGF0dXM6IFwicmVqZWN0ZWRcIixcclxuICAgICAgICAgICAgYWJvcnRlZDogKGVycm9yID09IG51bGwgPyB2b2lkIDAgOiBlcnJvci5uYW1lKSA9PT0gXCJBYm9ydEVycm9yXCIsXHJcbiAgICAgICAgICAgIGNvbmRpdGlvbjogKGVycm9yID09IG51bGwgPyB2b2lkIDAgOiBlcnJvci5uYW1lKSA9PT0gXCJDb25kaXRpb25FcnJvclwiXHJcbiAgICAgICAgfSlcclxuICAgIH0pOyB9KTtcclxuICAgIHZhciBkaXNwbGF5ZWRXYXJuaW5nID0gZmFsc2U7XHJcbiAgICB2YXIgQUMgPSB0eXBlb2YgQWJvcnRDb250cm9sbGVyICE9PSBcInVuZGVmaW5lZFwiID8gQWJvcnRDb250cm9sbGVyIDogLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIGZ1bmN0aW9uIGNsYXNzXzEoKSB7XHJcbiAgICAgICAgICAgIHRoaXMuc2lnbmFsID0ge1xyXG4gICAgICAgICAgICAgICAgYWJvcnRlZDogZmFsc2UsXHJcbiAgICAgICAgICAgICAgICBhZGRFdmVudExpc3RlbmVyOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgZGlzcGF0Y2hFdmVudDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICBvbmFib3J0OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgcmVtb3ZlRXZlbnRMaXN0ZW5lcjogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgIH1cclxuICAgICAgICBjbGFzc18xLnByb3RvdHlwZS5hYm9ydCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xyXG4gICAgICAgICAgICAgICAgaWYgKCFkaXNwbGF5ZWRXYXJuaW5nKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZGlzcGxheWVkV2FybmluZyA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5pbmZvKFwiVGhpcyBwbGF0Zm9ybSBkb2VzIG5vdCBpbXBsZW1lbnQgQWJvcnRDb250cm9sbGVyLiBcXG5JZiB5b3Ugd2FudCB0byB1c2UgdGhlIEFib3J0Q29udHJvbGxlciB0byByZWFjdCB0byBgYWJvcnRgIGV2ZW50cywgcGxlYXNlIGNvbnNpZGVyIGltcG9ydGluZyBhIHBvbHlmaWxsIGxpa2UgJ2Fib3J0Y29udHJvbGxlci1wb2x5ZmlsbC9kaXN0L2Fib3J0Y29udHJvbGxlci1wb2x5ZmlsbC1vbmx5Jy5cIik7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9O1xyXG4gICAgICAgIHJldHVybiBjbGFzc18xO1xyXG4gICAgfSgpKTtcclxuICAgIGZ1bmN0aW9uIGFjdGlvbkNyZWF0b3IoYXJnKSB7XHJcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIChkaXNwYXRjaCwgZ2V0U3RhdGUsIGV4dHJhKSB7XHJcbiAgICAgICAgICAgIHZhciByZXF1ZXN0SWQgPSAob3B0aW9ucyA9PSBudWxsID8gdm9pZCAwIDogb3B0aW9ucy5pZEdlbmVyYXRvcikgPyBvcHRpb25zLmlkR2VuZXJhdG9yKGFyZykgOiBuYW5vaWQoKTtcclxuICAgICAgICAgICAgdmFyIGFib3J0Q29udHJvbGxlciA9IG5ldyBBQygpO1xyXG4gICAgICAgICAgICB2YXIgYWJvcnRSZWFzb247XHJcbiAgICAgICAgICAgIHZhciBhYm9ydGVkUHJvbWlzZSA9IG5ldyBQcm9taXNlKGZ1bmN0aW9uIChfLCByZWplY3QpIHsgcmV0dXJuIGFib3J0Q29udHJvbGxlci5zaWduYWwuYWRkRXZlbnRMaXN0ZW5lcihcImFib3J0XCIsIGZ1bmN0aW9uICgpIHsgcmV0dXJuIHJlamVjdCh7IG5hbWU6IFwiQWJvcnRFcnJvclwiLCBtZXNzYWdlOiBhYm9ydFJlYXNvbiB8fCBcIkFib3J0ZWRcIiB9KTsgfSk7IH0pO1xyXG4gICAgICAgICAgICB2YXIgc3RhcnRlZCA9IGZhbHNlO1xyXG4gICAgICAgICAgICBmdW5jdGlvbiBhYm9ydChyZWFzb24pIHtcclxuICAgICAgICAgICAgICAgIGlmIChzdGFydGVkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgYWJvcnRSZWFzb24gPSByZWFzb247XHJcbiAgICAgICAgICAgICAgICAgICAgYWJvcnRDb250cm9sbGVyLmFib3J0KCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdmFyIHByb21pc2UgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gX19hc3luYyh0aGlzLCBudWxsLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIF9hLCBfYiwgZmluYWxBY3Rpb24sIGNvbmRpdGlvblJlc3VsdCwgZXJyXzEsIHNraXBEaXNwYXRjaDtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gX19nZW5lcmF0b3IodGhpcywgZnVuY3Rpb24gKF9jKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHN3aXRjaCAoX2MubGFiZWwpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMDpcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfYy50cnlzLnB1c2goWzAsIDQsICwgNV0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbmRpdGlvblJlc3VsdCA9IChfYSA9IG9wdGlvbnMgPT0gbnVsbCA/IHZvaWQgMCA6IG9wdGlvbnMuY29uZGl0aW9uKSA9PSBudWxsID8gdm9pZCAwIDogX2EuY2FsbChvcHRpb25zLCBhcmcsIHsgZ2V0U3RhdGU6IGdldFN0YXRlLCBleHRyYTogZXh0cmEgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFpc1RoZW5hYmxlKGNvbmRpdGlvblJlc3VsdCkpIHJldHVybiBbMyAvKmJyZWFrKi8sIDJdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbNCAvKnlpZWxkKi8sIGNvbmRpdGlvblJlc3VsdF07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDE6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uZGl0aW9uUmVzdWx0ID0gX2Muc2VudCgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9jLmxhYmVsID0gMjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMjpcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoY29uZGl0aW9uUmVzdWx0ID09PSBmYWxzZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYW1lOiBcIkNvbmRpdGlvbkVycm9yXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtZXNzYWdlOiBcIkFib3J0ZWQgZHVlIHRvIGNvbmRpdGlvbiBjYWxsYmFjayByZXR1cm5pbmcgZmFsc2UuXCJcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhcnRlZCA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGlzcGF0Y2gocGVuZGluZyhyZXF1ZXN0SWQsIGFyZywgKF9iID0gb3B0aW9ucyA9PSBudWxsID8gdm9pZCAwIDogb3B0aW9ucy5nZXRQZW5kaW5nTWV0YSkgPT0gbnVsbCA/IHZvaWQgMCA6IF9iLmNhbGwob3B0aW9ucywgeyByZXF1ZXN0SWQ6IHJlcXVlc3RJZCwgYXJnOiBhcmcgfSwgeyBnZXRTdGF0ZTogZ2V0U3RhdGUsIGV4dHJhOiBleHRyYSB9KSkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbNCAvKnlpZWxkKi8sIFByb21pc2UucmFjZShbXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhYm9ydGVkUHJvbWlzZSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFByb21pc2UucmVzb2x2ZShwYXlsb2FkQ3JlYXRvcihhcmcsIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkaXNwYXRjaDogZGlzcGF0Y2gsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZ2V0U3RhdGU6IGdldFN0YXRlLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV4dHJhOiBleHRyYSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXF1ZXN0SWQ6IHJlcXVlc3RJZCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzaWduYWw6IGFib3J0Q29udHJvbGxlci5zaWduYWwsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVqZWN0V2l0aFZhbHVlOiBmdW5jdGlvbiAodmFsdWUsIG1ldGEpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBSZWplY3RXaXRoVmFsdWUodmFsdWUsIG1ldGEpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZnVsZmlsbFdpdGhWYWx1ZTogZnVuY3Rpb24gKHZhbHVlLCBtZXRhKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBuZXcgRnVsZmlsbFdpdGhNZXRhKHZhbHVlLCBtZXRhKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KSkudGhlbihmdW5jdGlvbiAocmVzdWx0KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHJlc3VsdCBpbnN0YW5jZW9mIFJlamVjdFdpdGhWYWx1ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyByZXN1bHQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChyZXN1bHQgaW5zdGFuY2VvZiBGdWxmaWxsV2l0aE1ldGEpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZ1bGZpbGxlZChyZXN1bHQucGF5bG9hZCwgcmVxdWVzdElkLCBhcmcsIHJlc3VsdC5tZXRhKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZ1bGZpbGxlZChyZXN1bHQsIHJlcXVlc3RJZCwgYXJnKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF0pXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMzpcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmaW5hbEFjdGlvbiA9IF9jLnNlbnQoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzMgLypicmVhayovLCA1XTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgNDpcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlcnJfMSA9IF9jLnNlbnQoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmaW5hbEFjdGlvbiA9IGVycl8xIGluc3RhbmNlb2YgUmVqZWN0V2l0aFZhbHVlID8gcmVqZWN0ZWQobnVsbCwgcmVxdWVzdElkLCBhcmcsIGVycl8xLnBheWxvYWQsIGVycl8xLm1ldGEpIDogcmVqZWN0ZWQoZXJyXzEsIHJlcXVlc3RJZCwgYXJnKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzMgLypicmVhayovLCA1XTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgNTpcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBza2lwRGlzcGF0Y2ggPSBvcHRpb25zICYmICFvcHRpb25zLmRpc3BhdGNoQ29uZGl0aW9uUmVqZWN0aW9uICYmIHJlamVjdGVkLm1hdGNoKGZpbmFsQWN0aW9uKSAmJiBmaW5hbEFjdGlvbi5tZXRhLmNvbmRpdGlvbjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIXNraXBEaXNwYXRjaCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkaXNwYXRjaChmaW5hbEFjdGlvbik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbMiAvKnJldHVybiovLCBmaW5hbEFjdGlvbl07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9KCk7XHJcbiAgICAgICAgICAgIHJldHVybiBPYmplY3QuYXNzaWduKHByb21pc2UsIHtcclxuICAgICAgICAgICAgICAgIGFib3J0OiBhYm9ydCxcclxuICAgICAgICAgICAgICAgIHJlcXVlc3RJZDogcmVxdWVzdElkLFxyXG4gICAgICAgICAgICAgICAgYXJnOiBhcmcsXHJcbiAgICAgICAgICAgICAgICB1bndyYXA6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gcHJvbWlzZS50aGVuKHVud3JhcFJlc3VsdCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH07XHJcbiAgICB9XHJcbiAgICByZXR1cm4gT2JqZWN0LmFzc2lnbihhY3Rpb25DcmVhdG9yLCB7XHJcbiAgICAgICAgcGVuZGluZzogcGVuZGluZyxcclxuICAgICAgICByZWplY3RlZDogcmVqZWN0ZWQsXHJcbiAgICAgICAgZnVsZmlsbGVkOiBmdWxmaWxsZWQsXHJcbiAgICAgICAgdHlwZVByZWZpeDogdHlwZVByZWZpeFxyXG4gICAgfSk7XHJcbn1cclxuZnVuY3Rpb24gdW53cmFwUmVzdWx0KGFjdGlvbikge1xyXG4gICAgaWYgKGFjdGlvbi5tZXRhICYmIGFjdGlvbi5tZXRhLnJlamVjdGVkV2l0aFZhbHVlKSB7XHJcbiAgICAgICAgdGhyb3cgYWN0aW9uLnBheWxvYWQ7XHJcbiAgICB9XHJcbiAgICBpZiAoYWN0aW9uLmVycm9yKSB7XHJcbiAgICAgICAgdGhyb3cgYWN0aW9uLmVycm9yO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIGFjdGlvbi5wYXlsb2FkO1xyXG59XHJcbmZ1bmN0aW9uIGlzVGhlbmFibGUodmFsdWUpIHtcclxuICAgIHJldHVybiB2YWx1ZSAhPT0gbnVsbCAmJiB0eXBlb2YgdmFsdWUgPT09IFwib2JqZWN0XCIgJiYgdHlwZW9mIHZhbHVlLnRoZW4gPT09IFwiZnVuY3Rpb25cIjtcclxufVxyXG4vLyBzcmMvdHNIZWxwZXJzLnRzXHJcbnZhciBoYXNNYXRjaEZ1bmN0aW9uID0gZnVuY3Rpb24gKHYpIHtcclxuICAgIHJldHVybiB2ICYmIHR5cGVvZiB2Lm1hdGNoID09PSBcImZ1bmN0aW9uXCI7XHJcbn07XHJcbi8vIHNyYy9tYXRjaGVycy50c1xyXG52YXIgbWF0Y2hlcyA9IGZ1bmN0aW9uIChtYXRjaGVyLCBhY3Rpb24pIHtcclxuICAgIGlmIChoYXNNYXRjaEZ1bmN0aW9uKG1hdGNoZXIpKSB7XHJcbiAgICAgICAgcmV0dXJuIG1hdGNoZXIubWF0Y2goYWN0aW9uKTtcclxuICAgIH1cclxuICAgIGVsc2Uge1xyXG4gICAgICAgIHJldHVybiBtYXRjaGVyKGFjdGlvbik7XHJcbiAgICB9XHJcbn07XHJcbmZ1bmN0aW9uIGlzQW55T2YoKSB7XHJcbiAgICB2YXIgbWF0Y2hlcnMgPSBbXTtcclxuICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBhcmd1bWVudHMubGVuZ3RoOyBfaSsrKSB7XHJcbiAgICAgICAgbWF0Y2hlcnNbX2ldID0gYXJndW1lbnRzW19pXTtcclxuICAgIH1cclxuICAgIHJldHVybiBmdW5jdGlvbiAoYWN0aW9uKSB7XHJcbiAgICAgICAgcmV0dXJuIG1hdGNoZXJzLnNvbWUoZnVuY3Rpb24gKG1hdGNoZXIpIHsgcmV0dXJuIG1hdGNoZXMobWF0Y2hlciwgYWN0aW9uKTsgfSk7XHJcbiAgICB9O1xyXG59XHJcbmZ1bmN0aW9uIGlzQWxsT2YoKSB7XHJcbiAgICB2YXIgbWF0Y2hlcnMgPSBbXTtcclxuICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBhcmd1bWVudHMubGVuZ3RoOyBfaSsrKSB7XHJcbiAgICAgICAgbWF0Y2hlcnNbX2ldID0gYXJndW1lbnRzW19pXTtcclxuICAgIH1cclxuICAgIHJldHVybiBmdW5jdGlvbiAoYWN0aW9uKSB7XHJcbiAgICAgICAgcmV0dXJuIG1hdGNoZXJzLmV2ZXJ5KGZ1bmN0aW9uIChtYXRjaGVyKSB7IHJldHVybiBtYXRjaGVzKG1hdGNoZXIsIGFjdGlvbik7IH0pO1xyXG4gICAgfTtcclxufVxyXG5mdW5jdGlvbiBoYXNFeHBlY3RlZFJlcXVlc3RNZXRhZGF0YShhY3Rpb24sIHZhbGlkU3RhdHVzKSB7XHJcbiAgICBpZiAoIWFjdGlvbiB8fCAhYWN0aW9uLm1ldGEpXHJcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgdmFyIGhhc1ZhbGlkUmVxdWVzdElkID0gdHlwZW9mIGFjdGlvbi5tZXRhLnJlcXVlc3RJZCA9PT0gXCJzdHJpbmdcIjtcclxuICAgIHZhciBoYXNWYWxpZFJlcXVlc3RTdGF0dXMgPSB2YWxpZFN0YXR1cy5pbmRleE9mKGFjdGlvbi5tZXRhLnJlcXVlc3RTdGF0dXMpID4gLTE7XHJcbiAgICByZXR1cm4gaGFzVmFsaWRSZXF1ZXN0SWQgJiYgaGFzVmFsaWRSZXF1ZXN0U3RhdHVzO1xyXG59XHJcbmZ1bmN0aW9uIGlzQXN5bmNUaHVua0FycmF5KGEpIHtcclxuICAgIHJldHVybiB0eXBlb2YgYVswXSA9PT0gXCJmdW5jdGlvblwiICYmIFwicGVuZGluZ1wiIGluIGFbMF0gJiYgXCJmdWxmaWxsZWRcIiBpbiBhWzBdICYmIFwicmVqZWN0ZWRcIiBpbiBhWzBdO1xyXG59XHJcbmZ1bmN0aW9uIGlzUGVuZGluZygpIHtcclxuICAgIHZhciBhc3luY1RodW5rcyA9IFtdO1xyXG4gICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IGFyZ3VtZW50cy5sZW5ndGg7IF9pKyspIHtcclxuICAgICAgICBhc3luY1RodW5rc1tfaV0gPSBhcmd1bWVudHNbX2ldO1xyXG4gICAgfVxyXG4gICAgaWYgKGFzeW5jVGh1bmtzLmxlbmd0aCA9PT0gMCkge1xyXG4gICAgICAgIHJldHVybiBmdW5jdGlvbiAoYWN0aW9uKSB7IHJldHVybiBoYXNFeHBlY3RlZFJlcXVlc3RNZXRhZGF0YShhY3Rpb24sIFtcInBlbmRpbmdcIl0pOyB9O1xyXG4gICAgfVxyXG4gICAgaWYgKCFpc0FzeW5jVGh1bmtBcnJheShhc3luY1RodW5rcykpIHtcclxuICAgICAgICByZXR1cm4gaXNQZW5kaW5nKCkoYXN5bmNUaHVua3NbMF0pO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIGZ1bmN0aW9uIChhY3Rpb24pIHtcclxuICAgICAgICB2YXIgbWF0Y2hlcnMgPSBhc3luY1RodW5rcy5tYXAoZnVuY3Rpb24gKGFzeW5jVGh1bmspIHsgcmV0dXJuIGFzeW5jVGh1bmsucGVuZGluZzsgfSk7XHJcbiAgICAgICAgdmFyIGNvbWJpbmVkTWF0Y2hlciA9IGlzQW55T2YuYXBwbHkodm9pZCAwLCBtYXRjaGVycyk7XHJcbiAgICAgICAgcmV0dXJuIGNvbWJpbmVkTWF0Y2hlcihhY3Rpb24pO1xyXG4gICAgfTtcclxufVxyXG5mdW5jdGlvbiBpc1JlamVjdGVkKCkge1xyXG4gICAgdmFyIGFzeW5jVGh1bmtzID0gW107XHJcbiAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgYXJndW1lbnRzLmxlbmd0aDsgX2krKykge1xyXG4gICAgICAgIGFzeW5jVGh1bmtzW19pXSA9IGFyZ3VtZW50c1tfaV07XHJcbiAgICB9XHJcbiAgICBpZiAoYXN5bmNUaHVua3MubGVuZ3RoID09PSAwKSB7XHJcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIChhY3Rpb24pIHsgcmV0dXJuIGhhc0V4cGVjdGVkUmVxdWVzdE1ldGFkYXRhKGFjdGlvbiwgW1wicmVqZWN0ZWRcIl0pOyB9O1xyXG4gICAgfVxyXG4gICAgaWYgKCFpc0FzeW5jVGh1bmtBcnJheShhc3luY1RodW5rcykpIHtcclxuICAgICAgICByZXR1cm4gaXNSZWplY3RlZCgpKGFzeW5jVGh1bmtzWzBdKTtcclxuICAgIH1cclxuICAgIHJldHVybiBmdW5jdGlvbiAoYWN0aW9uKSB7XHJcbiAgICAgICAgdmFyIG1hdGNoZXJzID0gYXN5bmNUaHVua3MubWFwKGZ1bmN0aW9uIChhc3luY1RodW5rKSB7IHJldHVybiBhc3luY1RodW5rLnJlamVjdGVkOyB9KTtcclxuICAgICAgICB2YXIgY29tYmluZWRNYXRjaGVyID0gaXNBbnlPZi5hcHBseSh2b2lkIDAsIG1hdGNoZXJzKTtcclxuICAgICAgICByZXR1cm4gY29tYmluZWRNYXRjaGVyKGFjdGlvbik7XHJcbiAgICB9O1xyXG59XHJcbmZ1bmN0aW9uIGlzUmVqZWN0ZWRXaXRoVmFsdWUoKSB7XHJcbiAgICB2YXIgYXN5bmNUaHVua3MgPSBbXTtcclxuICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBhcmd1bWVudHMubGVuZ3RoOyBfaSsrKSB7XHJcbiAgICAgICAgYXN5bmNUaHVua3NbX2ldID0gYXJndW1lbnRzW19pXTtcclxuICAgIH1cclxuICAgIHZhciBoYXNGbGFnID0gZnVuY3Rpb24gKGFjdGlvbikge1xyXG4gICAgICAgIHJldHVybiBhY3Rpb24gJiYgYWN0aW9uLm1ldGEgJiYgYWN0aW9uLm1ldGEucmVqZWN0ZWRXaXRoVmFsdWU7XHJcbiAgICB9O1xyXG4gICAgaWYgKGFzeW5jVGh1bmtzLmxlbmd0aCA9PT0gMCkge1xyXG4gICAgICAgIHJldHVybiBmdW5jdGlvbiAoYWN0aW9uKSB7XHJcbiAgICAgICAgICAgIHZhciBjb21iaW5lZE1hdGNoZXIgPSBpc0FsbE9mKGlzUmVqZWN0ZWQuYXBwbHkodm9pZCAwLCBhc3luY1RodW5rcyksIGhhc0ZsYWcpO1xyXG4gICAgICAgICAgICByZXR1cm4gY29tYmluZWRNYXRjaGVyKGFjdGlvbik7XHJcbiAgICAgICAgfTtcclxuICAgIH1cclxuICAgIGlmICghaXNBc3luY1RodW5rQXJyYXkoYXN5bmNUaHVua3MpKSB7XHJcbiAgICAgICAgcmV0dXJuIGlzUmVqZWN0ZWRXaXRoVmFsdWUoKShhc3luY1RodW5rc1swXSk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gZnVuY3Rpb24gKGFjdGlvbikge1xyXG4gICAgICAgIHZhciBjb21iaW5lZE1hdGNoZXIgPSBpc0FsbE9mKGlzUmVqZWN0ZWQuYXBwbHkodm9pZCAwLCBhc3luY1RodW5rcyksIGhhc0ZsYWcpO1xyXG4gICAgICAgIHJldHVybiBjb21iaW5lZE1hdGNoZXIoYWN0aW9uKTtcclxuICAgIH07XHJcbn1cclxuZnVuY3Rpb24gaXNGdWxmaWxsZWQoKSB7XHJcbiAgICB2YXIgYXN5bmNUaHVua3MgPSBbXTtcclxuICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBhcmd1bWVudHMubGVuZ3RoOyBfaSsrKSB7XHJcbiAgICAgICAgYXN5bmNUaHVua3NbX2ldID0gYXJndW1lbnRzW19pXTtcclxuICAgIH1cclxuICAgIGlmIChhc3luY1RodW5rcy5sZW5ndGggPT09IDApIHtcclxuICAgICAgICByZXR1cm4gZnVuY3Rpb24gKGFjdGlvbikgeyByZXR1cm4gaGFzRXhwZWN0ZWRSZXF1ZXN0TWV0YWRhdGEoYWN0aW9uLCBbXCJmdWxmaWxsZWRcIl0pOyB9O1xyXG4gICAgfVxyXG4gICAgaWYgKCFpc0FzeW5jVGh1bmtBcnJheShhc3luY1RodW5rcykpIHtcclxuICAgICAgICByZXR1cm4gaXNGdWxmaWxsZWQoKShhc3luY1RodW5rc1swXSk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gZnVuY3Rpb24gKGFjdGlvbikge1xyXG4gICAgICAgIHZhciBtYXRjaGVycyA9IGFzeW5jVGh1bmtzLm1hcChmdW5jdGlvbiAoYXN5bmNUaHVuaykgeyByZXR1cm4gYXN5bmNUaHVuay5mdWxmaWxsZWQ7IH0pO1xyXG4gICAgICAgIHZhciBjb21iaW5lZE1hdGNoZXIgPSBpc0FueU9mLmFwcGx5KHZvaWQgMCwgbWF0Y2hlcnMpO1xyXG4gICAgICAgIHJldHVybiBjb21iaW5lZE1hdGNoZXIoYWN0aW9uKTtcclxuICAgIH07XHJcbn1cclxuZnVuY3Rpb24gaXNBc3luY1RodW5rQWN0aW9uKCkge1xyXG4gICAgdmFyIGFzeW5jVGh1bmtzID0gW107XHJcbiAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgYXJndW1lbnRzLmxlbmd0aDsgX2krKykge1xyXG4gICAgICAgIGFzeW5jVGh1bmtzW19pXSA9IGFyZ3VtZW50c1tfaV07XHJcbiAgICB9XHJcbiAgICBpZiAoYXN5bmNUaHVua3MubGVuZ3RoID09PSAwKSB7XHJcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIChhY3Rpb24pIHsgcmV0dXJuIGhhc0V4cGVjdGVkUmVxdWVzdE1ldGFkYXRhKGFjdGlvbiwgW1wicGVuZGluZ1wiLCBcImZ1bGZpbGxlZFwiLCBcInJlamVjdGVkXCJdKTsgfTtcclxuICAgIH1cclxuICAgIGlmICghaXNBc3luY1RodW5rQXJyYXkoYXN5bmNUaHVua3MpKSB7XHJcbiAgICAgICAgcmV0dXJuIGlzQXN5bmNUaHVua0FjdGlvbigpKGFzeW5jVGh1bmtzWzBdKTtcclxuICAgIH1cclxuICAgIHJldHVybiBmdW5jdGlvbiAoYWN0aW9uKSB7XHJcbiAgICAgICAgdmFyIG1hdGNoZXJzID0gW107XHJcbiAgICAgICAgZm9yICh2YXIgX2kgPSAwLCBhc3luY1RodW5rc18xID0gYXN5bmNUaHVua3M7IF9pIDwgYXN5bmNUaHVua3NfMS5sZW5ndGg7IF9pKyspIHtcclxuICAgICAgICAgICAgdmFyIGFzeW5jVGh1bmsgPSBhc3luY1RodW5rc18xW19pXTtcclxuICAgICAgICAgICAgbWF0Y2hlcnMucHVzaChhc3luY1RodW5rLnBlbmRpbmcsIGFzeW5jVGh1bmsucmVqZWN0ZWQsIGFzeW5jVGh1bmsuZnVsZmlsbGVkKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdmFyIGNvbWJpbmVkTWF0Y2hlciA9IGlzQW55T2YuYXBwbHkodm9pZCAwLCBtYXRjaGVycyk7XHJcbiAgICAgICAgcmV0dXJuIGNvbWJpbmVkTWF0Y2hlcihhY3Rpb24pO1xyXG4gICAgfTtcclxufVxyXG4vLyBzcmMvbGlzdGVuZXJNaWRkbGV3YXJlL3V0aWxzLnRzXHJcbnZhciBhc3NlcnRGdW5jdGlvbiA9IGZ1bmN0aW9uIChmdW5jLCBleHBlY3RlZCkge1xyXG4gICAgaWYgKHR5cGVvZiBmdW5jICE9PSBcImZ1bmN0aW9uXCIpIHtcclxuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKGV4cGVjdGVkICsgXCIgaXMgbm90IGEgZnVuY3Rpb25cIik7XHJcbiAgICB9XHJcbn07XHJcbnZhciBub29wID0gZnVuY3Rpb24gKCkge1xyXG59O1xyXG52YXIgY2F0Y2hSZWplY3Rpb24gPSBmdW5jdGlvbiAocHJvbWlzZSwgb25FcnJvcikge1xyXG4gICAgaWYgKG9uRXJyb3IgPT09IHZvaWQgMCkgeyBvbkVycm9yID0gbm9vcDsgfVxyXG4gICAgcHJvbWlzZS5jYXRjaChvbkVycm9yKTtcclxuICAgIHJldHVybiBwcm9taXNlO1xyXG59O1xyXG52YXIgYWRkQWJvcnRTaWduYWxMaXN0ZW5lciA9IGZ1bmN0aW9uIChhYm9ydFNpZ25hbCwgY2FsbGJhY2spIHtcclxuICAgIGFib3J0U2lnbmFsLmFkZEV2ZW50TGlzdGVuZXIoXCJhYm9ydFwiLCBjYWxsYmFjaywgeyBvbmNlOiB0cnVlIH0pO1xyXG59O1xyXG52YXIgYWJvcnRDb250cm9sbGVyV2l0aFJlYXNvbiA9IGZ1bmN0aW9uIChhYm9ydENvbnRyb2xsZXIsIHJlYXNvbikge1xyXG4gICAgdmFyIHNpZ25hbCA9IGFib3J0Q29udHJvbGxlci5zaWduYWw7XHJcbiAgICBpZiAoc2lnbmFsLmFib3J0ZWQpIHtcclxuICAgICAgICByZXR1cm47XHJcbiAgICB9XHJcbiAgICBpZiAoIShcInJlYXNvblwiIGluIHNpZ25hbCkpIHtcclxuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoc2lnbmFsLCBcInJlYXNvblwiLCB7XHJcbiAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXHJcbiAgICAgICAgICAgIHZhbHVlOiByZWFzb24sXHJcbiAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcclxuICAgICAgICAgICAgd3JpdGFibGU6IHRydWVcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuICAgIDtcclxuICAgIGFib3J0Q29udHJvbGxlci5hYm9ydChyZWFzb24pO1xyXG59O1xyXG4vLyBzcmMvbGlzdGVuZXJNaWRkbGV3YXJlL2V4Y2VwdGlvbnMudHNcclxudmFyIHRhc2sgPSBcInRhc2tcIjtcclxudmFyIGxpc3RlbmVyID0gXCJsaXN0ZW5lclwiO1xyXG52YXIgY29tcGxldGVkID0gXCJjb21wbGV0ZWRcIjtcclxudmFyIGNhbmNlbGxlZCA9IFwiY2FuY2VsbGVkXCI7XHJcbnZhciB0YXNrQ2FuY2VsbGVkID0gXCJ0YXNrLVwiICsgY2FuY2VsbGVkO1xyXG52YXIgdGFza0NvbXBsZXRlZCA9IFwidGFzay1cIiArIGNvbXBsZXRlZDtcclxudmFyIGxpc3RlbmVyQ2FuY2VsbGVkID0gbGlzdGVuZXIgKyBcIi1cIiArIGNhbmNlbGxlZDtcclxudmFyIGxpc3RlbmVyQ29tcGxldGVkID0gbGlzdGVuZXIgKyBcIi1cIiArIGNvbXBsZXRlZDtcclxudmFyIFRhc2tBYm9ydEVycm9yID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xyXG4gICAgZnVuY3Rpb24gVGFza0Fib3J0RXJyb3IoY29kZSkge1xyXG4gICAgICAgIHRoaXMuY29kZSA9IGNvZGU7XHJcbiAgICAgICAgdGhpcy5uYW1lID0gXCJUYXNrQWJvcnRFcnJvclwiO1xyXG4gICAgICAgIHRoaXMubWVzc2FnZSA9IHRhc2sgKyBcIiBcIiArIGNhbmNlbGxlZCArIFwiIChyZWFzb246IFwiICsgY29kZSArIFwiKVwiO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIFRhc2tBYm9ydEVycm9yO1xyXG59KCkpO1xyXG4vLyBzcmMvbGlzdGVuZXJNaWRkbGV3YXJlL3Rhc2sudHNcclxudmFyIHZhbGlkYXRlQWN0aXZlID0gZnVuY3Rpb24gKHNpZ25hbCkge1xyXG4gICAgaWYgKHNpZ25hbC5hYm9ydGVkKSB7XHJcbiAgICAgICAgdGhyb3cgbmV3IFRhc2tBYm9ydEVycm9yKHNpZ25hbC5yZWFzb24pO1xyXG4gICAgfVxyXG59O1xyXG52YXIgcHJvbWlzaWZ5QWJvcnRTaWduYWwgPSBmdW5jdGlvbiAoc2lnbmFsKSB7XHJcbiAgICByZXR1cm4gY2F0Y2hSZWplY3Rpb24obmV3IFByb21pc2UoZnVuY3Rpb24gKF8sIHJlamVjdCkge1xyXG4gICAgICAgIHZhciBub3RpZnlSZWplY3Rpb24gPSBmdW5jdGlvbiAoKSB7IHJldHVybiByZWplY3QobmV3IFRhc2tBYm9ydEVycm9yKHNpZ25hbC5yZWFzb24pKTsgfTtcclxuICAgICAgICBpZiAoc2lnbmFsLmFib3J0ZWQpIHtcclxuICAgICAgICAgICAgbm90aWZ5UmVqZWN0aW9uKCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICBhZGRBYm9ydFNpZ25hbExpc3RlbmVyKHNpZ25hbCwgbm90aWZ5UmVqZWN0aW9uKTtcclxuICAgICAgICB9XHJcbiAgICB9KSk7XHJcbn07XHJcbnZhciBydW5UYXNrID0gZnVuY3Rpb24gKHRhc2syLCBjbGVhblVwKSB7IHJldHVybiBfX2FzeW5jKHZvaWQgMCwgbnVsbCwgZnVuY3Rpb24gKCkge1xyXG4gICAgdmFyIHZhbHVlLCBlcnJvcl8xO1xyXG4gICAgcmV0dXJuIF9fZ2VuZXJhdG9yKHRoaXMsIGZ1bmN0aW9uIChfYykge1xyXG4gICAgICAgIHN3aXRjaCAoX2MubGFiZWwpIHtcclxuICAgICAgICAgICAgY2FzZSAwOlxyXG4gICAgICAgICAgICAgICAgX2MudHJ5cy5wdXNoKFswLCAzLCA0LCA1XSk7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gWzQgLyp5aWVsZCovLCBQcm9taXNlLnJlc29sdmUoKV07XHJcbiAgICAgICAgICAgIGNhc2UgMTpcclxuICAgICAgICAgICAgICAgIF9jLnNlbnQoKTtcclxuICAgICAgICAgICAgICAgIHJldHVybiBbNCAvKnlpZWxkKi8sIHRhc2syKCldO1xyXG4gICAgICAgICAgICBjYXNlIDI6XHJcbiAgICAgICAgICAgICAgICB2YWx1ZSA9IF9jLnNlbnQoKTtcclxuICAgICAgICAgICAgICAgIHJldHVybiBbMiAvKnJldHVybiovLCB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHN0YXR1czogXCJva1wiLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogdmFsdWVcclxuICAgICAgICAgICAgICAgICAgICB9XTtcclxuICAgICAgICAgICAgY2FzZSAzOlxyXG4gICAgICAgICAgICAgICAgZXJyb3JfMSA9IF9jLnNlbnQoKTtcclxuICAgICAgICAgICAgICAgIHJldHVybiBbMiAvKnJldHVybiovLCB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHN0YXR1czogZXJyb3JfMSBpbnN0YW5jZW9mIFRhc2tBYm9ydEVycm9yID8gXCJjYW5jZWxsZWRcIiA6IFwicmVqZWN0ZWRcIixcclxuICAgICAgICAgICAgICAgICAgICAgICAgZXJyb3I6IGVycm9yXzFcclxuICAgICAgICAgICAgICAgICAgICB9XTtcclxuICAgICAgICAgICAgY2FzZSA0OlxyXG4gICAgICAgICAgICAgICAgY2xlYW5VcCA9PSBudWxsID8gdm9pZCAwIDogY2xlYW5VcCgpO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIFs3IC8qZW5kZmluYWxseSovXTtcclxuICAgICAgICAgICAgY2FzZSA1OiByZXR1cm4gWzIgLypyZXR1cm4qL107XHJcbiAgICAgICAgfVxyXG4gICAgfSk7XHJcbn0pOyB9O1xyXG52YXIgY3JlYXRlUGF1c2UgPSBmdW5jdGlvbiAoc2lnbmFsKSB7XHJcbiAgICByZXR1cm4gZnVuY3Rpb24gKHByb21pc2UpIHtcclxuICAgICAgICByZXR1cm4gY2F0Y2hSZWplY3Rpb24oUHJvbWlzZS5yYWNlKFtwcm9taXNpZnlBYm9ydFNpZ25hbChzaWduYWwpLCBwcm9taXNlXSkudGhlbihmdW5jdGlvbiAob3V0cHV0KSB7XHJcbiAgICAgICAgICAgIHZhbGlkYXRlQWN0aXZlKHNpZ25hbCk7XHJcbiAgICAgICAgICAgIHJldHVybiBvdXRwdXQ7XHJcbiAgICAgICAgfSkpO1xyXG4gICAgfTtcclxufTtcclxudmFyIGNyZWF0ZURlbGF5ID0gZnVuY3Rpb24gKHNpZ25hbCkge1xyXG4gICAgdmFyIHBhdXNlID0gY3JlYXRlUGF1c2Uoc2lnbmFsKTtcclxuICAgIHJldHVybiBmdW5jdGlvbiAodGltZW91dE1zKSB7XHJcbiAgICAgICAgcmV0dXJuIHBhdXNlKG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlKSB7IHJldHVybiBzZXRUaW1lb3V0KHJlc29sdmUsIHRpbWVvdXRNcyk7IH0pKTtcclxuICAgIH07XHJcbn07XHJcbi8vIHNyYy9saXN0ZW5lck1pZGRsZXdhcmUvaW5kZXgudHNcclxudmFyIGFzc2lnbiA9IE9iamVjdC5hc3NpZ247XHJcbnZhciBJTlRFUk5BTF9OSUxfVE9LRU4gPSB7fTtcclxudmFyIGFsbSA9IFwibGlzdGVuZXJNaWRkbGV3YXJlXCI7XHJcbnZhciBjcmVhdGVGb3JrID0gZnVuY3Rpb24gKHBhcmVudEFib3J0U2lnbmFsKSB7XHJcbiAgICB2YXIgbGlua0NvbnRyb2xsZXJzID0gZnVuY3Rpb24gKGNvbnRyb2xsZXIpIHsgcmV0dXJuIGFkZEFib3J0U2lnbmFsTGlzdGVuZXIocGFyZW50QWJvcnRTaWduYWwsIGZ1bmN0aW9uICgpIHsgcmV0dXJuIGFib3J0Q29udHJvbGxlcldpdGhSZWFzb24oY29udHJvbGxlciwgcGFyZW50QWJvcnRTaWduYWwucmVhc29uKTsgfSk7IH07XHJcbiAgICByZXR1cm4gZnVuY3Rpb24gKHRhc2tFeGVjdXRvcikge1xyXG4gICAgICAgIGFzc2VydEZ1bmN0aW9uKHRhc2tFeGVjdXRvciwgXCJ0YXNrRXhlY3V0b3JcIik7XHJcbiAgICAgICAgdmFyIGNoaWxkQWJvcnRDb250cm9sbGVyID0gbmV3IEFib3J0Q29udHJvbGxlcigpO1xyXG4gICAgICAgIGxpbmtDb250cm9sbGVycyhjaGlsZEFib3J0Q29udHJvbGxlcik7XHJcbiAgICAgICAgdmFyIHJlc3VsdCA9IHJ1blRhc2soZnVuY3Rpb24gKCkgeyByZXR1cm4gX19hc3luYyh2b2lkIDAsIG51bGwsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgdmFyIHJlc3VsdDI7XHJcbiAgICAgICAgICAgIHJldHVybiBfX2dlbmVyYXRvcih0aGlzLCBmdW5jdGlvbiAoX2MpIHtcclxuICAgICAgICAgICAgICAgIHN3aXRjaCAoX2MubGFiZWwpIHtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIDA6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbGlkYXRlQWN0aXZlKHBhcmVudEFib3J0U2lnbmFsKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFsaWRhdGVBY3RpdmUoY2hpbGRBYm9ydENvbnRyb2xsZXIuc2lnbmFsKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFs0IC8qeWllbGQqLywgdGFza0V4ZWN1dG9yKHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYXVzZTogY3JlYXRlUGF1c2UoY2hpbGRBYm9ydENvbnRyb2xsZXIuc2lnbmFsKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZWxheTogY3JlYXRlRGVsYXkoY2hpbGRBYm9ydENvbnRyb2xsZXIuc2lnbmFsKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzaWduYWw6IGNoaWxkQWJvcnRDb250cm9sbGVyLnNpZ25hbFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSldO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMTpcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0MiA9IF9jLnNlbnQoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFsaWRhdGVBY3RpdmUoY2hpbGRBYm9ydENvbnRyb2xsZXIuc2lnbmFsKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFsyIC8qcmV0dXJuKi8sIHJlc3VsdDJdO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9KTsgfSwgZnVuY3Rpb24gKCkgeyByZXR1cm4gYWJvcnRDb250cm9sbGVyV2l0aFJlYXNvbihjaGlsZEFib3J0Q29udHJvbGxlciwgdGFza0NvbXBsZXRlZCk7IH0pO1xyXG4gICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgIHJlc3VsdDogY3JlYXRlUGF1c2UocGFyZW50QWJvcnRTaWduYWwpKHJlc3VsdCksXHJcbiAgICAgICAgICAgIGNhbmNlbDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgYWJvcnRDb250cm9sbGVyV2l0aFJlYXNvbihjaGlsZEFib3J0Q29udHJvbGxlciwgdGFza0NhbmNlbGxlZCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9O1xyXG4gICAgfTtcclxufTtcclxudmFyIGNyZWF0ZVRha2VQYXR0ZXJuID0gZnVuY3Rpb24gKHN0YXJ0TGlzdGVuaW5nLCBzaWduYWwpIHtcclxuICAgIHZhciB0YWtlID0gZnVuY3Rpb24gKHByZWRpY2F0ZSwgdGltZW91dCkgeyByZXR1cm4gX19hc3luYyh2b2lkIDAsIG51bGwsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB2YXIgdW5zdWJzY3JpYmUsIHR1cGxlUHJvbWlzZSwgcHJvbWlzZXMsIG91dHB1dDtcclxuICAgICAgICByZXR1cm4gX19nZW5lcmF0b3IodGhpcywgZnVuY3Rpb24gKF9jKSB7XHJcbiAgICAgICAgICAgIHN3aXRjaCAoX2MubGFiZWwpIHtcclxuICAgICAgICAgICAgICAgIGNhc2UgMDpcclxuICAgICAgICAgICAgICAgICAgICB2YWxpZGF0ZUFjdGl2ZShzaWduYWwpO1xyXG4gICAgICAgICAgICAgICAgICAgIHVuc3Vic2NyaWJlID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICAgICAgdHVwbGVQcm9taXNlID0gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdW5zdWJzY3JpYmUgPSBzdGFydExpc3RlbmluZyh7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcmVkaWNhdGU6IHByZWRpY2F0ZSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVmZmVjdDogZnVuY3Rpb24gKGFjdGlvbiwgbGlzdGVuZXJBcGkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsaXN0ZW5lckFwaS51bnN1YnNjcmliZSgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc29sdmUoW1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhY3Rpb24sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxpc3RlbmVyQXBpLmdldFN0YXRlKCksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxpc3RlbmVyQXBpLmdldE9yaWdpbmFsU3RhdGUoKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICBwcm9taXNlcyA9IFtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcHJvbWlzaWZ5QWJvcnRTaWduYWwoc2lnbmFsKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgdHVwbGVQcm9taXNlXHJcbiAgICAgICAgICAgICAgICAgICAgXTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAodGltZW91dCAhPSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHByb21pc2VzLnB1c2gobmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUpIHsgcmV0dXJuIHNldFRpbWVvdXQocmVzb2x2ZSwgdGltZW91dCwgbnVsbCk7IH0pKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgX2MubGFiZWwgPSAxO1xyXG4gICAgICAgICAgICAgICAgY2FzZSAxOlxyXG4gICAgICAgICAgICAgICAgICAgIF9jLnRyeXMucHVzaChbMSwgLCAzLCA0XSk7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFs0IC8qeWllbGQqLywgUHJvbWlzZS5yYWNlKHByb21pc2VzKV07XHJcbiAgICAgICAgICAgICAgICBjYXNlIDI6XHJcbiAgICAgICAgICAgICAgICAgICAgb3V0cHV0ID0gX2Muc2VudCgpO1xyXG4gICAgICAgICAgICAgICAgICAgIHZhbGlkYXRlQWN0aXZlKHNpZ25hbCk7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFsyIC8qcmV0dXJuKi8sIG91dHB1dF07XHJcbiAgICAgICAgICAgICAgICBjYXNlIDM6XHJcbiAgICAgICAgICAgICAgICAgICAgdW5zdWJzY3JpYmUoKTtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzcgLyplbmRmaW5hbGx5Ki9dO1xyXG4gICAgICAgICAgICAgICAgY2FzZSA0OiByZXR1cm4gWzIgLypyZXR1cm4qL107XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgIH0pOyB9O1xyXG4gICAgcmV0dXJuIGZ1bmN0aW9uIChwcmVkaWNhdGUsIHRpbWVvdXQpIHsgcmV0dXJuIGNhdGNoUmVqZWN0aW9uKHRha2UocHJlZGljYXRlLCB0aW1lb3V0KSk7IH07XHJcbn07XHJcbnZhciBnZXRMaXN0ZW5lckVudHJ5UHJvcHNGcm9tID0gZnVuY3Rpb24gKG9wdGlvbnMpIHtcclxuICAgIHZhciB0eXBlID0gb3B0aW9ucy50eXBlLCBhY3Rpb25DcmVhdG9yID0gb3B0aW9ucy5hY3Rpb25DcmVhdG9yLCBtYXRjaGVyID0gb3B0aW9ucy5tYXRjaGVyLCBwcmVkaWNhdGUgPSBvcHRpb25zLnByZWRpY2F0ZSwgZWZmZWN0ID0gb3B0aW9ucy5lZmZlY3Q7XHJcbiAgICBpZiAodHlwZSkge1xyXG4gICAgICAgIHByZWRpY2F0ZSA9IGNyZWF0ZUFjdGlvbih0eXBlKS5tYXRjaDtcclxuICAgIH1cclxuICAgIGVsc2UgaWYgKGFjdGlvbkNyZWF0b3IpIHtcclxuICAgICAgICB0eXBlID0gYWN0aW9uQ3JlYXRvci50eXBlO1xyXG4gICAgICAgIHByZWRpY2F0ZSA9IGFjdGlvbkNyZWF0b3IubWF0Y2g7XHJcbiAgICB9XHJcbiAgICBlbHNlIGlmIChtYXRjaGVyKSB7XHJcbiAgICAgICAgcHJlZGljYXRlID0gbWF0Y2hlcjtcclxuICAgIH1cclxuICAgIGVsc2UgaWYgKHByZWRpY2F0ZSkge1xyXG4gICAgfVxyXG4gICAgZWxzZSB7XHJcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiQ3JlYXRpbmcgb3IgcmVtb3ZpbmcgYSBsaXN0ZW5lciByZXF1aXJlcyBvbmUgb2YgdGhlIGtub3duIGZpZWxkcyBmb3IgbWF0Y2hpbmcgYW4gYWN0aW9uXCIpO1xyXG4gICAgfVxyXG4gICAgYXNzZXJ0RnVuY3Rpb24oZWZmZWN0LCBcIm9wdGlvbnMubGlzdGVuZXJcIik7XHJcbiAgICByZXR1cm4geyBwcmVkaWNhdGU6IHByZWRpY2F0ZSwgdHlwZTogdHlwZSwgZWZmZWN0OiBlZmZlY3QgfTtcclxufTtcclxudmFyIGNyZWF0ZUxpc3RlbmVyRW50cnkgPSBmdW5jdGlvbiAob3B0aW9ucykge1xyXG4gICAgdmFyIF9jID0gZ2V0TGlzdGVuZXJFbnRyeVByb3BzRnJvbShvcHRpb25zKSwgdHlwZSA9IF9jLnR5cGUsIHByZWRpY2F0ZSA9IF9jLnByZWRpY2F0ZSwgZWZmZWN0ID0gX2MuZWZmZWN0O1xyXG4gICAgdmFyIGlkID0gbmFub2lkKCk7XHJcbiAgICB2YXIgZW50cnkgPSB7XHJcbiAgICAgICAgaWQ6IGlkLFxyXG4gICAgICAgIGVmZmVjdDogZWZmZWN0LFxyXG4gICAgICAgIHR5cGU6IHR5cGUsXHJcbiAgICAgICAgcHJlZGljYXRlOiBwcmVkaWNhdGUsXHJcbiAgICAgICAgcGVuZGluZzogbmV3IFNldCgpLFxyXG4gICAgICAgIHVuc3Vic2NyaWJlOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIlVuc3Vic2NyaWJlIG5vdCBpbml0aWFsaXplZFwiKTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgcmV0dXJuIGVudHJ5O1xyXG59O1xyXG52YXIgY3JlYXRlQ2xlYXJMaXN0ZW5lck1pZGRsZXdhcmUgPSBmdW5jdGlvbiAobGlzdGVuZXJNYXApIHtcclxuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgbGlzdGVuZXJNYXAuZm9yRWFjaChjYW5jZWxBY3RpdmVMaXN0ZW5lcnMpO1xyXG4gICAgICAgIGxpc3RlbmVyTWFwLmNsZWFyKCk7XHJcbiAgICB9O1xyXG59O1xyXG52YXIgc2FmZWx5Tm90aWZ5RXJyb3IgPSBmdW5jdGlvbiAoZXJyb3JIYW5kbGVyLCBlcnJvclRvTm90aWZ5LCBlcnJvckluZm8pIHtcclxuICAgIHRyeSB7XHJcbiAgICAgICAgZXJyb3JIYW5kbGVyKGVycm9yVG9Ob3RpZnksIGVycm9ySW5mbyk7XHJcbiAgICB9XHJcbiAgICBjYXRjaCAoZXJyb3JIYW5kbGVyRXJyb3IpIHtcclxuICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgdGhyb3cgZXJyb3JIYW5kbGVyRXJyb3I7XHJcbiAgICAgICAgfSwgMCk7XHJcbiAgICB9XHJcbn07XHJcbnZhciBhZGRMaXN0ZW5lciA9IGNyZWF0ZUFjdGlvbihhbG0gKyBcIi9hZGRcIik7XHJcbnZhciBjbGVhckFsbExpc3RlbmVycyA9IGNyZWF0ZUFjdGlvbihhbG0gKyBcIi9yZW1vdmVBbGxcIik7XHJcbnZhciByZW1vdmVMaXN0ZW5lciA9IGNyZWF0ZUFjdGlvbihhbG0gKyBcIi9yZW1vdmVcIik7XHJcbnZhciBkZWZhdWx0RXJyb3JIYW5kbGVyID0gZnVuY3Rpb24gKCkge1xyXG4gICAgdmFyIGFyZ3MgPSBbXTtcclxuICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBhcmd1bWVudHMubGVuZ3RoOyBfaSsrKSB7XHJcbiAgICAgICAgYXJnc1tfaV0gPSBhcmd1bWVudHNbX2ldO1xyXG4gICAgfVxyXG4gICAgY29uc29sZS5lcnJvci5hcHBseShjb25zb2xlLCBfX3NwcmVhZEFycmF5KFthbG0gKyBcIi9lcnJvclwiXSwgYXJncykpO1xyXG59O1xyXG52YXIgY2FuY2VsQWN0aXZlTGlzdGVuZXJzID0gZnVuY3Rpb24gKGVudHJ5KSB7XHJcbiAgICBlbnRyeS5wZW5kaW5nLmZvckVhY2goZnVuY3Rpb24gKGNvbnRyb2xsZXIpIHtcclxuICAgICAgICBhYm9ydENvbnRyb2xsZXJXaXRoUmVhc29uKGNvbnRyb2xsZXIsIGxpc3RlbmVyQ2FuY2VsbGVkKTtcclxuICAgIH0pO1xyXG59O1xyXG5mdW5jdGlvbiBjcmVhdGVMaXN0ZW5lck1pZGRsZXdhcmUobWlkZGxld2FyZU9wdGlvbnMpIHtcclxuICAgIHZhciBfdGhpcyA9IHRoaXM7XHJcbiAgICBpZiAobWlkZGxld2FyZU9wdGlvbnMgPT09IHZvaWQgMCkgeyBtaWRkbGV3YXJlT3B0aW9ucyA9IHt9OyB9XHJcbiAgICB2YXIgbGlzdGVuZXJNYXAgPSBuZXcgTWFwKCk7XHJcbiAgICB2YXIgZXh0cmEgPSBtaWRkbGV3YXJlT3B0aW9ucy5leHRyYSwgX2MgPSBtaWRkbGV3YXJlT3B0aW9ucy5vbkVycm9yLCBvbkVycm9yID0gX2MgPT09IHZvaWQgMCA/IGRlZmF1bHRFcnJvckhhbmRsZXIgOiBfYztcclxuICAgIGFzc2VydEZ1bmN0aW9uKG9uRXJyb3IsIFwib25FcnJvclwiKTtcclxuICAgIHZhciBpbnNlcnRFbnRyeSA9IGZ1bmN0aW9uIChlbnRyeSkge1xyXG4gICAgICAgIGVudHJ5LnVuc3Vic2NyaWJlID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gbGlzdGVuZXJNYXAuZGVsZXRlKGVudHJ5LmlkKTsgfTtcclxuICAgICAgICBsaXN0ZW5lck1hcC5zZXQoZW50cnkuaWQsIGVudHJ5KTtcclxuICAgICAgICByZXR1cm4gZnVuY3Rpb24gKGNhbmNlbE9wdGlvbnMpIHtcclxuICAgICAgICAgICAgZW50cnkudW5zdWJzY3JpYmUoKTtcclxuICAgICAgICAgICAgaWYgKGNhbmNlbE9wdGlvbnMgPT0gbnVsbCA/IHZvaWQgMCA6IGNhbmNlbE9wdGlvbnMuY2FuY2VsQWN0aXZlKSB7XHJcbiAgICAgICAgICAgICAgICBjYW5jZWxBY3RpdmVMaXN0ZW5lcnMoZW50cnkpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfTtcclxuICAgIH07XHJcbiAgICB2YXIgZmluZExpc3RlbmVyRW50cnkgPSBmdW5jdGlvbiAoY29tcGFyYXRvcikge1xyXG4gICAgICAgIGZvciAodmFyIF9pID0gMCwgX2MgPSBsaXN0ZW5lck1hcC52YWx1ZXMoKTsgX2kgPCBfYy5sZW5ndGg7IF9pKyspIHtcclxuICAgICAgICAgICAgdmFyIGVudHJ5ID0gX2NbX2ldO1xyXG4gICAgICAgICAgICBpZiAoY29tcGFyYXRvcihlbnRyeSkpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBlbnRyeTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gdm9pZCAwO1xyXG4gICAgfTtcclxuICAgIHZhciBzdGFydExpc3RlbmluZyA9IGZ1bmN0aW9uIChvcHRpb25zKSB7XHJcbiAgICAgICAgdmFyIGVudHJ5ID0gZmluZExpc3RlbmVyRW50cnkoZnVuY3Rpb24gKGV4aXN0aW5nRW50cnkpIHsgcmV0dXJuIGV4aXN0aW5nRW50cnkuZWZmZWN0ID09PSBvcHRpb25zLmVmZmVjdDsgfSk7XHJcbiAgICAgICAgaWYgKCFlbnRyeSkge1xyXG4gICAgICAgICAgICBlbnRyeSA9IGNyZWF0ZUxpc3RlbmVyRW50cnkob3B0aW9ucyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBpbnNlcnRFbnRyeShlbnRyeSk7XHJcbiAgICB9O1xyXG4gICAgdmFyIHN0b3BMaXN0ZW5pbmcgPSBmdW5jdGlvbiAob3B0aW9ucykge1xyXG4gICAgICAgIHZhciBfYyA9IGdldExpc3RlbmVyRW50cnlQcm9wc0Zyb20ob3B0aW9ucyksIHR5cGUgPSBfYy50eXBlLCBlZmZlY3QgPSBfYy5lZmZlY3QsIHByZWRpY2F0ZSA9IF9jLnByZWRpY2F0ZTtcclxuICAgICAgICB2YXIgZW50cnkgPSBmaW5kTGlzdGVuZXJFbnRyeShmdW5jdGlvbiAoZW50cnkyKSB7XHJcbiAgICAgICAgICAgIHZhciBtYXRjaFByZWRpY2F0ZU9yVHlwZSA9IHR5cGVvZiB0eXBlID09PSBcInN0cmluZ1wiID8gZW50cnkyLnR5cGUgPT09IHR5cGUgOiBlbnRyeTIucHJlZGljYXRlID09PSBwcmVkaWNhdGU7XHJcbiAgICAgICAgICAgIHJldHVybiBtYXRjaFByZWRpY2F0ZU9yVHlwZSAmJiBlbnRyeTIuZWZmZWN0ID09PSBlZmZlY3Q7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgaWYgKGVudHJ5KSB7XHJcbiAgICAgICAgICAgIGVudHJ5LnVuc3Vic2NyaWJlKCk7XHJcbiAgICAgICAgICAgIGlmIChvcHRpb25zLmNhbmNlbEFjdGl2ZSkge1xyXG4gICAgICAgICAgICAgICAgY2FuY2VsQWN0aXZlTGlzdGVuZXJzKGVudHJ5KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gISFlbnRyeTtcclxuICAgIH07XHJcbiAgICB2YXIgbm90aWZ5TGlzdGVuZXIgPSBmdW5jdGlvbiAoZW50cnksIGFjdGlvbiwgYXBpLCBnZXRPcmlnaW5hbFN0YXRlKSB7IHJldHVybiBfX2FzeW5jKF90aGlzLCBudWxsLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdmFyIGludGVybmFsVGFza0NvbnRyb2xsZXIsIHRha2UsIGxpc3RlbmVyRXJyb3JfMTtcclxuICAgICAgICByZXR1cm4gX19nZW5lcmF0b3IodGhpcywgZnVuY3Rpb24gKF9jKSB7XHJcbiAgICAgICAgICAgIHN3aXRjaCAoX2MubGFiZWwpIHtcclxuICAgICAgICAgICAgICAgIGNhc2UgMDpcclxuICAgICAgICAgICAgICAgICAgICBpbnRlcm5hbFRhc2tDb250cm9sbGVyID0gbmV3IEFib3J0Q29udHJvbGxlcigpO1xyXG4gICAgICAgICAgICAgICAgICAgIHRha2UgPSBjcmVhdGVUYWtlUGF0dGVybihzdGFydExpc3RlbmluZywgaW50ZXJuYWxUYXNrQ29udHJvbGxlci5zaWduYWwpO1xyXG4gICAgICAgICAgICAgICAgICAgIF9jLmxhYmVsID0gMTtcclxuICAgICAgICAgICAgICAgIGNhc2UgMTpcclxuICAgICAgICAgICAgICAgICAgICBfYy50cnlzLnB1c2goWzEsIDMsIDQsIDVdKTtcclxuICAgICAgICAgICAgICAgICAgICBlbnRyeS5wZW5kaW5nLmFkZChpbnRlcm5hbFRhc2tDb250cm9sbGVyKTtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzQgLyp5aWVsZCovLCBQcm9taXNlLnJlc29sdmUoZW50cnkuZWZmZWN0KGFjdGlvbiwgYXNzaWduKHt9LCBhcGksIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGdldE9yaWdpbmFsU3RhdGU6IGdldE9yaWdpbmFsU3RhdGUsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25kaXRpb246IGZ1bmN0aW9uIChwcmVkaWNhdGUsIHRpbWVvdXQpIHsgcmV0dXJuIHRha2UocHJlZGljYXRlLCB0aW1lb3V0KS50aGVuKEJvb2xlYW4pOyB9LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGFrZTogdGFrZSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlbGF5OiBjcmVhdGVEZWxheShpbnRlcm5hbFRhc2tDb250cm9sbGVyLnNpZ25hbCksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYXVzZTogY3JlYXRlUGF1c2UoaW50ZXJuYWxUYXNrQ29udHJvbGxlci5zaWduYWwpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZXh0cmE6IGV4dHJhLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2lnbmFsOiBpbnRlcm5hbFRhc2tDb250cm9sbGVyLnNpZ25hbCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvcms6IGNyZWF0ZUZvcmsoaW50ZXJuYWxUYXNrQ29udHJvbGxlci5zaWduYWwpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdW5zdWJzY3JpYmU6IGVudHJ5LnVuc3Vic2NyaWJlLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc3Vic2NyaWJlOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGlzdGVuZXJNYXAuc2V0KGVudHJ5LmlkLCBlbnRyeSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FuY2VsQWN0aXZlTGlzdGVuZXJzOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZW50cnkucGVuZGluZy5mb3JFYWNoKGZ1bmN0aW9uIChjb250cm9sbGVyLCBfLCBzZXQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGNvbnRyb2xsZXIgIT09IGludGVybmFsVGFza0NvbnRyb2xsZXIpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFib3J0Q29udHJvbGxlcldpdGhSZWFzb24oY29udHJvbGxlciwgbGlzdGVuZXJDYW5jZWxsZWQpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2V0LmRlbGV0ZShjb250cm9sbGVyKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9KSkpXTtcclxuICAgICAgICAgICAgICAgIGNhc2UgMjpcclxuICAgICAgICAgICAgICAgICAgICBfYy5zZW50KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFszIC8qYnJlYWsqLywgNV07XHJcbiAgICAgICAgICAgICAgICBjYXNlIDM6XHJcbiAgICAgICAgICAgICAgICAgICAgbGlzdGVuZXJFcnJvcl8xID0gX2Muc2VudCgpO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICghKGxpc3RlbmVyRXJyb3JfMSBpbnN0YW5jZW9mIFRhc2tBYm9ydEVycm9yKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBzYWZlbHlOb3RpZnlFcnJvcihvbkVycm9yLCBsaXN0ZW5lckVycm9yXzEsIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJhaXNlZEJ5OiBcImVmZmVjdFwiXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzMgLypicmVhayovLCA1XTtcclxuICAgICAgICAgICAgICAgIGNhc2UgNDpcclxuICAgICAgICAgICAgICAgICAgICBhYm9ydENvbnRyb2xsZXJXaXRoUmVhc29uKGludGVybmFsVGFza0NvbnRyb2xsZXIsIGxpc3RlbmVyQ29tcGxldGVkKTtcclxuICAgICAgICAgICAgICAgICAgICBlbnRyeS5wZW5kaW5nLmRlbGV0ZShpbnRlcm5hbFRhc2tDb250cm9sbGVyKTtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzcgLyplbmRmaW5hbGx5Ki9dO1xyXG4gICAgICAgICAgICAgICAgY2FzZSA1OiByZXR1cm4gWzIgLypyZXR1cm4qL107XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgIH0pOyB9O1xyXG4gICAgdmFyIGNsZWFyTGlzdGVuZXJNaWRkbGV3YXJlID0gY3JlYXRlQ2xlYXJMaXN0ZW5lck1pZGRsZXdhcmUobGlzdGVuZXJNYXApO1xyXG4gICAgdmFyIG1pZGRsZXdhcmUgPSBmdW5jdGlvbiAoYXBpKSB7IHJldHVybiBmdW5jdGlvbiAobmV4dCkgeyByZXR1cm4gZnVuY3Rpb24gKGFjdGlvbikge1xyXG4gICAgICAgIGlmIChhZGRMaXN0ZW5lci5tYXRjaChhY3Rpb24pKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBzdGFydExpc3RlbmluZyhhY3Rpb24ucGF5bG9hZCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChjbGVhckFsbExpc3RlbmVycy5tYXRjaChhY3Rpb24pKSB7XHJcbiAgICAgICAgICAgIGNsZWFyTGlzdGVuZXJNaWRkbGV3YXJlKCk7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHJlbW92ZUxpc3RlbmVyLm1hdGNoKGFjdGlvbikpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHN0b3BMaXN0ZW5pbmcoYWN0aW9uLnBheWxvYWQpO1xyXG4gICAgICAgIH1cclxuICAgICAgICB2YXIgb3JpZ2luYWxTdGF0ZSA9IGFwaS5nZXRTdGF0ZSgpO1xyXG4gICAgICAgIHZhciBnZXRPcmlnaW5hbFN0YXRlID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICBpZiAob3JpZ2luYWxTdGF0ZSA9PT0gSU5URVJOQUxfTklMX1RPS0VOKSB7XHJcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYWxtICsgXCI6IGdldE9yaWdpbmFsU3RhdGUgY2FuIG9ubHkgYmUgY2FsbGVkIHN5bmNocm9ub3VzbHlcIik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIG9yaWdpbmFsU3RhdGU7XHJcbiAgICAgICAgfTtcclxuICAgICAgICB2YXIgcmVzdWx0O1xyXG4gICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgIHJlc3VsdCA9IG5leHQoYWN0aW9uKTtcclxuICAgICAgICAgICAgaWYgKGxpc3RlbmVyTWFwLnNpemUgPiAwKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgY3VycmVudFN0YXRlID0gYXBpLmdldFN0YXRlKCk7XHJcbiAgICAgICAgICAgICAgICB2YXIgbGlzdGVuZXJFbnRyaWVzID0gQXJyYXkuZnJvbShsaXN0ZW5lck1hcC52YWx1ZXMoKSk7XHJcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBfaSA9IDAsIGxpc3RlbmVyRW50cmllc18xID0gbGlzdGVuZXJFbnRyaWVzOyBfaSA8IGxpc3RlbmVyRW50cmllc18xLmxlbmd0aDsgX2krKykge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBlbnRyeSA9IGxpc3RlbmVyRW50cmllc18xW19pXTtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgcnVuTGlzdGVuZXIgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBydW5MaXN0ZW5lciA9IGVudHJ5LnByZWRpY2F0ZShhY3Rpb24sIGN1cnJlbnRTdGF0ZSwgb3JpZ2luYWxTdGF0ZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGNhdGNoIChwcmVkaWNhdGVFcnJvcikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBydW5MaXN0ZW5lciA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBzYWZlbHlOb3RpZnlFcnJvcihvbkVycm9yLCBwcmVkaWNhdGVFcnJvciwge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmFpc2VkQnk6IFwicHJlZGljYXRlXCJcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGlmICghcnVuTGlzdGVuZXIpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29udGludWU7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIG5vdGlmeUxpc3RlbmVyKGVudHJ5LCBhY3Rpb24sIGFwaSwgZ2V0T3JpZ2luYWxTdGF0ZSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgZmluYWxseSB7XHJcbiAgICAgICAgICAgIG9yaWdpbmFsU3RhdGUgPSBJTlRFUk5BTF9OSUxfVE9LRU47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiByZXN1bHQ7XHJcbiAgICB9OyB9OyB9O1xyXG4gICAgcmV0dXJuIHtcclxuICAgICAgICBtaWRkbGV3YXJlOiBtaWRkbGV3YXJlLFxyXG4gICAgICAgIHN0YXJ0TGlzdGVuaW5nOiBzdGFydExpc3RlbmluZyxcclxuICAgICAgICBzdG9wTGlzdGVuaW5nOiBzdG9wTGlzdGVuaW5nLFxyXG4gICAgICAgIGNsZWFyTGlzdGVuZXJzOiBjbGVhckxpc3RlbmVyTWlkZGxld2FyZVxyXG4gICAgfTtcclxufVxyXG4vLyBzcmMvaW5kZXgudHNcclxuZW5hYmxlRVM1KCk7XHJcbmV4cG9ydCB7IE1pZGRsZXdhcmVBcnJheSwgVGFza0Fib3J0RXJyb3IsIGFkZExpc3RlbmVyLCBjbGVhckFsbExpc3RlbmVycywgY29uZmlndXJlU3RvcmUsIGNyZWF0ZUFjdGlvbiwgY3JlYXRlQXN5bmNUaHVuaywgY3JlYXRlRHJhZnRTYWZlU2VsZWN0b3IsIGNyZWF0ZUVudGl0eUFkYXB0ZXIsIGNyZWF0ZUltbXV0YWJsZVN0YXRlSW52YXJpYW50TWlkZGxld2FyZSwgY3JlYXRlTGlzdGVuZXJNaWRkbGV3YXJlLCBkZWZhdWx0MiBhcyBjcmVhdGVOZXh0U3RhdGUsIGNyZWF0ZVJlZHVjZXIsIGNyZWF0ZVNlbGVjdG9yMiBhcyBjcmVhdGVTZWxlY3RvciwgY3JlYXRlU2VyaWFsaXphYmxlU3RhdGVJbnZhcmlhbnRNaWRkbGV3YXJlLCBjcmVhdGVTbGljZSwgY3VycmVudDIgYXMgY3VycmVudCwgZmluZE5vblNlcmlhbGl6YWJsZVZhbHVlLCBmcmVlemUsIGdldERlZmF1bHRNaWRkbGV3YXJlLCBnZXRUeXBlLCBpc0FsbE9mLCBpc0FueU9mLCBpc0FzeW5jVGh1bmtBY3Rpb24sIGlzRHJhZnQ0IGFzIGlzRHJhZnQsIGlzRnVsZmlsbGVkLCBpc0ltbXV0YWJsZURlZmF1bHQsIGlzUGVuZGluZywgaXNQbGFpbiwgaXNQbGFpbk9iamVjdCwgaXNSZWplY3RlZCwgaXNSZWplY3RlZFdpdGhWYWx1ZSwgbWluaVNlcmlhbGl6ZUVycm9yLCBuYW5vaWQsIG9yaWdpbmFsLCByZW1vdmVMaXN0ZW5lciwgdW53cmFwUmVzdWx0IH07XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXJlZHV4LXRvb2xraXQuZXNtLmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xudmFyIE1pdGhyaWxUc3hDb21wb25lbnQgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gTWl0aHJpbFRzeENvbXBvbmVudCgpIHtcbiAgICB9XG4gICAgcmV0dXJuIE1pdGhyaWxUc3hDb21wb25lbnQ7XG59KCkpO1xuZXhwb3J0cy5NaXRocmlsVHN4Q29tcG9uZW50ID0gTWl0aHJpbFRzeENvbXBvbmVudDtcbiIsIlwidXNlIHN0cmljdFwiXG5cbnZhciBWbm9kZSA9IHJlcXVpcmUoXCIuLi9yZW5kZXIvdm5vZGVcIilcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihyZW5kZXIsIHNjaGVkdWxlLCBjb25zb2xlKSB7XG5cdHZhciBzdWJzY3JpcHRpb25zID0gW11cblx0dmFyIHJlbmRlcmluZyA9IGZhbHNlXG5cdHZhciBwZW5kaW5nID0gZmFsc2VcblxuXHRmdW5jdGlvbiBzeW5jKCkge1xuXHRcdGlmIChyZW5kZXJpbmcpIHRocm93IG5ldyBFcnJvcihcIk5lc3RlZCBtLnJlZHJhdy5zeW5jKCkgY2FsbFwiKVxuXHRcdHJlbmRlcmluZyA9IHRydWVcblx0XHRmb3IgKHZhciBpID0gMDsgaSA8IHN1YnNjcmlwdGlvbnMubGVuZ3RoOyBpICs9IDIpIHtcblx0XHRcdHRyeSB7IHJlbmRlcihzdWJzY3JpcHRpb25zW2ldLCBWbm9kZShzdWJzY3JpcHRpb25zW2kgKyAxXSksIHJlZHJhdykgfVxuXHRcdFx0Y2F0Y2ggKGUpIHsgY29uc29sZS5lcnJvcihlKSB9XG5cdFx0fVxuXHRcdHJlbmRlcmluZyA9IGZhbHNlXG5cdH1cblxuXHRmdW5jdGlvbiByZWRyYXcoKSB7XG5cdFx0aWYgKCFwZW5kaW5nKSB7XG5cdFx0XHRwZW5kaW5nID0gdHJ1ZVxuXHRcdFx0c2NoZWR1bGUoZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHBlbmRpbmcgPSBmYWxzZVxuXHRcdFx0XHRzeW5jKClcblx0XHRcdH0pXG5cdFx0fVxuXHR9XG5cblx0cmVkcmF3LnN5bmMgPSBzeW5jXG5cblx0ZnVuY3Rpb24gbW91bnQocm9vdCwgY29tcG9uZW50KSB7XG5cdFx0aWYgKGNvbXBvbmVudCAhPSBudWxsICYmIGNvbXBvbmVudC52aWV3ID09IG51bGwgJiYgdHlwZW9mIGNvbXBvbmVudCAhPT0gXCJmdW5jdGlvblwiKSB7XG5cdFx0XHR0aHJvdyBuZXcgVHlwZUVycm9yKFwibS5tb3VudChlbGVtZW50LCBjb21wb25lbnQpIGV4cGVjdHMgYSBjb21wb25lbnQsIG5vdCBhIHZub2RlXCIpXG5cdFx0fVxuXG5cdFx0dmFyIGluZGV4ID0gc3Vic2NyaXB0aW9ucy5pbmRleE9mKHJvb3QpXG5cdFx0aWYgKGluZGV4ID49IDApIHtcblx0XHRcdHN1YnNjcmlwdGlvbnMuc3BsaWNlKGluZGV4LCAyKVxuXHRcdFx0cmVuZGVyKHJvb3QsIFtdLCByZWRyYXcpXG5cdFx0fVxuXG5cdFx0aWYgKGNvbXBvbmVudCAhPSBudWxsKSB7XG5cdFx0XHRzdWJzY3JpcHRpb25zLnB1c2gocm9vdCwgY29tcG9uZW50KVxuXHRcdFx0cmVuZGVyKHJvb3QsIFZub2RlKGNvbXBvbmVudCksIHJlZHJhdylcblx0XHR9XG5cdH1cblxuXHRyZXR1cm4ge21vdW50OiBtb3VudCwgcmVkcmF3OiByZWRyYXd9XG59XG4iLCJcInVzZSBzdHJpY3RcIlxuXG52YXIgVm5vZGUgPSByZXF1aXJlKFwiLi4vcmVuZGVyL3Zub2RlXCIpXG52YXIgbSA9IHJlcXVpcmUoXCIuLi9yZW5kZXIvaHlwZXJzY3JpcHRcIilcbnZhciBQcm9taXNlID0gcmVxdWlyZShcIi4uL3Byb21pc2UvcHJvbWlzZVwiKVxuXG52YXIgYnVpbGRQYXRobmFtZSA9IHJlcXVpcmUoXCIuLi9wYXRobmFtZS9idWlsZFwiKVxudmFyIHBhcnNlUGF0aG5hbWUgPSByZXF1aXJlKFwiLi4vcGF0aG5hbWUvcGFyc2VcIilcbnZhciBjb21waWxlVGVtcGxhdGUgPSByZXF1aXJlKFwiLi4vcGF0aG5hbWUvY29tcGlsZVRlbXBsYXRlXCIpXG52YXIgYXNzaWduID0gcmVxdWlyZShcIi4uL3BhdGhuYW1lL2Fzc2lnblwiKVxuXG52YXIgc2VudGluZWwgPSB7fVxuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKCR3aW5kb3csIG1vdW50UmVkcmF3KSB7XG5cdHZhciBmaXJlQXN5bmNcblxuXHRmdW5jdGlvbiBzZXRQYXRoKHBhdGgsIGRhdGEsIG9wdGlvbnMpIHtcblx0XHRwYXRoID0gYnVpbGRQYXRobmFtZShwYXRoLCBkYXRhKVxuXHRcdGlmIChmaXJlQXN5bmMgIT0gbnVsbCkge1xuXHRcdFx0ZmlyZUFzeW5jKClcblx0XHRcdHZhciBzdGF0ZSA9IG9wdGlvbnMgPyBvcHRpb25zLnN0YXRlIDogbnVsbFxuXHRcdFx0dmFyIHRpdGxlID0gb3B0aW9ucyA/IG9wdGlvbnMudGl0bGUgOiBudWxsXG5cdFx0XHRpZiAob3B0aW9ucyAmJiBvcHRpb25zLnJlcGxhY2UpICR3aW5kb3cuaGlzdG9yeS5yZXBsYWNlU3RhdGUoc3RhdGUsIHRpdGxlLCByb3V0ZS5wcmVmaXggKyBwYXRoKVxuXHRcdFx0ZWxzZSAkd2luZG93Lmhpc3RvcnkucHVzaFN0YXRlKHN0YXRlLCB0aXRsZSwgcm91dGUucHJlZml4ICsgcGF0aClcblx0XHR9XG5cdFx0ZWxzZSB7XG5cdFx0XHQkd2luZG93LmxvY2F0aW9uLmhyZWYgPSByb3V0ZS5wcmVmaXggKyBwYXRoXG5cdFx0fVxuXHR9XG5cblx0dmFyIGN1cnJlbnRSZXNvbHZlciA9IHNlbnRpbmVsLCBjb21wb25lbnQsIGF0dHJzLCBjdXJyZW50UGF0aCwgbGFzdFVwZGF0ZVxuXG5cdHZhciBTS0lQID0gcm91dGUuU0tJUCA9IHt9XG5cblx0ZnVuY3Rpb24gcm91dGUocm9vdCwgZGVmYXVsdFJvdXRlLCByb3V0ZXMpIHtcblx0XHRpZiAocm9vdCA9PSBudWxsKSB0aHJvdyBuZXcgRXJyb3IoXCJFbnN1cmUgdGhlIERPTSBlbGVtZW50IHRoYXQgd2FzIHBhc3NlZCB0byBgbS5yb3V0ZWAgaXMgbm90IHVuZGVmaW5lZFwiKVxuXHRcdC8vIDAgPSBzdGFydFxuXHRcdC8vIDEgPSBpbml0XG5cdFx0Ly8gMiA9IHJlYWR5XG5cdFx0dmFyIHN0YXRlID0gMFxuXG5cdFx0dmFyIGNvbXBpbGVkID0gT2JqZWN0LmtleXMocm91dGVzKS5tYXAoZnVuY3Rpb24ocm91dGUpIHtcblx0XHRcdGlmIChyb3V0ZVswXSAhPT0gXCIvXCIpIHRocm93IG5ldyBTeW50YXhFcnJvcihcIlJvdXRlcyBtdXN0IHN0YXJ0IHdpdGggYSBgL2BcIilcblx0XHRcdGlmICgoLzooW15cXC9cXC4tXSspKFxcLnszfSk/Oi8pLnRlc3Qocm91dGUpKSB7XG5cdFx0XHRcdHRocm93IG5ldyBTeW50YXhFcnJvcihcIlJvdXRlIHBhcmFtZXRlciBuYW1lcyBtdXN0IGJlIHNlcGFyYXRlZCB3aXRoIGVpdGhlciBgL2AsIGAuYCwgb3IgYC1gXCIpXG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4ge1xuXHRcdFx0XHRyb3V0ZTogcm91dGUsXG5cdFx0XHRcdGNvbXBvbmVudDogcm91dGVzW3JvdXRlXSxcblx0XHRcdFx0Y2hlY2s6IGNvbXBpbGVUZW1wbGF0ZShyb3V0ZSksXG5cdFx0XHR9XG5cdFx0fSlcblx0XHR2YXIgY2FsbEFzeW5jID0gdHlwZW9mIHNldEltbWVkaWF0ZSA9PT0gXCJmdW5jdGlvblwiID8gc2V0SW1tZWRpYXRlIDogc2V0VGltZW91dFxuXHRcdHZhciBwID0gUHJvbWlzZS5yZXNvbHZlKClcblx0XHR2YXIgc2NoZWR1bGVkID0gZmFsc2Vcblx0XHR2YXIgb25yZW1vdmVcblxuXHRcdGZpcmVBc3luYyA9IG51bGxcblxuXHRcdGlmIChkZWZhdWx0Um91dGUgIT0gbnVsbCkge1xuXHRcdFx0dmFyIGRlZmF1bHREYXRhID0gcGFyc2VQYXRobmFtZShkZWZhdWx0Um91dGUpXG5cblx0XHRcdGlmICghY29tcGlsZWQuc29tZShmdW5jdGlvbiAoaSkgeyByZXR1cm4gaS5jaGVjayhkZWZhdWx0RGF0YSkgfSkpIHtcblx0XHRcdFx0dGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwiRGVmYXVsdCByb3V0ZSBkb2Vzbid0IG1hdGNoIGFueSBrbm93biByb3V0ZXNcIilcblx0XHRcdH1cblx0XHR9XG5cblx0XHRmdW5jdGlvbiByZXNvbHZlUm91dGUoKSB7XG5cdFx0XHRzY2hlZHVsZWQgPSBmYWxzZVxuXHRcdFx0Ly8gQ29uc2lkZXIgdGhlIHBhdGhuYW1lIGhvbGlzdGljYWxseS4gVGhlIHByZWZpeCBtaWdodCBldmVuIGJlIGludmFsaWQsXG5cdFx0XHQvLyBidXQgdGhhdCdzIG5vdCBvdXIgcHJvYmxlbS5cblx0XHRcdHZhciBwcmVmaXggPSAkd2luZG93LmxvY2F0aW9uLmhhc2hcblx0XHRcdGlmIChyb3V0ZS5wcmVmaXhbMF0gIT09IFwiI1wiKSB7XG5cdFx0XHRcdHByZWZpeCA9ICR3aW5kb3cubG9jYXRpb24uc2VhcmNoICsgcHJlZml4XG5cdFx0XHRcdGlmIChyb3V0ZS5wcmVmaXhbMF0gIT09IFwiP1wiKSB7XG5cdFx0XHRcdFx0cHJlZml4ID0gJHdpbmRvdy5sb2NhdGlvbi5wYXRobmFtZSArIHByZWZpeFxuXHRcdFx0XHRcdGlmIChwcmVmaXhbMF0gIT09IFwiL1wiKSBwcmVmaXggPSBcIi9cIiArIHByZWZpeFxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHQvLyBUaGlzIHNlZW1pbmdseSB1c2VsZXNzIGAuY29uY2F0KClgIHNwZWVkcyB1cCB0aGUgdGVzdHMgcXVpdGUgYSBiaXQsXG5cdFx0XHQvLyBzaW5jZSB0aGUgcmVwcmVzZW50YXRpb24gaXMgY29uc2lzdGVudGx5IGEgcmVsYXRpdmVseSBwb29ybHlcblx0XHRcdC8vIG9wdGltaXplZCBjb25zIHN0cmluZy5cblx0XHRcdHZhciBwYXRoID0gcHJlZml4LmNvbmNhdCgpXG5cdFx0XHRcdC5yZXBsYWNlKC8oPzolW2EtZjg5XVthLWYwLTldKSsvZ2ltLCBkZWNvZGVVUklDb21wb25lbnQpXG5cdFx0XHRcdC5zbGljZShyb3V0ZS5wcmVmaXgubGVuZ3RoKVxuXHRcdFx0dmFyIGRhdGEgPSBwYXJzZVBhdGhuYW1lKHBhdGgpXG5cblx0XHRcdGFzc2lnbihkYXRhLnBhcmFtcywgJHdpbmRvdy5oaXN0b3J5LnN0YXRlKVxuXG5cdFx0XHRmdW5jdGlvbiBmYWlsKCkge1xuXHRcdFx0XHRpZiAocGF0aCA9PT0gZGVmYXVsdFJvdXRlKSB0aHJvdyBuZXcgRXJyb3IoXCJDb3VsZCBub3QgcmVzb2x2ZSBkZWZhdWx0IHJvdXRlIFwiICsgZGVmYXVsdFJvdXRlKVxuXHRcdFx0XHRzZXRQYXRoKGRlZmF1bHRSb3V0ZSwgbnVsbCwge3JlcGxhY2U6IHRydWV9KVxuXHRcdFx0fVxuXG5cdFx0XHRsb29wKDApXG5cdFx0XHRmdW5jdGlvbiBsb29wKGkpIHtcblx0XHRcdFx0Ly8gMCA9IGluaXRcblx0XHRcdFx0Ly8gMSA9IHNjaGVkdWxlZFxuXHRcdFx0XHQvLyAyID0gZG9uZVxuXHRcdFx0XHRmb3IgKDsgaSA8IGNvbXBpbGVkLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHRcdFx0aWYgKGNvbXBpbGVkW2ldLmNoZWNrKGRhdGEpKSB7XG5cdFx0XHRcdFx0XHR2YXIgcGF5bG9hZCA9IGNvbXBpbGVkW2ldLmNvbXBvbmVudFxuXHRcdFx0XHRcdFx0dmFyIG1hdGNoZWRSb3V0ZSA9IGNvbXBpbGVkW2ldLnJvdXRlXG5cdFx0XHRcdFx0XHR2YXIgbG9jYWxDb21wID0gcGF5bG9hZFxuXHRcdFx0XHRcdFx0dmFyIHVwZGF0ZSA9IGxhc3RVcGRhdGUgPSBmdW5jdGlvbihjb21wKSB7XG5cdFx0XHRcdFx0XHRcdGlmICh1cGRhdGUgIT09IGxhc3RVcGRhdGUpIHJldHVyblxuXHRcdFx0XHRcdFx0XHRpZiAoY29tcCA9PT0gU0tJUCkgcmV0dXJuIGxvb3AoaSArIDEpXG5cdFx0XHRcdFx0XHRcdGNvbXBvbmVudCA9IGNvbXAgIT0gbnVsbCAmJiAodHlwZW9mIGNvbXAudmlldyA9PT0gXCJmdW5jdGlvblwiIHx8IHR5cGVvZiBjb21wID09PSBcImZ1bmN0aW9uXCIpPyBjb21wIDogXCJkaXZcIlxuXHRcdFx0XHRcdFx0XHRhdHRycyA9IGRhdGEucGFyYW1zLCBjdXJyZW50UGF0aCA9IHBhdGgsIGxhc3RVcGRhdGUgPSBudWxsXG5cdFx0XHRcdFx0XHRcdGN1cnJlbnRSZXNvbHZlciA9IHBheWxvYWQucmVuZGVyID8gcGF5bG9hZCA6IG51bGxcblx0XHRcdFx0XHRcdFx0aWYgKHN0YXRlID09PSAyKSBtb3VudFJlZHJhdy5yZWRyYXcoKVxuXHRcdFx0XHRcdFx0XHRlbHNlIHtcblx0XHRcdFx0XHRcdFx0XHRzdGF0ZSA9IDJcblx0XHRcdFx0XHRcdFx0XHRtb3VudFJlZHJhdy5yZWRyYXcuc3luYygpXG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdC8vIFRoZXJlJ3Mgbm8gdW5kZXJzdGF0aW5nIGhvdyBtdWNoIEkgKndpc2gqIEkgY291bGRcblx0XHRcdFx0XHRcdC8vIHVzZSBgYXN5bmNgL2Bhd2FpdGAgaGVyZS4uLlxuXHRcdFx0XHRcdFx0aWYgKHBheWxvYWQudmlldyB8fCB0eXBlb2YgcGF5bG9hZCA9PT0gXCJmdW5jdGlvblwiKSB7XG5cdFx0XHRcdFx0XHRcdHBheWxvYWQgPSB7fVxuXHRcdFx0XHRcdFx0XHR1cGRhdGUobG9jYWxDb21wKVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0ZWxzZSBpZiAocGF5bG9hZC5vbm1hdGNoKSB7XG5cdFx0XHRcdFx0XHRcdHAudGhlbihmdW5jdGlvbiAoKSB7XG5cdFx0XHRcdFx0XHRcdFx0cmV0dXJuIHBheWxvYWQub25tYXRjaChkYXRhLnBhcmFtcywgcGF0aCwgbWF0Y2hlZFJvdXRlKVxuXHRcdFx0XHRcdFx0XHR9KS50aGVuKHVwZGF0ZSwgZmFpbClcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdGVsc2UgdXBkYXRlKFwiZGl2XCIpXG5cdFx0XHRcdFx0XHRyZXR1cm5cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdFx0ZmFpbCgpXG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gU2V0IGl0IHVuY29uZGl0aW9uYWxseSBzbyBgbS5yb3V0ZS5zZXRgIGFuZCBgbS5yb3V0ZS5MaW5rYCBib3RoIHdvcmssXG5cdFx0Ly8gZXZlbiBpZiBuZWl0aGVyIGBwdXNoU3RhdGVgIG5vciBgaGFzaGNoYW5nZWAgYXJlIHN1cHBvcnRlZC4gSXQnc1xuXHRcdC8vIGNsZWFyZWQgaWYgYGhhc2hjaGFuZ2VgIGlzIHVzZWQsIHNpbmNlIHRoYXQgbWFrZXMgaXQgYXV0b21hdGljYWxseVxuXHRcdC8vIGFzeW5jLlxuXHRcdGZpcmVBc3luYyA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0aWYgKCFzY2hlZHVsZWQpIHtcblx0XHRcdFx0c2NoZWR1bGVkID0gdHJ1ZVxuXHRcdFx0XHRjYWxsQXN5bmMocmVzb2x2ZVJvdXRlKVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdGlmICh0eXBlb2YgJHdpbmRvdy5oaXN0b3J5LnB1c2hTdGF0ZSA9PT0gXCJmdW5jdGlvblwiKSB7XG5cdFx0XHRvbnJlbW92ZSA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHQkd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJwb3BzdGF0ZVwiLCBmaXJlQXN5bmMsIGZhbHNlKVxuXHRcdFx0fVxuXHRcdFx0JHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKFwicG9wc3RhdGVcIiwgZmlyZUFzeW5jLCBmYWxzZSlcblx0XHR9IGVsc2UgaWYgKHJvdXRlLnByZWZpeFswXSA9PT0gXCIjXCIpIHtcblx0XHRcdGZpcmVBc3luYyA9IG51bGxcblx0XHRcdG9ucmVtb3ZlID0gZnVuY3Rpb24oKSB7XG5cdFx0XHRcdCR3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcihcImhhc2hjaGFuZ2VcIiwgcmVzb2x2ZVJvdXRlLCBmYWxzZSlcblx0XHRcdH1cblx0XHRcdCR3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihcImhhc2hjaGFuZ2VcIiwgcmVzb2x2ZVJvdXRlLCBmYWxzZSlcblx0XHR9XG5cblx0XHRyZXR1cm4gbW91bnRSZWRyYXcubW91bnQocm9vdCwge1xuXHRcdFx0b25iZWZvcmV1cGRhdGU6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRzdGF0ZSA9IHN0YXRlID8gMiA6IDFcblx0XHRcdFx0cmV0dXJuICEoIXN0YXRlIHx8IHNlbnRpbmVsID09PSBjdXJyZW50UmVzb2x2ZXIpXG5cdFx0XHR9LFxuXHRcdFx0b25jcmVhdGU6IHJlc29sdmVSb3V0ZSxcblx0XHRcdG9ucmVtb3ZlOiBvbnJlbW92ZSxcblx0XHRcdHZpZXc6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRpZiAoIXN0YXRlIHx8IHNlbnRpbmVsID09PSBjdXJyZW50UmVzb2x2ZXIpIHJldHVyblxuXHRcdFx0XHQvLyBXcmFwIGluIGEgZnJhZ21lbnQgdG8gcHJlc2VydmUgZXhpc3Rpbmcga2V5IHNlbWFudGljc1xuXHRcdFx0XHR2YXIgdm5vZGUgPSBbVm5vZGUoY29tcG9uZW50LCBhdHRycy5rZXksIGF0dHJzKV1cblx0XHRcdFx0aWYgKGN1cnJlbnRSZXNvbHZlcikgdm5vZGUgPSBjdXJyZW50UmVzb2x2ZXIucmVuZGVyKHZub2RlWzBdKVxuXHRcdFx0XHRyZXR1cm4gdm5vZGVcblx0XHRcdH0sXG5cdFx0fSlcblx0fVxuXHRyb3V0ZS5zZXQgPSBmdW5jdGlvbihwYXRoLCBkYXRhLCBvcHRpb25zKSB7XG5cdFx0aWYgKGxhc3RVcGRhdGUgIT0gbnVsbCkge1xuXHRcdFx0b3B0aW9ucyA9IG9wdGlvbnMgfHwge31cblx0XHRcdG9wdGlvbnMucmVwbGFjZSA9IHRydWVcblx0XHR9XG5cdFx0bGFzdFVwZGF0ZSA9IG51bGxcblx0XHRzZXRQYXRoKHBhdGgsIGRhdGEsIG9wdGlvbnMpXG5cdH1cblx0cm91dGUuZ2V0ID0gZnVuY3Rpb24oKSB7cmV0dXJuIGN1cnJlbnRQYXRofVxuXHRyb3V0ZS5wcmVmaXggPSBcIiMhXCJcblx0cm91dGUuTGluayA9IHtcblx0XHR2aWV3OiBmdW5jdGlvbih2bm9kZSkge1xuXHRcdFx0dmFyIG9wdGlvbnMgPSB2bm9kZS5hdHRycy5vcHRpb25zXG5cdFx0XHQvLyBSZW1vdmUgdGhlc2Ugc28gdGhleSBkb24ndCBnZXQgb3ZlcndyaXR0ZW5cblx0XHRcdHZhciBhdHRycyA9IHt9LCBvbmNsaWNrLCBocmVmXG5cdFx0XHRhc3NpZ24oYXR0cnMsIHZub2RlLmF0dHJzKVxuXHRcdFx0Ly8gVGhlIGZpcnN0IHR3byBhcmUgaW50ZXJuYWwsIGJ1dCB0aGUgcmVzdCBhcmUgbWFnaWMgYXR0cmlidXRlc1xuXHRcdFx0Ly8gdGhhdCBuZWVkIGNlbnNvcmVkIHRvIG5vdCBzY3JldyB1cCByZW5kZXJpbmcuXG5cdFx0XHRhdHRycy5zZWxlY3RvciA9IGF0dHJzLm9wdGlvbnMgPSBhdHRycy5rZXkgPSBhdHRycy5vbmluaXQgPVxuXHRcdFx0YXR0cnMub25jcmVhdGUgPSBhdHRycy5vbmJlZm9yZXVwZGF0ZSA9IGF0dHJzLm9udXBkYXRlID1cblx0XHRcdGF0dHJzLm9uYmVmb3JlcmVtb3ZlID0gYXR0cnMub25yZW1vdmUgPSBudWxsXG5cblx0XHRcdC8vIERvIHRoaXMgbm93IHNvIHdlIGNhbiBnZXQgdGhlIG1vc3QgY3VycmVudCBgaHJlZmAgYW5kIGBkaXNhYmxlZGAuXG5cdFx0XHQvLyBUaG9zZSBhdHRyaWJ1dGVzIG1heSBhbHNvIGJlIHNwZWNpZmllZCBpbiB0aGUgc2VsZWN0b3IsIGFuZCB3ZVxuXHRcdFx0Ly8gc2hvdWxkIGhvbm9yIHRoYXQuXG5cdFx0XHR2YXIgY2hpbGQgPSBtKHZub2RlLmF0dHJzLnNlbGVjdG9yIHx8IFwiYVwiLCBhdHRycywgdm5vZGUuY2hpbGRyZW4pXG5cblx0XHRcdC8vIExldCdzIHByb3ZpZGUgYSAqcmlnaHQqIHdheSB0byBkaXNhYmxlIGEgcm91dGUgbGluaywgcmF0aGVyIHRoYW5cblx0XHRcdC8vIGxldHRpbmcgcGVvcGxlIHNjcmV3IHVwIGFjY2Vzc2liaWxpdHkgb24gYWNjaWRlbnQuXG5cdFx0XHQvL1xuXHRcdFx0Ly8gVGhlIGF0dHJpYnV0ZSBpcyBjb2VyY2VkIHNvIHVzZXJzIGRvbid0IGdldCBzdXJwcmlzZWQgb3ZlclxuXHRcdFx0Ly8gYGRpc2FibGVkOiAwYCByZXN1bHRpbmcgaW4gYSBidXR0b24gdGhhdCdzIHNvbWVob3cgcm91dGFibGVcblx0XHRcdC8vIGRlc3BpdGUgYmVpbmcgdmlzaWJseSBkaXNhYmxlZC5cblx0XHRcdGlmIChjaGlsZC5hdHRycy5kaXNhYmxlZCA9IEJvb2xlYW4oY2hpbGQuYXR0cnMuZGlzYWJsZWQpKSB7XG5cdFx0XHRcdGNoaWxkLmF0dHJzLmhyZWYgPSBudWxsXG5cdFx0XHRcdGNoaWxkLmF0dHJzW1wiYXJpYS1kaXNhYmxlZFwiXSA9IFwidHJ1ZVwiXG5cdFx0XHRcdC8vIElmIHlvdSAqcmVhbGx5KiBkbyB3YW50IHRvIGRvIHRoaXMgb24gYSBkaXNhYmxlZCBsaW5rLCB1c2Vcblx0XHRcdFx0Ly8gYW4gYG9uY3JlYXRlYCBob29rIHRvIGFkZCBpdC5cblx0XHRcdFx0Y2hpbGQuYXR0cnMub25jbGljayA9IG51bGxcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdG9uY2xpY2sgPSBjaGlsZC5hdHRycy5vbmNsaWNrXG5cdFx0XHRcdGhyZWYgPSBjaGlsZC5hdHRycy5ocmVmXG5cdFx0XHRcdGNoaWxkLmF0dHJzLmhyZWYgPSByb3V0ZS5wcmVmaXggKyBocmVmXG5cdFx0XHRcdGNoaWxkLmF0dHJzLm9uY2xpY2sgPSBmdW5jdGlvbihlKSB7XG5cdFx0XHRcdFx0dmFyIHJlc3VsdFxuXHRcdFx0XHRcdGlmICh0eXBlb2Ygb25jbGljayA9PT0gXCJmdW5jdGlvblwiKSB7XG5cdFx0XHRcdFx0XHRyZXN1bHQgPSBvbmNsaWNrLmNhbGwoZS5jdXJyZW50VGFyZ2V0LCBlKVxuXHRcdFx0XHRcdH0gZWxzZSBpZiAob25jbGljayA9PSBudWxsIHx8IHR5cGVvZiBvbmNsaWNrICE9PSBcIm9iamVjdFwiKSB7XG5cdFx0XHRcdFx0XHQvLyBkbyBub3RoaW5nXG5cdFx0XHRcdFx0fSBlbHNlIGlmICh0eXBlb2Ygb25jbGljay5oYW5kbGVFdmVudCA9PT0gXCJmdW5jdGlvblwiKSB7XG5cdFx0XHRcdFx0XHRvbmNsaWNrLmhhbmRsZUV2ZW50KGUpXG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0Ly8gQWRhcHRlZCBmcm9tIFJlYWN0IFJvdXRlcidzIGltcGxlbWVudGF0aW9uOlxuXHRcdFx0XHRcdC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9SZWFjdFRyYWluaW5nL3JlYWN0LXJvdXRlci9ibG9iLzUyMGEwYWNkNDhhZTFiMDY2ZWIwYjA3ZDZkNGQxNzkwYTFkMDI0ODIvcGFja2FnZXMvcmVhY3Qtcm91dGVyLWRvbS9tb2R1bGVzL0xpbmsuanNcblx0XHRcdFx0XHQvL1xuXHRcdFx0XHRcdC8vIFRyeSB0byBiZSBmbGV4aWJsZSBhbmQgaW50dWl0aXZlIGluIGhvdyB3ZSBoYW5kbGUgbGlua3MuXG5cdFx0XHRcdFx0Ly8gRnVuIGZhY3Q6IGxpbmtzIGFyZW4ndCBhcyBvYnZpb3VzIHRvIGdldCByaWdodCBhcyB5b3Vcblx0XHRcdFx0XHQvLyB3b3VsZCBleHBlY3QuIFRoZXJlJ3MgYSBsb3QgbW9yZSB2YWxpZCB3YXlzIHRvIGNsaWNrIGFcblx0XHRcdFx0XHQvLyBsaW5rIHRoYW4gdGhpcywgYW5kIG9uZSBtaWdodCB3YW50IHRvIG5vdCBzaW1wbHkgY2xpY2sgYVxuXHRcdFx0XHRcdC8vIGxpbmssIGJ1dCByaWdodCBjbGljayBvciBjb21tYW5kLWNsaWNrIGl0IHRvIGNvcHkgdGhlXG5cdFx0XHRcdFx0Ly8gbGluayB0YXJnZXQsIGV0Yy4gTm9wZSwgdGhpcyBpc24ndCBqdXN0IGZvciBibGluZCBwZW9wbGUuXG5cdFx0XHRcdFx0aWYgKFxuXHRcdFx0XHRcdFx0Ly8gU2tpcCBpZiBgb25jbGlja2AgcHJldmVudGVkIGRlZmF1bHRcblx0XHRcdFx0XHRcdHJlc3VsdCAhPT0gZmFsc2UgJiYgIWUuZGVmYXVsdFByZXZlbnRlZCAmJlxuXHRcdFx0XHRcdFx0Ly8gSWdub3JlIGV2ZXJ5dGhpbmcgYnV0IGxlZnQgY2xpY2tzXG5cdFx0XHRcdFx0XHQoZS5idXR0b24gPT09IDAgfHwgZS53aGljaCA9PT0gMCB8fCBlLndoaWNoID09PSAxKSAmJlxuXHRcdFx0XHRcdFx0Ly8gTGV0IHRoZSBicm93c2VyIGhhbmRsZSBgdGFyZ2V0PV9ibGFua2AsIGV0Yy5cblx0XHRcdFx0XHRcdCghZS5jdXJyZW50VGFyZ2V0LnRhcmdldCB8fCBlLmN1cnJlbnRUYXJnZXQudGFyZ2V0ID09PSBcIl9zZWxmXCIpICYmXG5cdFx0XHRcdFx0XHQvLyBObyBtb2RpZmllciBrZXlzXG5cdFx0XHRcdFx0XHQhZS5jdHJsS2V5ICYmICFlLm1ldGFLZXkgJiYgIWUuc2hpZnRLZXkgJiYgIWUuYWx0S2V5XG5cdFx0XHRcdFx0KSB7XG5cdFx0XHRcdFx0XHRlLnByZXZlbnREZWZhdWx0KClcblx0XHRcdFx0XHRcdGUucmVkcmF3ID0gZmFsc2Vcblx0XHRcdFx0XHRcdHJvdXRlLnNldChocmVmLCBudWxsLCBvcHRpb25zKVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIGNoaWxkXG5cdFx0fSxcblx0fVxuXHRyb3V0ZS5wYXJhbSA9IGZ1bmN0aW9uKGtleSkge1xuXHRcdHJldHVybiBhdHRycyAmJiBrZXkgIT0gbnVsbCA/IGF0dHJzW2tleV0gOiBhdHRyc1xuXHR9XG5cblx0cmV0dXJuIHJvdXRlXG59XG4iLCJcInVzZSBzdHJpY3RcIlxuXG52YXIgaHlwZXJzY3JpcHQgPSByZXF1aXJlKFwiLi9yZW5kZXIvaHlwZXJzY3JpcHRcIilcblxuaHlwZXJzY3JpcHQudHJ1c3QgPSByZXF1aXJlKFwiLi9yZW5kZXIvdHJ1c3RcIilcbmh5cGVyc2NyaXB0LmZyYWdtZW50ID0gcmVxdWlyZShcIi4vcmVuZGVyL2ZyYWdtZW50XCIpXG5cbm1vZHVsZS5leHBvcnRzID0gaHlwZXJzY3JpcHRcbiIsIlwidXNlIHN0cmljdFwiXG5cbnZhciBoeXBlcnNjcmlwdCA9IHJlcXVpcmUoXCIuL2h5cGVyc2NyaXB0XCIpXG52YXIgcmVxdWVzdCA9IHJlcXVpcmUoXCIuL3JlcXVlc3RcIilcbnZhciBtb3VudFJlZHJhdyA9IHJlcXVpcmUoXCIuL21vdW50LXJlZHJhd1wiKVxuXG52YXIgbSA9IGZ1bmN0aW9uIG0oKSB7IHJldHVybiBoeXBlcnNjcmlwdC5hcHBseSh0aGlzLCBhcmd1bWVudHMpIH1cbm0ubSA9IGh5cGVyc2NyaXB0XG5tLnRydXN0ID0gaHlwZXJzY3JpcHQudHJ1c3Rcbm0uZnJhZ21lbnQgPSBoeXBlcnNjcmlwdC5mcmFnbWVudFxubS5tb3VudCA9IG1vdW50UmVkcmF3Lm1vdW50XG5tLnJvdXRlID0gcmVxdWlyZShcIi4vcm91dGVcIilcbm0ucmVuZGVyID0gcmVxdWlyZShcIi4vcmVuZGVyXCIpXG5tLnJlZHJhdyA9IG1vdW50UmVkcmF3LnJlZHJhd1xubS5yZXF1ZXN0ID0gcmVxdWVzdC5yZXF1ZXN0XG5tLmpzb25wID0gcmVxdWVzdC5qc29ucFxubS5wYXJzZVF1ZXJ5U3RyaW5nID0gcmVxdWlyZShcIi4vcXVlcnlzdHJpbmcvcGFyc2VcIilcbm0uYnVpbGRRdWVyeVN0cmluZyA9IHJlcXVpcmUoXCIuL3F1ZXJ5c3RyaW5nL2J1aWxkXCIpXG5tLnBhcnNlUGF0aG5hbWUgPSByZXF1aXJlKFwiLi9wYXRobmFtZS9wYXJzZVwiKVxubS5idWlsZFBhdGhuYW1lID0gcmVxdWlyZShcIi4vcGF0aG5hbWUvYnVpbGRcIilcbm0udm5vZGUgPSByZXF1aXJlKFwiLi9yZW5kZXIvdm5vZGVcIilcbm0uUHJvbWlzZVBvbHlmaWxsID0gcmVxdWlyZShcIi4vcHJvbWlzZS9wb2x5ZmlsbFwiKVxuXG5tb2R1bGUuZXhwb3J0cyA9IG1cbiIsIlwidXNlIHN0cmljdFwiXG5cbnZhciByZW5kZXIgPSByZXF1aXJlKFwiLi9yZW5kZXJcIilcblxubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwiLi9hcGkvbW91bnQtcmVkcmF3XCIpKHJlbmRlciwgcmVxdWVzdEFuaW1hdGlvbkZyYW1lLCBjb25zb2xlKVxuIiwiXCJ1c2Ugc3RyaWN0XCJcblxubW9kdWxlLmV4cG9ydHMgPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uKHRhcmdldCwgc291cmNlKSB7XG5cdGlmKHNvdXJjZSkgT2JqZWN0LmtleXMoc291cmNlKS5mb3JFYWNoKGZ1bmN0aW9uKGtleSkgeyB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldIH0pXG59XG4iLCJcInVzZSBzdHJpY3RcIlxuXG52YXIgYnVpbGRRdWVyeVN0cmluZyA9IHJlcXVpcmUoXCIuLi9xdWVyeXN0cmluZy9idWlsZFwiKVxudmFyIGFzc2lnbiA9IHJlcXVpcmUoXCIuL2Fzc2lnblwiKVxuXG4vLyBSZXR1cm5zIGBwYXRoYCBmcm9tIGB0ZW1wbGF0ZWAgKyBgcGFyYW1zYFxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbih0ZW1wbGF0ZSwgcGFyYW1zKSB7XG5cdGlmICgoLzooW15cXC9cXC4tXSspKFxcLnszfSk/Oi8pLnRlc3QodGVtcGxhdGUpKSB7XG5cdFx0dGhyb3cgbmV3IFN5bnRheEVycm9yKFwiVGVtcGxhdGUgcGFyYW1ldGVyIG5hbWVzICptdXN0KiBiZSBzZXBhcmF0ZWRcIilcblx0fVxuXHRpZiAocGFyYW1zID09IG51bGwpIHJldHVybiB0ZW1wbGF0ZVxuXHR2YXIgcXVlcnlJbmRleCA9IHRlbXBsYXRlLmluZGV4T2YoXCI/XCIpXG5cdHZhciBoYXNoSW5kZXggPSB0ZW1wbGF0ZS5pbmRleE9mKFwiI1wiKVxuXHR2YXIgcXVlcnlFbmQgPSBoYXNoSW5kZXggPCAwID8gdGVtcGxhdGUubGVuZ3RoIDogaGFzaEluZGV4XG5cdHZhciBwYXRoRW5kID0gcXVlcnlJbmRleCA8IDAgPyBxdWVyeUVuZCA6IHF1ZXJ5SW5kZXhcblx0dmFyIHBhdGggPSB0ZW1wbGF0ZS5zbGljZSgwLCBwYXRoRW5kKVxuXHR2YXIgcXVlcnkgPSB7fVxuXG5cdGFzc2lnbihxdWVyeSwgcGFyYW1zKVxuXG5cdHZhciByZXNvbHZlZCA9IHBhdGgucmVwbGFjZSgvOihbXlxcL1xcLi1dKykoXFwuezN9KT8vZywgZnVuY3Rpb24obSwga2V5LCB2YXJpYWRpYykge1xuXHRcdGRlbGV0ZSBxdWVyeVtrZXldXG5cdFx0Ly8gSWYgbm8gc3VjaCBwYXJhbWV0ZXIgZXhpc3RzLCBkb24ndCBpbnRlcnBvbGF0ZSBpdC5cblx0XHRpZiAocGFyYW1zW2tleV0gPT0gbnVsbCkgcmV0dXJuIG1cblx0XHQvLyBFc2NhcGUgbm9ybWFsIHBhcmFtZXRlcnMsIGJ1dCBub3QgdmFyaWFkaWMgb25lcy5cblx0XHRyZXR1cm4gdmFyaWFkaWMgPyBwYXJhbXNba2V5XSA6IGVuY29kZVVSSUNvbXBvbmVudChTdHJpbmcocGFyYW1zW2tleV0pKVxuXHR9KVxuXG5cdC8vIEluIGNhc2UgdGhlIHRlbXBsYXRlIHN1YnN0aXR1dGlvbiBhZGRzIG5ldyBxdWVyeS9oYXNoIHBhcmFtZXRlcnMuXG5cdHZhciBuZXdRdWVyeUluZGV4ID0gcmVzb2x2ZWQuaW5kZXhPZihcIj9cIilcblx0dmFyIG5ld0hhc2hJbmRleCA9IHJlc29sdmVkLmluZGV4T2YoXCIjXCIpXG5cdHZhciBuZXdRdWVyeUVuZCA9IG5ld0hhc2hJbmRleCA8IDAgPyByZXNvbHZlZC5sZW5ndGggOiBuZXdIYXNoSW5kZXhcblx0dmFyIG5ld1BhdGhFbmQgPSBuZXdRdWVyeUluZGV4IDwgMCA/IG5ld1F1ZXJ5RW5kIDogbmV3UXVlcnlJbmRleFxuXHR2YXIgcmVzdWx0ID0gcmVzb2x2ZWQuc2xpY2UoMCwgbmV3UGF0aEVuZClcblxuXHRpZiAocXVlcnlJbmRleCA+PSAwKSByZXN1bHQgKz0gdGVtcGxhdGUuc2xpY2UocXVlcnlJbmRleCwgcXVlcnlFbmQpXG5cdGlmIChuZXdRdWVyeUluZGV4ID49IDApIHJlc3VsdCArPSAocXVlcnlJbmRleCA8IDAgPyBcIj9cIiA6IFwiJlwiKSArIHJlc29sdmVkLnNsaWNlKG5ld1F1ZXJ5SW5kZXgsIG5ld1F1ZXJ5RW5kKVxuXHR2YXIgcXVlcnlzdHJpbmcgPSBidWlsZFF1ZXJ5U3RyaW5nKHF1ZXJ5KVxuXHRpZiAocXVlcnlzdHJpbmcpIHJlc3VsdCArPSAocXVlcnlJbmRleCA8IDAgJiYgbmV3UXVlcnlJbmRleCA8IDAgPyBcIj9cIiA6IFwiJlwiKSArIHF1ZXJ5c3RyaW5nXG5cdGlmIChoYXNoSW5kZXggPj0gMCkgcmVzdWx0ICs9IHRlbXBsYXRlLnNsaWNlKGhhc2hJbmRleClcblx0aWYgKG5ld0hhc2hJbmRleCA+PSAwKSByZXN1bHQgKz0gKGhhc2hJbmRleCA8IDAgPyBcIlwiIDogXCImXCIpICsgcmVzb2x2ZWQuc2xpY2UobmV3SGFzaEluZGV4KVxuXHRyZXR1cm4gcmVzdWx0XG59XG4iLCJcInVzZSBzdHJpY3RcIlxuXG52YXIgcGFyc2VQYXRobmFtZSA9IHJlcXVpcmUoXCIuL3BhcnNlXCIpXG5cbi8vIENvbXBpbGVzIGEgdGVtcGxhdGUgaW50byBhIGZ1bmN0aW9uIHRoYXQgdGFrZXMgYSByZXNvbHZlZCBwYXRoICh3aXRob3V0IHF1ZXJ5XG4vLyBzdHJpbmdzKSBhbmQgcmV0dXJucyBhbiBvYmplY3QgY29udGFpbmluZyB0aGUgdGVtcGxhdGUgcGFyYW1ldGVycyB3aXRoIHRoZWlyXG4vLyBwYXJzZWQgdmFsdWVzLiBUaGlzIGV4cGVjdHMgdGhlIGlucHV0IG9mIHRoZSBjb21waWxlZCB0ZW1wbGF0ZSB0byBiZSB0aGVcbi8vIG91dHB1dCBvZiBgcGFyc2VQYXRobmFtZWAuIE5vdGUgdGhhdCBpdCBkb2VzICpub3QqIHJlbW92ZSBxdWVyeSBwYXJhbWV0ZXJzXG4vLyBzcGVjaWZpZWQgaW4gdGhlIHRlbXBsYXRlLlxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbih0ZW1wbGF0ZSkge1xuXHR2YXIgdGVtcGxhdGVEYXRhID0gcGFyc2VQYXRobmFtZSh0ZW1wbGF0ZSlcblx0dmFyIHRlbXBsYXRlS2V5cyA9IE9iamVjdC5rZXlzKHRlbXBsYXRlRGF0YS5wYXJhbXMpXG5cdHZhciBrZXlzID0gW11cblx0dmFyIHJlZ2V4cCA9IG5ldyBSZWdFeHAoXCJeXCIgKyB0ZW1wbGF0ZURhdGEucGF0aC5yZXBsYWNlKFxuXHRcdC8vIEkgZXNjYXBlIGxpdGVyYWwgdGV4dCBzbyBwZW9wbGUgY2FuIHVzZSB0aGluZ3MgbGlrZSBgOmZpbGUuOmV4dGAgb3Jcblx0XHQvLyBgOmxhbmctOmxvY2FsZWAgaW4gcm91dGVzLiBUaGlzIGlzIGFsbCBtZXJnZWQgaW50byBvbmUgcGFzcyBzbyBJXG5cdFx0Ly8gZG9uJ3QgYWxzbyBhY2NpZGVudGFsbHkgZXNjYXBlIGAtYCBhbmQgbWFrZSBpdCBoYXJkZXIgdG8gZGV0ZWN0IGl0IHRvXG5cdFx0Ly8gYmFuIGl0IGZyb20gdGVtcGxhdGUgcGFyYW1ldGVycy5cblx0XHQvOihbXlxcLy4tXSspKFxcLnszfXxcXC4oPyFcXC4pfC0pP3xbXFxcXF4kKisuKCl8XFxbXFxde31dL2csXG5cdFx0ZnVuY3Rpb24obSwga2V5LCBleHRyYSkge1xuXHRcdFx0aWYgKGtleSA9PSBudWxsKSByZXR1cm4gXCJcXFxcXCIgKyBtXG5cdFx0XHRrZXlzLnB1c2goe2s6IGtleSwgcjogZXh0cmEgPT09IFwiLi4uXCJ9KVxuXHRcdFx0aWYgKGV4dHJhID09PSBcIi4uLlwiKSByZXR1cm4gXCIoLiopXCJcblx0XHRcdGlmIChleHRyYSA9PT0gXCIuXCIpIHJldHVybiBcIihbXi9dKylcXFxcLlwiXG5cdFx0XHRyZXR1cm4gXCIoW14vXSspXCIgKyAoZXh0cmEgfHwgXCJcIilcblx0XHR9XG5cdCkgKyBcIiRcIilcblx0cmV0dXJuIGZ1bmN0aW9uKGRhdGEpIHtcblx0XHQvLyBGaXJzdCwgY2hlY2sgdGhlIHBhcmFtcy4gVXN1YWxseSwgdGhlcmUgaXNuJ3QgYW55LCBhbmQgaXQncyBqdXN0XG5cdFx0Ly8gY2hlY2tpbmcgYSBzdGF0aWMgc2V0LlxuXHRcdGZvciAodmFyIGkgPSAwOyBpIDwgdGVtcGxhdGVLZXlzLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHRpZiAodGVtcGxhdGVEYXRhLnBhcmFtc1t0ZW1wbGF0ZUtleXNbaV1dICE9PSBkYXRhLnBhcmFtc1t0ZW1wbGF0ZUtleXNbaV1dKSByZXR1cm4gZmFsc2Vcblx0XHR9XG5cdFx0Ly8gSWYgbm8gaW50ZXJwb2xhdGlvbnMgZXhpc3QsIGxldCdzIHNraXAgYWxsIHRoZSBjZXJlbW9ueVxuXHRcdGlmICgha2V5cy5sZW5ndGgpIHJldHVybiByZWdleHAudGVzdChkYXRhLnBhdGgpXG5cdFx0dmFyIHZhbHVlcyA9IHJlZ2V4cC5leGVjKGRhdGEucGF0aClcblx0XHRpZiAodmFsdWVzID09IG51bGwpIHJldHVybiBmYWxzZVxuXHRcdGZvciAodmFyIGkgPSAwOyBpIDwga2V5cy5sZW5ndGg7IGkrKykge1xuXHRcdFx0ZGF0YS5wYXJhbXNba2V5c1tpXS5rXSA9IGtleXNbaV0uciA/IHZhbHVlc1tpICsgMV0gOiBkZWNvZGVVUklDb21wb25lbnQodmFsdWVzW2kgKyAxXSlcblx0XHR9XG5cdFx0cmV0dXJuIHRydWVcblx0fVxufVxuIiwiXCJ1c2Ugc3RyaWN0XCJcblxudmFyIHBhcnNlUXVlcnlTdHJpbmcgPSByZXF1aXJlKFwiLi4vcXVlcnlzdHJpbmcvcGFyc2VcIilcblxuLy8gUmV0dXJucyBge3BhdGgsIHBhcmFtc31gIGZyb20gYHVybGBcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24odXJsKSB7XG5cdHZhciBxdWVyeUluZGV4ID0gdXJsLmluZGV4T2YoXCI/XCIpXG5cdHZhciBoYXNoSW5kZXggPSB1cmwuaW5kZXhPZihcIiNcIilcblx0dmFyIHF1ZXJ5RW5kID0gaGFzaEluZGV4IDwgMCA/IHVybC5sZW5ndGggOiBoYXNoSW5kZXhcblx0dmFyIHBhdGhFbmQgPSBxdWVyeUluZGV4IDwgMCA/IHF1ZXJ5RW5kIDogcXVlcnlJbmRleFxuXHR2YXIgcGF0aCA9IHVybC5zbGljZSgwLCBwYXRoRW5kKS5yZXBsYWNlKC9cXC97Mix9L2csIFwiL1wiKVxuXG5cdGlmICghcGF0aCkgcGF0aCA9IFwiL1wiXG5cdGVsc2Uge1xuXHRcdGlmIChwYXRoWzBdICE9PSBcIi9cIikgcGF0aCA9IFwiL1wiICsgcGF0aFxuXHRcdGlmIChwYXRoLmxlbmd0aCA+IDEgJiYgcGF0aFtwYXRoLmxlbmd0aCAtIDFdID09PSBcIi9cIikgcGF0aCA9IHBhdGguc2xpY2UoMCwgLTEpXG5cdH1cblx0cmV0dXJuIHtcblx0XHRwYXRoOiBwYXRoLFxuXHRcdHBhcmFtczogcXVlcnlJbmRleCA8IDBcblx0XHRcdD8ge31cblx0XHRcdDogcGFyc2VRdWVyeVN0cmluZyh1cmwuc2xpY2UocXVlcnlJbmRleCArIDEsIHF1ZXJ5RW5kKSksXG5cdH1cbn1cbiIsIlwidXNlIHN0cmljdFwiXG4vKiogQGNvbnN0cnVjdG9yICovXG52YXIgUHJvbWlzZVBvbHlmaWxsID0gZnVuY3Rpb24oZXhlY3V0b3IpIHtcblx0aWYgKCEodGhpcyBpbnN0YW5jZW9mIFByb21pc2VQb2x5ZmlsbCkpIHRocm93IG5ldyBFcnJvcihcIlByb21pc2UgbXVzdCBiZSBjYWxsZWQgd2l0aCBgbmV3YFwiKVxuXHRpZiAodHlwZW9mIGV4ZWN1dG9yICE9PSBcImZ1bmN0aW9uXCIpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJleGVjdXRvciBtdXN0IGJlIGEgZnVuY3Rpb25cIilcblxuXHR2YXIgc2VsZiA9IHRoaXMsIHJlc29sdmVycyA9IFtdLCByZWplY3RvcnMgPSBbXSwgcmVzb2x2ZUN1cnJlbnQgPSBoYW5kbGVyKHJlc29sdmVycywgdHJ1ZSksIHJlamVjdEN1cnJlbnQgPSBoYW5kbGVyKHJlamVjdG9ycywgZmFsc2UpXG5cdHZhciBpbnN0YW5jZSA9IHNlbGYuX2luc3RhbmNlID0ge3Jlc29sdmVyczogcmVzb2x2ZXJzLCByZWplY3RvcnM6IHJlamVjdG9yc31cblx0dmFyIGNhbGxBc3luYyA9IHR5cGVvZiBzZXRJbW1lZGlhdGUgPT09IFwiZnVuY3Rpb25cIiA/IHNldEltbWVkaWF0ZSA6IHNldFRpbWVvdXRcblx0ZnVuY3Rpb24gaGFuZGxlcihsaXN0LCBzaG91bGRBYnNvcmIpIHtcblx0XHRyZXR1cm4gZnVuY3Rpb24gZXhlY3V0ZSh2YWx1ZSkge1xuXHRcdFx0dmFyIHRoZW5cblx0XHRcdHRyeSB7XG5cdFx0XHRcdGlmIChzaG91bGRBYnNvcmIgJiYgdmFsdWUgIT0gbnVsbCAmJiAodHlwZW9mIHZhbHVlID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiB2YWx1ZSA9PT0gXCJmdW5jdGlvblwiKSAmJiB0eXBlb2YgKHRoZW4gPSB2YWx1ZS50aGVuKSA9PT0gXCJmdW5jdGlvblwiKSB7XG5cdFx0XHRcdFx0aWYgKHZhbHVlID09PSBzZWxmKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiUHJvbWlzZSBjYW4ndCBiZSByZXNvbHZlZCB3LyBpdHNlbGZcIilcblx0XHRcdFx0XHRleGVjdXRlT25jZSh0aGVuLmJpbmQodmFsdWUpKVxuXHRcdFx0XHR9XG5cdFx0XHRcdGVsc2Uge1xuXHRcdFx0XHRcdGNhbGxBc3luYyhmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRcdGlmICghc2hvdWxkQWJzb3JiICYmIGxpc3QubGVuZ3RoID09PSAwKSBjb25zb2xlLmVycm9yKFwiUG9zc2libGUgdW5oYW5kbGVkIHByb21pc2UgcmVqZWN0aW9uOlwiLCB2YWx1ZSlcblx0XHRcdFx0XHRcdGZvciAodmFyIGkgPSAwOyBpIDwgbGlzdC5sZW5ndGg7IGkrKykgbGlzdFtpXSh2YWx1ZSlcblx0XHRcdFx0XHRcdHJlc29sdmVycy5sZW5ndGggPSAwLCByZWplY3RvcnMubGVuZ3RoID0gMFxuXHRcdFx0XHRcdFx0aW5zdGFuY2Uuc3RhdGUgPSBzaG91bGRBYnNvcmJcblx0XHRcdFx0XHRcdGluc3RhbmNlLnJldHJ5ID0gZnVuY3Rpb24oKSB7ZXhlY3V0ZSh2YWx1ZSl9XG5cdFx0XHRcdFx0fSlcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0Y2F0Y2ggKGUpIHtcblx0XHRcdFx0cmVqZWN0Q3VycmVudChlKVxuXHRcdFx0fVxuXHRcdH1cblx0fVxuXHRmdW5jdGlvbiBleGVjdXRlT25jZSh0aGVuKSB7XG5cdFx0dmFyIHJ1bnMgPSAwXG5cdFx0ZnVuY3Rpb24gcnVuKGZuKSB7XG5cdFx0XHRyZXR1cm4gZnVuY3Rpb24odmFsdWUpIHtcblx0XHRcdFx0aWYgKHJ1bnMrKyA+IDApIHJldHVyblxuXHRcdFx0XHRmbih2YWx1ZSlcblx0XHRcdH1cblx0XHR9XG5cdFx0dmFyIG9uZXJyb3IgPSBydW4ocmVqZWN0Q3VycmVudClcblx0XHR0cnkge3RoZW4ocnVuKHJlc29sdmVDdXJyZW50KSwgb25lcnJvcil9IGNhdGNoIChlKSB7b25lcnJvcihlKX1cblx0fVxuXG5cdGV4ZWN1dGVPbmNlKGV4ZWN1dG9yKVxufVxuUHJvbWlzZVBvbHlmaWxsLnByb3RvdHlwZS50aGVuID0gZnVuY3Rpb24ob25GdWxmaWxsZWQsIG9uUmVqZWN0aW9uKSB7XG5cdHZhciBzZWxmID0gdGhpcywgaW5zdGFuY2UgPSBzZWxmLl9pbnN0YW5jZVxuXHRmdW5jdGlvbiBoYW5kbGUoY2FsbGJhY2ssIGxpc3QsIG5leHQsIHN0YXRlKSB7XG5cdFx0bGlzdC5wdXNoKGZ1bmN0aW9uKHZhbHVlKSB7XG5cdFx0XHRpZiAodHlwZW9mIGNhbGxiYWNrICE9PSBcImZ1bmN0aW9uXCIpIG5leHQodmFsdWUpXG5cdFx0XHRlbHNlIHRyeSB7cmVzb2x2ZU5leHQoY2FsbGJhY2sodmFsdWUpKX0gY2F0Y2ggKGUpIHtpZiAocmVqZWN0TmV4dCkgcmVqZWN0TmV4dChlKX1cblx0XHR9KVxuXHRcdGlmICh0eXBlb2YgaW5zdGFuY2UucmV0cnkgPT09IFwiZnVuY3Rpb25cIiAmJiBzdGF0ZSA9PT0gaW5zdGFuY2Uuc3RhdGUpIGluc3RhbmNlLnJldHJ5KClcblx0fVxuXHR2YXIgcmVzb2x2ZU5leHQsIHJlamVjdE5leHRcblx0dmFyIHByb21pc2UgPSBuZXcgUHJvbWlzZVBvbHlmaWxsKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCkge3Jlc29sdmVOZXh0ID0gcmVzb2x2ZSwgcmVqZWN0TmV4dCA9IHJlamVjdH0pXG5cdGhhbmRsZShvbkZ1bGZpbGxlZCwgaW5zdGFuY2UucmVzb2x2ZXJzLCByZXNvbHZlTmV4dCwgdHJ1ZSksIGhhbmRsZShvblJlamVjdGlvbiwgaW5zdGFuY2UucmVqZWN0b3JzLCByZWplY3ROZXh0LCBmYWxzZSlcblx0cmV0dXJuIHByb21pc2Vcbn1cblByb21pc2VQb2x5ZmlsbC5wcm90b3R5cGUuY2F0Y2ggPSBmdW5jdGlvbihvblJlamVjdGlvbikge1xuXHRyZXR1cm4gdGhpcy50aGVuKG51bGwsIG9uUmVqZWN0aW9uKVxufVxuUHJvbWlzZVBvbHlmaWxsLnByb3RvdHlwZS5maW5hbGx5ID0gZnVuY3Rpb24oY2FsbGJhY2spIHtcblx0cmV0dXJuIHRoaXMudGhlbihcblx0XHRmdW5jdGlvbih2YWx1ZSkge1xuXHRcdFx0cmV0dXJuIFByb21pc2VQb2x5ZmlsbC5yZXNvbHZlKGNhbGxiYWNrKCkpLnRoZW4oZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHJldHVybiB2YWx1ZVxuXHRcdFx0fSlcblx0XHR9LFxuXHRcdGZ1bmN0aW9uKHJlYXNvbikge1xuXHRcdFx0cmV0dXJuIFByb21pc2VQb2x5ZmlsbC5yZXNvbHZlKGNhbGxiYWNrKCkpLnRoZW4oZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHJldHVybiBQcm9taXNlUG9seWZpbGwucmVqZWN0KHJlYXNvbik7XG5cdFx0XHR9KVxuXHRcdH1cblx0KVxufVxuUHJvbWlzZVBvbHlmaWxsLnJlc29sdmUgPSBmdW5jdGlvbih2YWx1ZSkge1xuXHRpZiAodmFsdWUgaW5zdGFuY2VvZiBQcm9taXNlUG9seWZpbGwpIHJldHVybiB2YWx1ZVxuXHRyZXR1cm4gbmV3IFByb21pc2VQb2x5ZmlsbChmdW5jdGlvbihyZXNvbHZlKSB7cmVzb2x2ZSh2YWx1ZSl9KVxufVxuUHJvbWlzZVBvbHlmaWxsLnJlamVjdCA9IGZ1bmN0aW9uKHZhbHVlKSB7XG5cdHJldHVybiBuZXcgUHJvbWlzZVBvbHlmaWxsKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCkge3JlamVjdCh2YWx1ZSl9KVxufVxuUHJvbWlzZVBvbHlmaWxsLmFsbCA9IGZ1bmN0aW9uKGxpc3QpIHtcblx0cmV0dXJuIG5ldyBQcm9taXNlUG9seWZpbGwoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KSB7XG5cdFx0dmFyIHRvdGFsID0gbGlzdC5sZW5ndGgsIGNvdW50ID0gMCwgdmFsdWVzID0gW11cblx0XHRpZiAobGlzdC5sZW5ndGggPT09IDApIHJlc29sdmUoW10pXG5cdFx0ZWxzZSBmb3IgKHZhciBpID0gMDsgaSA8IGxpc3QubGVuZ3RoOyBpKyspIHtcblx0XHRcdChmdW5jdGlvbihpKSB7XG5cdFx0XHRcdGZ1bmN0aW9uIGNvbnN1bWUodmFsdWUpIHtcblx0XHRcdFx0XHRjb3VudCsrXG5cdFx0XHRcdFx0dmFsdWVzW2ldID0gdmFsdWVcblx0XHRcdFx0XHRpZiAoY291bnQgPT09IHRvdGFsKSByZXNvbHZlKHZhbHVlcylcblx0XHRcdFx0fVxuXHRcdFx0XHRpZiAobGlzdFtpXSAhPSBudWxsICYmICh0eXBlb2YgbGlzdFtpXSA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgbGlzdFtpXSA9PT0gXCJmdW5jdGlvblwiKSAmJiB0eXBlb2YgbGlzdFtpXS50aGVuID09PSBcImZ1bmN0aW9uXCIpIHtcblx0XHRcdFx0XHRsaXN0W2ldLnRoZW4oY29uc3VtZSwgcmVqZWN0KVxuXHRcdFx0XHR9XG5cdFx0XHRcdGVsc2UgY29uc3VtZShsaXN0W2ldKVxuXHRcdFx0fSkoaSlcblx0XHR9XG5cdH0pXG59XG5Qcm9taXNlUG9seWZpbGwucmFjZSA9IGZ1bmN0aW9uKGxpc3QpIHtcblx0cmV0dXJuIG5ldyBQcm9taXNlUG9seWZpbGwoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KSB7XG5cdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCBsaXN0Lmxlbmd0aDsgaSsrKSB7XG5cdFx0XHRsaXN0W2ldLnRoZW4ocmVzb2x2ZSwgcmVqZWN0KVxuXHRcdH1cblx0fSlcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBQcm9taXNlUG9seWZpbGxcbiIsIlwidXNlIHN0cmljdFwiXG5cbnZhciBQcm9taXNlUG9seWZpbGwgPSByZXF1aXJlKFwiLi9wb2x5ZmlsbFwiKVxuXG5pZiAodHlwZW9mIHdpbmRvdyAhPT0gXCJ1bmRlZmluZWRcIikge1xuXHRpZiAodHlwZW9mIHdpbmRvdy5Qcm9taXNlID09PSBcInVuZGVmaW5lZFwiKSB7XG5cdFx0d2luZG93LlByb21pc2UgPSBQcm9taXNlUG9seWZpbGxcblx0fSBlbHNlIGlmICghd2luZG93LlByb21pc2UucHJvdG90eXBlLmZpbmFsbHkpIHtcblx0XHR3aW5kb3cuUHJvbWlzZS5wcm90b3R5cGUuZmluYWxseSA9IFByb21pc2VQb2x5ZmlsbC5wcm90b3R5cGUuZmluYWxseVxuXHR9XG5cdG1vZHVsZS5leHBvcnRzID0gd2luZG93LlByb21pc2Vcbn0gZWxzZSBpZiAodHlwZW9mIGdsb2JhbCAhPT0gXCJ1bmRlZmluZWRcIikge1xuXHRpZiAodHlwZW9mIGdsb2JhbC5Qcm9taXNlID09PSBcInVuZGVmaW5lZFwiKSB7XG5cdFx0Z2xvYmFsLlByb21pc2UgPSBQcm9taXNlUG9seWZpbGxcblx0fSBlbHNlIGlmICghZ2xvYmFsLlByb21pc2UucHJvdG90eXBlLmZpbmFsbHkpIHtcblx0XHRnbG9iYWwuUHJvbWlzZS5wcm90b3R5cGUuZmluYWxseSA9IFByb21pc2VQb2x5ZmlsbC5wcm90b3R5cGUuZmluYWxseVxuXHR9XG5cdG1vZHVsZS5leHBvcnRzID0gZ2xvYmFsLlByb21pc2Vcbn0gZWxzZSB7XG5cdG1vZHVsZS5leHBvcnRzID0gUHJvbWlzZVBvbHlmaWxsXG59XG4iLCJcInVzZSBzdHJpY3RcIlxuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKG9iamVjdCkge1xuXHRpZiAoT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKG9iamVjdCkgIT09IFwiW29iamVjdCBPYmplY3RdXCIpIHJldHVybiBcIlwiXG5cblx0dmFyIGFyZ3MgPSBbXVxuXHRmb3IgKHZhciBrZXkgaW4gb2JqZWN0KSB7XG5cdFx0ZGVzdHJ1Y3R1cmUoa2V5LCBvYmplY3Rba2V5XSlcblx0fVxuXG5cdHJldHVybiBhcmdzLmpvaW4oXCImXCIpXG5cblx0ZnVuY3Rpb24gZGVzdHJ1Y3R1cmUoa2V5LCB2YWx1ZSkge1xuXHRcdGlmIChBcnJheS5pc0FycmF5KHZhbHVlKSkge1xuXHRcdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCB2YWx1ZS5sZW5ndGg7IGkrKykge1xuXHRcdFx0XHRkZXN0cnVjdHVyZShrZXkgKyBcIltcIiArIGkgKyBcIl1cIiwgdmFsdWVbaV0pXG5cdFx0XHR9XG5cdFx0fVxuXHRcdGVsc2UgaWYgKE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbCh2YWx1ZSkgPT09IFwiW29iamVjdCBPYmplY3RdXCIpIHtcblx0XHRcdGZvciAodmFyIGkgaW4gdmFsdWUpIHtcblx0XHRcdFx0ZGVzdHJ1Y3R1cmUoa2V5ICsgXCJbXCIgKyBpICsgXCJdXCIsIHZhbHVlW2ldKVxuXHRcdFx0fVxuXHRcdH1cblx0XHRlbHNlIGFyZ3MucHVzaChlbmNvZGVVUklDb21wb25lbnQoa2V5KSArICh2YWx1ZSAhPSBudWxsICYmIHZhbHVlICE9PSBcIlwiID8gXCI9XCIgKyBlbmNvZGVVUklDb21wb25lbnQodmFsdWUpIDogXCJcIikpXG5cdH1cbn1cbiIsIlwidXNlIHN0cmljdFwiXG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oc3RyaW5nKSB7XG5cdGlmIChzdHJpbmcgPT09IFwiXCIgfHwgc3RyaW5nID09IG51bGwpIHJldHVybiB7fVxuXHRpZiAoc3RyaW5nLmNoYXJBdCgwKSA9PT0gXCI/XCIpIHN0cmluZyA9IHN0cmluZy5zbGljZSgxKVxuXG5cdHZhciBlbnRyaWVzID0gc3RyaW5nLnNwbGl0KFwiJlwiKSwgY291bnRlcnMgPSB7fSwgZGF0YSA9IHt9XG5cdGZvciAodmFyIGkgPSAwOyBpIDwgZW50cmllcy5sZW5ndGg7IGkrKykge1xuXHRcdHZhciBlbnRyeSA9IGVudHJpZXNbaV0uc3BsaXQoXCI9XCIpXG5cdFx0dmFyIGtleSA9IGRlY29kZVVSSUNvbXBvbmVudChlbnRyeVswXSlcblx0XHR2YXIgdmFsdWUgPSBlbnRyeS5sZW5ndGggPT09IDIgPyBkZWNvZGVVUklDb21wb25lbnQoZW50cnlbMV0pIDogXCJcIlxuXG5cdFx0aWYgKHZhbHVlID09PSBcInRydWVcIikgdmFsdWUgPSB0cnVlXG5cdFx0ZWxzZSBpZiAodmFsdWUgPT09IFwiZmFsc2VcIikgdmFsdWUgPSBmYWxzZVxuXG5cdFx0dmFyIGxldmVscyA9IGtleS5zcGxpdCgvXFxdXFxbP3xcXFsvKVxuXHRcdHZhciBjdXJzb3IgPSBkYXRhXG5cdFx0aWYgKGtleS5pbmRleE9mKFwiW1wiKSA+IC0xKSBsZXZlbHMucG9wKClcblx0XHRmb3IgKHZhciBqID0gMDsgaiA8IGxldmVscy5sZW5ndGg7IGorKykge1xuXHRcdFx0dmFyIGxldmVsID0gbGV2ZWxzW2pdLCBuZXh0TGV2ZWwgPSBsZXZlbHNbaiArIDFdXG5cdFx0XHR2YXIgaXNOdW1iZXIgPSBuZXh0TGV2ZWwgPT0gXCJcIiB8fCAhaXNOYU4ocGFyc2VJbnQobmV4dExldmVsLCAxMCkpXG5cdFx0XHRpZiAobGV2ZWwgPT09IFwiXCIpIHtcblx0XHRcdFx0dmFyIGtleSA9IGxldmVscy5zbGljZSgwLCBqKS5qb2luKClcblx0XHRcdFx0aWYgKGNvdW50ZXJzW2tleV0gPT0gbnVsbCkge1xuXHRcdFx0XHRcdGNvdW50ZXJzW2tleV0gPSBBcnJheS5pc0FycmF5KGN1cnNvcikgPyBjdXJzb3IubGVuZ3RoIDogMFxuXHRcdFx0XHR9XG5cdFx0XHRcdGxldmVsID0gY291bnRlcnNba2V5XSsrXG5cdFx0XHR9XG5cdFx0XHQvLyBEaXNhbGxvdyBkaXJlY3QgcHJvdG90eXBlIHBvbGx1dGlvblxuXHRcdFx0ZWxzZSBpZiAobGV2ZWwgPT09IFwiX19wcm90b19fXCIpIGJyZWFrXG5cdFx0XHRpZiAoaiA9PT0gbGV2ZWxzLmxlbmd0aCAtIDEpIGN1cnNvcltsZXZlbF0gPSB2YWx1ZVxuXHRcdFx0ZWxzZSB7XG5cdFx0XHRcdC8vIFJlYWQgb3duIHByb3BlcnRpZXMgZXhjbHVzaXZlbHkgdG8gZGlzYWxsb3cgaW5kaXJlY3Rcblx0XHRcdFx0Ly8gcHJvdG90eXBlIHBvbGx1dGlvblxuXHRcdFx0XHR2YXIgZGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoY3Vyc29yLCBsZXZlbClcblx0XHRcdFx0aWYgKGRlc2MgIT0gbnVsbCkgZGVzYyA9IGRlc2MudmFsdWVcblx0XHRcdFx0aWYgKGRlc2MgPT0gbnVsbCkgY3Vyc29yW2xldmVsXSA9IGRlc2MgPSBpc051bWJlciA/IFtdIDoge31cblx0XHRcdFx0Y3Vyc29yID0gZGVzY1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXHRyZXR1cm4gZGF0YVxufVxuIiwiXCJ1c2Ugc3RyaWN0XCJcblxubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwiLi9yZW5kZXIvcmVuZGVyXCIpKHdpbmRvdylcbiIsIlwidXNlIHN0cmljdFwiXG5cbnZhciBWbm9kZSA9IHJlcXVpcmUoXCIuLi9yZW5kZXIvdm5vZGVcIilcbnZhciBoeXBlcnNjcmlwdFZub2RlID0gcmVxdWlyZShcIi4vaHlwZXJzY3JpcHRWbm9kZVwiKVxuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKCkge1xuXHR2YXIgdm5vZGUgPSBoeXBlcnNjcmlwdFZub2RlLmFwcGx5KDAsIGFyZ3VtZW50cylcblxuXHR2bm9kZS50YWcgPSBcIltcIlxuXHR2bm9kZS5jaGlsZHJlbiA9IFZub2RlLm5vcm1hbGl6ZUNoaWxkcmVuKHZub2RlLmNoaWxkcmVuKVxuXHRyZXR1cm4gdm5vZGVcbn1cbiIsIlwidXNlIHN0cmljdFwiXG5cbnZhciBWbm9kZSA9IHJlcXVpcmUoXCIuLi9yZW5kZXIvdm5vZGVcIilcbnZhciBoeXBlcnNjcmlwdFZub2RlID0gcmVxdWlyZShcIi4vaHlwZXJzY3JpcHRWbm9kZVwiKVxuXG52YXIgc2VsZWN0b3JQYXJzZXIgPSAvKD86KF58I3xcXC4pKFteI1xcLlxcW1xcXV0rKSl8KFxcWyguKz8pKD86XFxzKj1cXHMqKFwifCd8KSgoPzpcXFxcW1wiJ1xcXV18LikqPylcXDUpP1xcXSkvZ1xudmFyIHNlbGVjdG9yQ2FjaGUgPSB7fVxudmFyIGhhc093biA9IHt9Lmhhc093blByb3BlcnR5XG5cbmZ1bmN0aW9uIGlzRW1wdHkob2JqZWN0KSB7XG5cdGZvciAodmFyIGtleSBpbiBvYmplY3QpIGlmIChoYXNPd24uY2FsbChvYmplY3QsIGtleSkpIHJldHVybiBmYWxzZVxuXHRyZXR1cm4gdHJ1ZVxufVxuXG5mdW5jdGlvbiBjb21waWxlU2VsZWN0b3Ioc2VsZWN0b3IpIHtcblx0dmFyIG1hdGNoLCB0YWcgPSBcImRpdlwiLCBjbGFzc2VzID0gW10sIGF0dHJzID0ge31cblx0d2hpbGUgKG1hdGNoID0gc2VsZWN0b3JQYXJzZXIuZXhlYyhzZWxlY3RvcikpIHtcblx0XHR2YXIgdHlwZSA9IG1hdGNoWzFdLCB2YWx1ZSA9IG1hdGNoWzJdXG5cdFx0aWYgKHR5cGUgPT09IFwiXCIgJiYgdmFsdWUgIT09IFwiXCIpIHRhZyA9IHZhbHVlXG5cdFx0ZWxzZSBpZiAodHlwZSA9PT0gXCIjXCIpIGF0dHJzLmlkID0gdmFsdWVcblx0XHRlbHNlIGlmICh0eXBlID09PSBcIi5cIikgY2xhc3Nlcy5wdXNoKHZhbHVlKVxuXHRcdGVsc2UgaWYgKG1hdGNoWzNdWzBdID09PSBcIltcIikge1xuXHRcdFx0dmFyIGF0dHJWYWx1ZSA9IG1hdGNoWzZdXG5cdFx0XHRpZiAoYXR0clZhbHVlKSBhdHRyVmFsdWUgPSBhdHRyVmFsdWUucmVwbGFjZSgvXFxcXChbXCInXSkvZywgXCIkMVwiKS5yZXBsYWNlKC9cXFxcXFxcXC9nLCBcIlxcXFxcIilcblx0XHRcdGlmIChtYXRjaFs0XSA9PT0gXCJjbGFzc1wiKSBjbGFzc2VzLnB1c2goYXR0clZhbHVlKVxuXHRcdFx0ZWxzZSBhdHRyc1ttYXRjaFs0XV0gPSBhdHRyVmFsdWUgPT09IFwiXCIgPyBhdHRyVmFsdWUgOiBhdHRyVmFsdWUgfHwgdHJ1ZVxuXHRcdH1cblx0fVxuXHRpZiAoY2xhc3Nlcy5sZW5ndGggPiAwKSBhdHRycy5jbGFzc05hbWUgPSBjbGFzc2VzLmpvaW4oXCIgXCIpXG5cdHJldHVybiBzZWxlY3RvckNhY2hlW3NlbGVjdG9yXSA9IHt0YWc6IHRhZywgYXR0cnM6IGF0dHJzfVxufVxuXG5mdW5jdGlvbiBleGVjU2VsZWN0b3Ioc3RhdGUsIHZub2RlKSB7XG5cdHZhciBhdHRycyA9IHZub2RlLmF0dHJzXG5cdHZhciBjaGlsZHJlbiA9IFZub2RlLm5vcm1hbGl6ZUNoaWxkcmVuKHZub2RlLmNoaWxkcmVuKVxuXHR2YXIgaGFzQ2xhc3MgPSBoYXNPd24uY2FsbChhdHRycywgXCJjbGFzc1wiKVxuXHR2YXIgY2xhc3NOYW1lID0gaGFzQ2xhc3MgPyBhdHRycy5jbGFzcyA6IGF0dHJzLmNsYXNzTmFtZVxuXG5cdHZub2RlLnRhZyA9IHN0YXRlLnRhZ1xuXHR2bm9kZS5hdHRycyA9IG51bGxcblx0dm5vZGUuY2hpbGRyZW4gPSB1bmRlZmluZWRcblxuXHRpZiAoIWlzRW1wdHkoc3RhdGUuYXR0cnMpICYmICFpc0VtcHR5KGF0dHJzKSkge1xuXHRcdHZhciBuZXdBdHRycyA9IHt9XG5cblx0XHRmb3IgKHZhciBrZXkgaW4gYXR0cnMpIHtcblx0XHRcdGlmIChoYXNPd24uY2FsbChhdHRycywga2V5KSkgbmV3QXR0cnNba2V5XSA9IGF0dHJzW2tleV1cblx0XHR9XG5cblx0XHRhdHRycyA9IG5ld0F0dHJzXG5cdH1cblxuXHRmb3IgKHZhciBrZXkgaW4gc3RhdGUuYXR0cnMpIHtcblx0XHRpZiAoaGFzT3duLmNhbGwoc3RhdGUuYXR0cnMsIGtleSkgJiYga2V5ICE9PSBcImNsYXNzTmFtZVwiICYmICFoYXNPd24uY2FsbChhdHRycywga2V5KSl7XG5cdFx0XHRhdHRyc1trZXldID0gc3RhdGUuYXR0cnNba2V5XVxuXHRcdH1cblx0fVxuXHRpZiAoY2xhc3NOYW1lICE9IG51bGwgfHwgc3RhdGUuYXR0cnMuY2xhc3NOYW1lICE9IG51bGwpIGF0dHJzLmNsYXNzTmFtZSA9XG5cdFx0Y2xhc3NOYW1lICE9IG51bGxcblx0XHRcdD8gc3RhdGUuYXR0cnMuY2xhc3NOYW1lICE9IG51bGxcblx0XHRcdFx0PyBTdHJpbmcoc3RhdGUuYXR0cnMuY2xhc3NOYW1lKSArIFwiIFwiICsgU3RyaW5nKGNsYXNzTmFtZSlcblx0XHRcdFx0OiBjbGFzc05hbWVcblx0XHRcdDogc3RhdGUuYXR0cnMuY2xhc3NOYW1lICE9IG51bGxcblx0XHRcdFx0PyBzdGF0ZS5hdHRycy5jbGFzc05hbWVcblx0XHRcdFx0OiBudWxsXG5cblx0aWYgKGhhc0NsYXNzKSBhdHRycy5jbGFzcyA9IG51bGxcblxuXHRmb3IgKHZhciBrZXkgaW4gYXR0cnMpIHtcblx0XHRpZiAoaGFzT3duLmNhbGwoYXR0cnMsIGtleSkgJiYga2V5ICE9PSBcImtleVwiKSB7XG5cdFx0XHR2bm9kZS5hdHRycyA9IGF0dHJzXG5cdFx0XHRicmVha1xuXHRcdH1cblx0fVxuXG5cdGlmIChBcnJheS5pc0FycmF5KGNoaWxkcmVuKSAmJiBjaGlsZHJlbi5sZW5ndGggPT09IDEgJiYgY2hpbGRyZW5bMF0gIT0gbnVsbCAmJiBjaGlsZHJlblswXS50YWcgPT09IFwiI1wiKSB7XG5cdFx0dm5vZGUudGV4dCA9IGNoaWxkcmVuWzBdLmNoaWxkcmVuXG5cdH0gZWxzZSB7XG5cdFx0dm5vZGUuY2hpbGRyZW4gPSBjaGlsZHJlblxuXHR9XG5cblx0cmV0dXJuIHZub2RlXG59XG5cbmZ1bmN0aW9uIGh5cGVyc2NyaXB0KHNlbGVjdG9yKSB7XG5cdGlmIChzZWxlY3RvciA9PSBudWxsIHx8IHR5cGVvZiBzZWxlY3RvciAhPT0gXCJzdHJpbmdcIiAmJiB0eXBlb2Ygc2VsZWN0b3IgIT09IFwiZnVuY3Rpb25cIiAmJiB0eXBlb2Ygc2VsZWN0b3IudmlldyAhPT0gXCJmdW5jdGlvblwiKSB7XG5cdFx0dGhyb3cgRXJyb3IoXCJUaGUgc2VsZWN0b3IgbXVzdCBiZSBlaXRoZXIgYSBzdHJpbmcgb3IgYSBjb21wb25lbnQuXCIpO1xuXHR9XG5cblx0dmFyIHZub2RlID0gaHlwZXJzY3JpcHRWbm9kZS5hcHBseSgxLCBhcmd1bWVudHMpXG5cblx0aWYgKHR5cGVvZiBzZWxlY3RvciA9PT0gXCJzdHJpbmdcIikge1xuXHRcdHZub2RlLmNoaWxkcmVuID0gVm5vZGUubm9ybWFsaXplQ2hpbGRyZW4odm5vZGUuY2hpbGRyZW4pXG5cdFx0aWYgKHNlbGVjdG9yICE9PSBcIltcIikgcmV0dXJuIGV4ZWNTZWxlY3RvcihzZWxlY3RvckNhY2hlW3NlbGVjdG9yXSB8fCBjb21waWxlU2VsZWN0b3Ioc2VsZWN0b3IpLCB2bm9kZSlcblx0fVxuXG5cdHZub2RlLnRhZyA9IHNlbGVjdG9yXG5cdHJldHVybiB2bm9kZVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGh5cGVyc2NyaXB0XG4iLCJcInVzZSBzdHJpY3RcIlxuXG52YXIgVm5vZGUgPSByZXF1aXJlKFwiLi4vcmVuZGVyL3Zub2RlXCIpXG5cbi8vIENhbGwgdmlhIGBoeXBlcnNjcmlwdFZub2RlLmFwcGx5KHN0YXJ0T2Zmc2V0LCBhcmd1bWVudHMpYFxuLy9cbi8vIFRoZSByZWFzb24gSSBkbyBpdCB0aGlzIHdheSwgZm9yd2FyZGluZyB0aGUgYXJndW1lbnRzIGFuZCBwYXNzaW5nIHRoZSBzdGFydFxuLy8gb2Zmc2V0IGluIGB0aGlzYCwgaXMgc28gSSBkb24ndCBoYXZlIHRvIGNyZWF0ZSBhIHRlbXBvcmFyeSBhcnJheSBpbiBhXG4vLyBwZXJmb3JtYW5jZS1jcml0aWNhbCBwYXRoLlxuLy9cbi8vIEluIG5hdGl2ZSBFUzYsIEknZCBpbnN0ZWFkIGFkZCBhIGZpbmFsIGAuLi5hcmdzYCBwYXJhbWV0ZXIgdG8gdGhlXG4vLyBgaHlwZXJzY3JpcHRgIGFuZCBgZnJhZ21lbnRgIGZhY3RvcmllcyBhbmQgZGVmaW5lIHRoaXMgYXNcbi8vIGBoeXBlcnNjcmlwdFZub2RlKC4uLmFyZ3MpYCwgc2luY2UgbW9kZXJuIGVuZ2luZXMgZG8gb3B0aW1pemUgdGhhdCBhd2F5LiBCdXRcbi8vIEVTNSAod2hhdCBNaXRocmlsIHJlcXVpcmVzIHRoYW5rcyB0byBJRSBzdXBwb3J0KSBkb2Vzbid0IGdpdmUgbWUgdGhhdCBsdXh1cnksXG4vLyBhbmQgZW5naW5lcyBhcmVuJ3QgbmVhcmx5IGludGVsbGlnZW50IGVub3VnaCB0byBkbyBlaXRoZXIgb2YgdGhlc2U6XG4vL1xuLy8gMS4gRWxpZGUgdGhlIGFsbG9jYXRpb24gZm9yIGBbXS5zbGljZS5jYWxsKGFyZ3VtZW50cywgMSlgIHdoZW4gaXQncyBwYXNzZWQgdG9cbi8vICAgIGFub3RoZXIgZnVuY3Rpb24gb25seSB0byBiZSBpbmRleGVkLlxuLy8gMi4gRWxpZGUgYW4gYGFyZ3VtZW50c2AgYWxsb2NhdGlvbiB3aGVuIGl0J3MgcGFzc2VkIHRvIGFueSBmdW5jdGlvbiBvdGhlclxuLy8gICAgdGhhbiBgRnVuY3Rpb24ucHJvdG90eXBlLmFwcGx5YCBvciBgUmVmbGVjdC5hcHBseWAuXG4vL1xuLy8gSW4gRVM2LCBpdCdkIHByb2JhYmx5IGxvb2sgY2xvc2VyIHRvIHRoaXMgKEknZCBuZWVkIHRvIHByb2ZpbGUgaXQsIHRob3VnaCk6XG4vLyBtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGF0dHJzLCAuLi5jaGlsZHJlbikge1xuLy8gICAgIGlmIChhdHRycyA9PSBudWxsIHx8IHR5cGVvZiBhdHRycyA9PT0gXCJvYmplY3RcIiAmJiBhdHRycy50YWcgPT0gbnVsbCAmJiAhQXJyYXkuaXNBcnJheShhdHRycykpIHtcbi8vICAgICAgICAgaWYgKGNoaWxkcmVuLmxlbmd0aCA9PT0gMSAmJiBBcnJheS5pc0FycmF5KGNoaWxkcmVuWzBdKSkgY2hpbGRyZW4gPSBjaGlsZHJlblswXVxuLy8gICAgIH0gZWxzZSB7XG4vLyAgICAgICAgIGNoaWxkcmVuID0gY2hpbGRyZW4ubGVuZ3RoID09PSAwICYmIEFycmF5LmlzQXJyYXkoYXR0cnMpID8gYXR0cnMgOiBbYXR0cnMsIC4uLmNoaWxkcmVuXVxuLy8gICAgICAgICBhdHRycyA9IHVuZGVmaW5lZFxuLy8gICAgIH1cbi8vXG4vLyAgICAgaWYgKGF0dHJzID09IG51bGwpIGF0dHJzID0ge31cbi8vICAgICByZXR1cm4gVm5vZGUoXCJcIiwgYXR0cnMua2V5LCBhdHRycywgY2hpbGRyZW4pXG4vLyB9XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKCkge1xuXHR2YXIgYXR0cnMgPSBhcmd1bWVudHNbdGhpc10sIHN0YXJ0ID0gdGhpcyArIDEsIGNoaWxkcmVuXG5cblx0aWYgKGF0dHJzID09IG51bGwpIHtcblx0XHRhdHRycyA9IHt9XG5cdH0gZWxzZSBpZiAodHlwZW9mIGF0dHJzICE9PSBcIm9iamVjdFwiIHx8IGF0dHJzLnRhZyAhPSBudWxsIHx8IEFycmF5LmlzQXJyYXkoYXR0cnMpKSB7XG5cdFx0YXR0cnMgPSB7fVxuXHRcdHN0YXJ0ID0gdGhpc1xuXHR9XG5cblx0aWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IHN0YXJ0ICsgMSkge1xuXHRcdGNoaWxkcmVuID0gYXJndW1lbnRzW3N0YXJ0XVxuXHRcdGlmICghQXJyYXkuaXNBcnJheShjaGlsZHJlbikpIGNoaWxkcmVuID0gW2NoaWxkcmVuXVxuXHR9IGVsc2Uge1xuXHRcdGNoaWxkcmVuID0gW11cblx0XHR3aGlsZSAoc3RhcnQgPCBhcmd1bWVudHMubGVuZ3RoKSBjaGlsZHJlbi5wdXNoKGFyZ3VtZW50c1tzdGFydCsrXSlcblx0fVxuXG5cdHJldHVybiBWbm9kZShcIlwiLCBhdHRycy5rZXksIGF0dHJzLCBjaGlsZHJlbilcbn1cbiIsIlwidXNlIHN0cmljdFwiXG5cbnZhciBWbm9kZSA9IHJlcXVpcmUoXCIuLi9yZW5kZXIvdm5vZGVcIilcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbigkd2luZG93KSB7XG5cdHZhciAkZG9jID0gJHdpbmRvdyAmJiAkd2luZG93LmRvY3VtZW50XG5cdHZhciBjdXJyZW50UmVkcmF3XG5cblx0dmFyIG5hbWVTcGFjZSA9IHtcblx0XHRzdmc6IFwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIixcblx0XHRtYXRoOiBcImh0dHA6Ly93d3cudzMub3JnLzE5OTgvTWF0aC9NYXRoTUxcIlxuXHR9XG5cblx0ZnVuY3Rpb24gZ2V0TmFtZVNwYWNlKHZub2RlKSB7XG5cdFx0cmV0dXJuIHZub2RlLmF0dHJzICYmIHZub2RlLmF0dHJzLnhtbG5zIHx8IG5hbWVTcGFjZVt2bm9kZS50YWddXG5cdH1cblxuXHQvL3Nhbml0eSBjaGVjayB0byBkaXNjb3VyYWdlIHBlb3BsZSBmcm9tIGRvaW5nIGB2bm9kZS5zdGF0ZSA9IC4uLmBcblx0ZnVuY3Rpb24gY2hlY2tTdGF0ZSh2bm9kZSwgb3JpZ2luYWwpIHtcblx0XHRpZiAodm5vZGUuc3RhdGUgIT09IG9yaWdpbmFsKSB0aHJvdyBuZXcgRXJyb3IoXCJgdm5vZGUuc3RhdGVgIG11c3Qgbm90IGJlIG1vZGlmaWVkXCIpXG5cdH1cblxuXHQvL05vdGU6IHRoZSBob29rIGlzIHBhc3NlZCBhcyB0aGUgYHRoaXNgIGFyZ3VtZW50IHRvIGFsbG93IHByb3h5aW5nIHRoZVxuXHQvL2FyZ3VtZW50cyB3aXRob3V0IHJlcXVpcmluZyBhIGZ1bGwgYXJyYXkgYWxsb2NhdGlvbiB0byBkbyBzby4gSXQgYWxzb1xuXHQvL3Rha2VzIGFkdmFudGFnZSBvZiB0aGUgZmFjdCB0aGUgY3VycmVudCBgdm5vZGVgIGlzIHRoZSBmaXJzdCBhcmd1bWVudCBpblxuXHQvL2FsbCBsaWZlY3ljbGUgbWV0aG9kcy5cblx0ZnVuY3Rpb24gY2FsbEhvb2sodm5vZGUpIHtcblx0XHR2YXIgb3JpZ2luYWwgPSB2bm9kZS5zdGF0ZVxuXHRcdHRyeSB7XG5cdFx0XHRyZXR1cm4gdGhpcy5hcHBseShvcmlnaW5hbCwgYXJndW1lbnRzKVxuXHRcdH0gZmluYWxseSB7XG5cdFx0XHRjaGVja1N0YXRlKHZub2RlLCBvcmlnaW5hbClcblx0XHR9XG5cdH1cblxuXHQvLyBJRTExIChhdCBsZWFzdCkgdGhyb3dzIGFuIFVuc3BlY2lmaWVkRXJyb3Igd2hlbiBhY2Nlc3NpbmcgZG9jdW1lbnQuYWN0aXZlRWxlbWVudCB3aGVuXG5cdC8vIGluc2lkZSBhbiBpZnJhbWUuIENhdGNoIGFuZCBzd2FsbG93IHRoaXMgZXJyb3IsIGFuZCBoZWF2eS1oYW5kaWRseSByZXR1cm4gbnVsbC5cblx0ZnVuY3Rpb24gYWN0aXZlRWxlbWVudCgpIHtcblx0XHR0cnkge1xuXHRcdFx0cmV0dXJuICRkb2MuYWN0aXZlRWxlbWVudFxuXHRcdH0gY2F0Y2ggKGUpIHtcblx0XHRcdHJldHVybiBudWxsXG5cdFx0fVxuXHR9XG5cdC8vY3JlYXRlXG5cdGZ1bmN0aW9uIGNyZWF0ZU5vZGVzKHBhcmVudCwgdm5vZGVzLCBzdGFydCwgZW5kLCBob29rcywgbmV4dFNpYmxpbmcsIG5zKSB7XG5cdFx0Zm9yICh2YXIgaSA9IHN0YXJ0OyBpIDwgZW5kOyBpKyspIHtcblx0XHRcdHZhciB2bm9kZSA9IHZub2Rlc1tpXVxuXHRcdFx0aWYgKHZub2RlICE9IG51bGwpIHtcblx0XHRcdFx0Y3JlYXRlTm9kZShwYXJlbnQsIHZub2RlLCBob29rcywgbnMsIG5leHRTaWJsaW5nKVxuXHRcdFx0fVxuXHRcdH1cblx0fVxuXHRmdW5jdGlvbiBjcmVhdGVOb2RlKHBhcmVudCwgdm5vZGUsIGhvb2tzLCBucywgbmV4dFNpYmxpbmcpIHtcblx0XHR2YXIgdGFnID0gdm5vZGUudGFnXG5cdFx0aWYgKHR5cGVvZiB0YWcgPT09IFwic3RyaW5nXCIpIHtcblx0XHRcdHZub2RlLnN0YXRlID0ge31cblx0XHRcdGlmICh2bm9kZS5hdHRycyAhPSBudWxsKSBpbml0TGlmZWN5Y2xlKHZub2RlLmF0dHJzLCB2bm9kZSwgaG9va3MpXG5cdFx0XHRzd2l0Y2ggKHRhZykge1xuXHRcdFx0XHRjYXNlIFwiI1wiOiBjcmVhdGVUZXh0KHBhcmVudCwgdm5vZGUsIG5leHRTaWJsaW5nKTsgYnJlYWtcblx0XHRcdFx0Y2FzZSBcIjxcIjogY3JlYXRlSFRNTChwYXJlbnQsIHZub2RlLCBucywgbmV4dFNpYmxpbmcpOyBicmVha1xuXHRcdFx0XHRjYXNlIFwiW1wiOiBjcmVhdGVGcmFnbWVudChwYXJlbnQsIHZub2RlLCBob29rcywgbnMsIG5leHRTaWJsaW5nKTsgYnJlYWtcblx0XHRcdFx0ZGVmYXVsdDogY3JlYXRlRWxlbWVudChwYXJlbnQsIHZub2RlLCBob29rcywgbnMsIG5leHRTaWJsaW5nKVxuXHRcdFx0fVxuXHRcdH1cblx0XHRlbHNlIGNyZWF0ZUNvbXBvbmVudChwYXJlbnQsIHZub2RlLCBob29rcywgbnMsIG5leHRTaWJsaW5nKVxuXHR9XG5cdGZ1bmN0aW9uIGNyZWF0ZVRleHQocGFyZW50LCB2bm9kZSwgbmV4dFNpYmxpbmcpIHtcblx0XHR2bm9kZS5kb20gPSAkZG9jLmNyZWF0ZVRleHROb2RlKHZub2RlLmNoaWxkcmVuKVxuXHRcdGluc2VydE5vZGUocGFyZW50LCB2bm9kZS5kb20sIG5leHRTaWJsaW5nKVxuXHR9XG5cdHZhciBwb3NzaWJsZVBhcmVudHMgPSB7Y2FwdGlvbjogXCJ0YWJsZVwiLCB0aGVhZDogXCJ0YWJsZVwiLCB0Ym9keTogXCJ0YWJsZVwiLCB0Zm9vdDogXCJ0YWJsZVwiLCB0cjogXCJ0Ym9keVwiLCB0aDogXCJ0clwiLCB0ZDogXCJ0clwiLCBjb2xncm91cDogXCJ0YWJsZVwiLCBjb2w6IFwiY29sZ3JvdXBcIn1cblx0ZnVuY3Rpb24gY3JlYXRlSFRNTChwYXJlbnQsIHZub2RlLCBucywgbmV4dFNpYmxpbmcpIHtcblx0XHR2YXIgbWF0Y2ggPSB2bm9kZS5jaGlsZHJlbi5tYXRjaCgvXlxccyo/PChcXHcrKS9pbSkgfHwgW11cblx0XHQvLyBub3QgdXNpbmcgdGhlIHByb3BlciBwYXJlbnQgbWFrZXMgdGhlIGNoaWxkIGVsZW1lbnQocykgdmFuaXNoLlxuXHRcdC8vICAgICB2YXIgZGl2ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKVxuXHRcdC8vICAgICBkaXYuaW5uZXJIVE1MID0gXCI8dGQ+aTwvdGQ+PHRkPmo8L3RkPlwiXG5cdFx0Ly8gICAgIGNvbnNvbGUubG9nKGRpdi5pbm5lckhUTUwpXG5cdFx0Ly8gLS0+IFwiaWpcIiwgbm8gPHRkPiBpbiBzaWdodC5cblx0XHR2YXIgdGVtcCA9ICRkb2MuY3JlYXRlRWxlbWVudChwb3NzaWJsZVBhcmVudHNbbWF0Y2hbMV1dIHx8IFwiZGl2XCIpXG5cdFx0aWYgKG5zID09PSBcImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCIpIHtcblx0XHRcdHRlbXAuaW5uZXJIVE1MID0gXCI8c3ZnIHhtbG5zPVxcXCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1xcXCI+XCIgKyB2bm9kZS5jaGlsZHJlbiArIFwiPC9zdmc+XCJcblx0XHRcdHRlbXAgPSB0ZW1wLmZpcnN0Q2hpbGRcblx0XHR9IGVsc2Uge1xuXHRcdFx0dGVtcC5pbm5lckhUTUwgPSB2bm9kZS5jaGlsZHJlblxuXHRcdH1cblx0XHR2bm9kZS5kb20gPSB0ZW1wLmZpcnN0Q2hpbGRcblx0XHR2bm9kZS5kb21TaXplID0gdGVtcC5jaGlsZE5vZGVzLmxlbmd0aFxuXHRcdC8vIENhcHR1cmUgbm9kZXMgdG8gcmVtb3ZlLCBzbyB3ZSBkb24ndCBjb25mdXNlIHRoZW0uXG5cdFx0dm5vZGUuaW5zdGFuY2UgPSBbXVxuXHRcdHZhciBmcmFnbWVudCA9ICRkb2MuY3JlYXRlRG9jdW1lbnRGcmFnbWVudCgpXG5cdFx0dmFyIGNoaWxkXG5cdFx0d2hpbGUgKGNoaWxkID0gdGVtcC5maXJzdENoaWxkKSB7XG5cdFx0XHR2bm9kZS5pbnN0YW5jZS5wdXNoKGNoaWxkKVxuXHRcdFx0ZnJhZ21lbnQuYXBwZW5kQ2hpbGQoY2hpbGQpXG5cdFx0fVxuXHRcdGluc2VydE5vZGUocGFyZW50LCBmcmFnbWVudCwgbmV4dFNpYmxpbmcpXG5cdH1cblx0ZnVuY3Rpb24gY3JlYXRlRnJhZ21lbnQocGFyZW50LCB2bm9kZSwgaG9va3MsIG5zLCBuZXh0U2libGluZykge1xuXHRcdHZhciBmcmFnbWVudCA9ICRkb2MuY3JlYXRlRG9jdW1lbnRGcmFnbWVudCgpXG5cdFx0aWYgKHZub2RlLmNoaWxkcmVuICE9IG51bGwpIHtcblx0XHRcdHZhciBjaGlsZHJlbiA9IHZub2RlLmNoaWxkcmVuXG5cdFx0XHRjcmVhdGVOb2RlcyhmcmFnbWVudCwgY2hpbGRyZW4sIDAsIGNoaWxkcmVuLmxlbmd0aCwgaG9va3MsIG51bGwsIG5zKVxuXHRcdH1cblx0XHR2bm9kZS5kb20gPSBmcmFnbWVudC5maXJzdENoaWxkXG5cdFx0dm5vZGUuZG9tU2l6ZSA9IGZyYWdtZW50LmNoaWxkTm9kZXMubGVuZ3RoXG5cdFx0aW5zZXJ0Tm9kZShwYXJlbnQsIGZyYWdtZW50LCBuZXh0U2libGluZylcblx0fVxuXHRmdW5jdGlvbiBjcmVhdGVFbGVtZW50KHBhcmVudCwgdm5vZGUsIGhvb2tzLCBucywgbmV4dFNpYmxpbmcpIHtcblx0XHR2YXIgdGFnID0gdm5vZGUudGFnXG5cdFx0dmFyIGF0dHJzID0gdm5vZGUuYXR0cnNcblx0XHR2YXIgaXMgPSBhdHRycyAmJiBhdHRycy5pc1xuXG5cdFx0bnMgPSBnZXROYW1lU3BhY2Uodm5vZGUpIHx8IG5zXG5cblx0XHR2YXIgZWxlbWVudCA9IG5zID9cblx0XHRcdGlzID8gJGRvYy5jcmVhdGVFbGVtZW50TlMobnMsIHRhZywge2lzOiBpc30pIDogJGRvYy5jcmVhdGVFbGVtZW50TlMobnMsIHRhZykgOlxuXHRcdFx0aXMgPyAkZG9jLmNyZWF0ZUVsZW1lbnQodGFnLCB7aXM6IGlzfSkgOiAkZG9jLmNyZWF0ZUVsZW1lbnQodGFnKVxuXHRcdHZub2RlLmRvbSA9IGVsZW1lbnRcblxuXHRcdGlmIChhdHRycyAhPSBudWxsKSB7XG5cdFx0XHRzZXRBdHRycyh2bm9kZSwgYXR0cnMsIG5zKVxuXHRcdH1cblxuXHRcdGluc2VydE5vZGUocGFyZW50LCBlbGVtZW50LCBuZXh0U2libGluZylcblxuXHRcdGlmICghbWF5YmVTZXRDb250ZW50RWRpdGFibGUodm5vZGUpKSB7XG5cdFx0XHRpZiAodm5vZGUudGV4dCAhPSBudWxsKSB7XG5cdFx0XHRcdGlmICh2bm9kZS50ZXh0ICE9PSBcIlwiKSBlbGVtZW50LnRleHRDb250ZW50ID0gdm5vZGUudGV4dFxuXHRcdFx0XHRlbHNlIHZub2RlLmNoaWxkcmVuID0gW1Zub2RlKFwiI1wiLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgdm5vZGUudGV4dCwgdW5kZWZpbmVkLCB1bmRlZmluZWQpXVxuXHRcdFx0fVxuXHRcdFx0aWYgKHZub2RlLmNoaWxkcmVuICE9IG51bGwpIHtcblx0XHRcdFx0dmFyIGNoaWxkcmVuID0gdm5vZGUuY2hpbGRyZW5cblx0XHRcdFx0Y3JlYXRlTm9kZXMoZWxlbWVudCwgY2hpbGRyZW4sIDAsIGNoaWxkcmVuLmxlbmd0aCwgaG9va3MsIG51bGwsIG5zKVxuXHRcdFx0XHRpZiAodm5vZGUudGFnID09PSBcInNlbGVjdFwiICYmIGF0dHJzICE9IG51bGwpIHNldExhdGVTZWxlY3RBdHRycyh2bm9kZSwgYXR0cnMpXG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cdGZ1bmN0aW9uIGluaXRDb21wb25lbnQodm5vZGUsIGhvb2tzKSB7XG5cdFx0dmFyIHNlbnRpbmVsXG5cdFx0aWYgKHR5cGVvZiB2bm9kZS50YWcudmlldyA9PT0gXCJmdW5jdGlvblwiKSB7XG5cdFx0XHR2bm9kZS5zdGF0ZSA9IE9iamVjdC5jcmVhdGUodm5vZGUudGFnKVxuXHRcdFx0c2VudGluZWwgPSB2bm9kZS5zdGF0ZS52aWV3XG5cdFx0XHRpZiAoc2VudGluZWwuJCRyZWVudHJhbnRMb2NrJCQgIT0gbnVsbCkgcmV0dXJuXG5cdFx0XHRzZW50aW5lbC4kJHJlZW50cmFudExvY2skJCA9IHRydWVcblx0XHR9IGVsc2Uge1xuXHRcdFx0dm5vZGUuc3RhdGUgPSB2b2lkIDBcblx0XHRcdHNlbnRpbmVsID0gdm5vZGUudGFnXG5cdFx0XHRpZiAoc2VudGluZWwuJCRyZWVudHJhbnRMb2NrJCQgIT0gbnVsbCkgcmV0dXJuXG5cdFx0XHRzZW50aW5lbC4kJHJlZW50cmFudExvY2skJCA9IHRydWVcblx0XHRcdHZub2RlLnN0YXRlID0gKHZub2RlLnRhZy5wcm90b3R5cGUgIT0gbnVsbCAmJiB0eXBlb2Ygdm5vZGUudGFnLnByb3RvdHlwZS52aWV3ID09PSBcImZ1bmN0aW9uXCIpID8gbmV3IHZub2RlLnRhZyh2bm9kZSkgOiB2bm9kZS50YWcodm5vZGUpXG5cdFx0fVxuXHRcdGluaXRMaWZlY3ljbGUodm5vZGUuc3RhdGUsIHZub2RlLCBob29rcylcblx0XHRpZiAodm5vZGUuYXR0cnMgIT0gbnVsbCkgaW5pdExpZmVjeWNsZSh2bm9kZS5hdHRycywgdm5vZGUsIGhvb2tzKVxuXHRcdHZub2RlLmluc3RhbmNlID0gVm5vZGUubm9ybWFsaXplKGNhbGxIb29rLmNhbGwodm5vZGUuc3RhdGUudmlldywgdm5vZGUpKVxuXHRcdGlmICh2bm9kZS5pbnN0YW5jZSA9PT0gdm5vZGUpIHRocm93IEVycm9yKFwiQSB2aWV3IGNhbm5vdCByZXR1cm4gdGhlIHZub2RlIGl0IHJlY2VpdmVkIGFzIGFyZ3VtZW50XCIpXG5cdFx0c2VudGluZWwuJCRyZWVudHJhbnRMb2NrJCQgPSBudWxsXG5cdH1cblx0ZnVuY3Rpb24gY3JlYXRlQ29tcG9uZW50KHBhcmVudCwgdm5vZGUsIGhvb2tzLCBucywgbmV4dFNpYmxpbmcpIHtcblx0XHRpbml0Q29tcG9uZW50KHZub2RlLCBob29rcylcblx0XHRpZiAodm5vZGUuaW5zdGFuY2UgIT0gbnVsbCkge1xuXHRcdFx0Y3JlYXRlTm9kZShwYXJlbnQsIHZub2RlLmluc3RhbmNlLCBob29rcywgbnMsIG5leHRTaWJsaW5nKVxuXHRcdFx0dm5vZGUuZG9tID0gdm5vZGUuaW5zdGFuY2UuZG9tXG5cdFx0XHR2bm9kZS5kb21TaXplID0gdm5vZGUuZG9tICE9IG51bGwgPyB2bm9kZS5pbnN0YW5jZS5kb21TaXplIDogMFxuXHRcdH1cblx0XHRlbHNlIHtcblx0XHRcdHZub2RlLmRvbVNpemUgPSAwXG5cdFx0fVxuXHR9XG5cblx0Ly91cGRhdGVcblx0LyoqXG5cdCAqIEBwYXJhbSB7RWxlbWVudHxGcmFnbWVudH0gcGFyZW50IC0gdGhlIHBhcmVudCBlbGVtZW50XG5cdCAqIEBwYXJhbSB7Vm5vZGVbXSB8IG51bGx9IG9sZCAtIHRoZSBsaXN0IG9mIHZub2RlcyBvZiB0aGUgbGFzdCBgcmVuZGVyKClgIGNhbGwgZm9yXG5cdCAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMgcGFydCBvZiB0aGUgdHJlZVxuXHQgKiBAcGFyYW0ge1Zub2RlW10gfCBudWxsfSB2bm9kZXMgLSBhcyBhYm92ZSwgYnV0IGZvciB0aGUgY3VycmVudCBgcmVuZGVyKClgIGNhbGwuXG5cdCAqIEBwYXJhbSB7RnVuY3Rpb25bXX0gaG9va3MgLSBhbiBhY2N1bXVsYXRvciBvZiBwb3N0LXJlbmRlciBob29rcyAob25jcmVhdGUvb251cGRhdGUpXG5cdCAqIEBwYXJhbSB7RWxlbWVudCB8IG51bGx9IG5leHRTaWJsaW5nIC0gdGhlIG5leHQgRE9NIG5vZGUgaWYgd2UncmUgZGVhbGluZyB3aXRoIGFcblx0ICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmcmFnbWVudCB0aGF0IGlzIG5vdCB0aGUgbGFzdCBpdGVtIGluIGl0c1xuXHQgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBhcmVudFxuXHQgKiBAcGFyYW0geydzdmcnIHwgJ21hdGgnIHwgU3RyaW5nIHwgbnVsbH0gbnMpIC0gdGhlIGN1cnJlbnQgWE1MIG5hbWVzcGFjZSwgaWYgYW55XG5cdCAqIEByZXR1cm5zIHZvaWRcblx0ICovXG5cdC8vIFRoaXMgZnVuY3Rpb24gZGlmZnMgYW5kIHBhdGNoZXMgbGlzdHMgb2Ygdm5vZGVzLCBib3RoIGtleWVkIGFuZCB1bmtleWVkLlxuXHQvL1xuXHQvLyBXZSB3aWxsOlxuXHQvL1xuXHQvLyAxLiBkZXNjcmliZSBpdHMgZ2VuZXJhbCBzdHJ1Y3R1cmVcblx0Ly8gMi4gZm9jdXMgb24gdGhlIGRpZmYgYWxnb3JpdGhtIG9wdGltaXphdGlvbnNcblx0Ly8gMy4gZGlzY3VzcyBET00gbm9kZSBvcGVyYXRpb25zLlxuXG5cdC8vICMjIE92ZXJ2aWV3OlxuXHQvL1xuXHQvLyBUaGUgdXBkYXRlTm9kZXMoKSBmdW5jdGlvbjpcblx0Ly8gLSBkZWFscyB3aXRoIHRyaXZpYWwgY2FzZXNcblx0Ly8gLSBkZXRlcm1pbmVzIHdoZXRoZXIgdGhlIGxpc3RzIGFyZSBrZXllZCBvciB1bmtleWVkIGJhc2VkIG9uIHRoZSBmaXJzdCBub24tbnVsbCBub2RlXG5cdC8vICAgb2YgZWFjaCBsaXN0LlxuXHQvLyAtIGRpZmZzIHRoZW0gYW5kIHBhdGNoZXMgdGhlIERPTSBpZiBuZWVkZWQgKHRoYXQncyB0aGUgYnJ1bnQgb2YgdGhlIGNvZGUpXG5cdC8vIC0gbWFuYWdlcyB0aGUgbGVmdG92ZXJzOiBhZnRlciBkaWZmaW5nLCBhcmUgdGhlcmU6XG5cdC8vICAgLSBvbGQgbm9kZXMgbGVmdCB0byByZW1vdmU/XG5cdC8vIFx0IC0gbmV3IG5vZGVzIHRvIGluc2VydD9cblx0Ly8gXHQgZGVhbCB3aXRoIHRoZW0hXG5cdC8vXG5cdC8vIFRoZSBsaXN0cyBhcmUgb25seSBpdGVyYXRlZCBvdmVyIG9uY2UsIHdpdGggYW4gZXhjZXB0aW9uIGZvciB0aGUgbm9kZXMgaW4gYG9sZGAgdGhhdFxuXHQvLyBhcmUgdmlzaXRlZCBpbiB0aGUgZm91cnRoIHBhcnQgb2YgdGhlIGRpZmYgYW5kIGluIHRoZSBgcmVtb3ZlTm9kZXNgIGxvb3AuXG5cblx0Ly8gIyMgRGlmZmluZ1xuXHQvL1xuXHQvLyBSZWFkaW5nIGh0dHBzOi8vZ2l0aHViLmNvbS9sb2NhbHZvaWQvaXZpL2Jsb2IvZGRjMDlkMDZhYmFlZjQ1MjQ4ZTYxMzNmNzA0MGQwMGQzYzZiZTg1My9wYWNrYWdlcy9pdmkvc3JjL3Zkb20vaW1wbGVtZW50YXRpb24udHMjTDYxNy1MODM3XG5cdC8vIG1heSBiZSBnb29kIGZvciBjb250ZXh0IG9uIGxvbmdlc3QgaW5jcmVhc2luZyBzdWJzZXF1ZW5jZS1iYXNlZCBsb2dpYyBmb3IgbW92aW5nIG5vZGVzLlxuXHQvL1xuXHQvLyBJbiBvcmRlciB0byBkaWZmIGtleWVkIGxpc3RzLCBvbmUgaGFzIHRvXG5cdC8vXG5cdC8vIDEpIG1hdGNoIG5vZGVzIGluIGJvdGggbGlzdHMsIHBlciBrZXksIGFuZCB1cGRhdGUgdGhlbSBhY2NvcmRpbmdseVxuXHQvLyAyKSBjcmVhdGUgdGhlIG5vZGVzIHByZXNlbnQgaW4gdGhlIG5ldyBsaXN0LCBidXQgYWJzZW50IGluIHRoZSBvbGQgb25lXG5cdC8vIDMpIHJlbW92ZSB0aGUgbm9kZXMgcHJlc2VudCBpbiB0aGUgb2xkIGxpc3QsIGJ1dCBhYnNlbnQgaW4gdGhlIG5ldyBvbmVcblx0Ly8gNCkgZmlndXJlIG91dCB3aGF0IG5vZGVzIGluIDEpIHRvIG1vdmUgaW4gb3JkZXIgdG8gbWluaW1pemUgdGhlIERPTSBvcGVyYXRpb25zLlxuXHQvL1xuXHQvLyBUbyBhY2hpZXZlIDEpIG9uZSBjYW4gY3JlYXRlIGEgZGljdGlvbmFyeSBvZiBrZXlzID0+IGluZGV4IChmb3IgdGhlIG9sZCBsaXN0KSwgdGhlbiBpdGVyYXRlXG5cdC8vIG92ZXIgdGhlIG5ldyBsaXN0IGFuZCBmb3IgZWFjaCBuZXcgdm5vZGUsIGZpbmQgdGhlIGNvcnJlc3BvbmRpbmcgdm5vZGUgaW4gdGhlIG9sZCBsaXN0IHVzaW5nXG5cdC8vIHRoZSBtYXAuXG5cdC8vIDIpIGlzIGFjaGlldmVkIGluIHRoZSBzYW1lIHN0ZXA6IGlmIGEgbmV3IG5vZGUgaGFzIG5vIGNvcnJlc3BvbmRpbmcgZW50cnkgaW4gdGhlIG1hcCwgaXQgaXMgbmV3XG5cdC8vIGFuZCBtdXN0IGJlIGNyZWF0ZWQuXG5cdC8vIEZvciB0aGUgcmVtb3ZhbHMsIHdlIGFjdHVhbGx5IHJlbW92ZSB0aGUgbm9kZXMgdGhhdCBoYXZlIGJlZW4gdXBkYXRlZCBmcm9tIHRoZSBvbGQgbGlzdC5cblx0Ly8gVGhlIG5vZGVzIHRoYXQgcmVtYWluIGluIHRoYXQgbGlzdCBhZnRlciAxKSBhbmQgMikgaGF2ZSBiZWVuIHBlcmZvcm1lZCBjYW4gYmUgc2FmZWx5IHJlbW92ZWQuXG5cdC8vIFRoZSBmb3VydGggc3RlcCBpcyBhIGJpdCBtb3JlIGNvbXBsZXggYW5kIHJlbGllcyBvbiB0aGUgbG9uZ2VzdCBpbmNyZWFzaW5nIHN1YnNlcXVlbmNlIChMSVMpXG5cdC8vIGFsZ29yaXRobS5cblx0Ly9cblx0Ly8gdGhlIGxvbmdlc3QgaW5jcmVhc2luZyBzdWJzZXF1ZW5jZSBpcyB0aGUgbGlzdCBvZiBub2RlcyB0aGF0IGNhbiByZW1haW4gaW4gcGxhY2UuIEltYWdpbmUgZ29pbmdcblx0Ly8gZnJvbSBgMSwyLDMsNCw1YCB0byBgNCw1LDEsMiwzYCB3aGVyZSB0aGUgbnVtYmVycyBhcmUgbm90IG5lY2Vzc2FyaWx5IHRoZSBrZXlzLCBidXQgdGhlIGluZGljZXNcblx0Ly8gY29ycmVzcG9uZGluZyB0byB0aGUga2V5ZWQgbm9kZXMgaW4gdGhlIG9sZCBsaXN0IChrZXllZCBub2RlcyBgZSxkLGMsYixhYCA9PiBgYixhLGUsZCxjYCB3b3VsZFxuXHQvLyAgbWF0Y2ggdGhlIGFib3ZlIGxpc3RzLCBmb3IgZXhhbXBsZSkuXG5cdC8vXG5cdC8vIEluIHRoZXJlIGFyZSB0d28gaW5jcmVhc2luZyBzdWJzZXF1ZW5jZXM6IGA0LDVgIGFuZCBgMSwyLDNgLCB0aGUgbGF0dGVyIGJlaW5nIHRoZSBsb25nZXN0LiBXZVxuXHQvLyBjYW4gdXBkYXRlIHRob3NlIG5vZGVzIHdpdGhvdXQgbW92aW5nIHRoZW0sIGFuZCBvbmx5IGNhbGwgYGluc2VydE5vZGVgIG9uIGA0YCBhbmQgYDVgLlxuXHQvL1xuXHQvLyBAbG9jYWx2b2lkIGFkYXB0ZWQgdGhlIGFsZ28gdG8gYWxzbyBzdXBwb3J0IG5vZGUgZGVsZXRpb25zIGFuZCBpbnNlcnRpb25zICh0aGUgYGxpc2AgaXMgYWN0dWFsbHlcblx0Ly8gdGhlIGxvbmdlc3QgaW5jcmVhc2luZyBzdWJzZXF1ZW5jZSAqb2Ygb2xkIG5vZGVzIHN0aWxsIHByZXNlbnQgaW4gdGhlIG5ldyBsaXN0KikuXG5cdC8vXG5cdC8vIEl0IGlzIGEgZ2VuZXJhbCBhbGdvcml0aG0gdGhhdCBpcyBmaXJlcHJvb2YgaW4gYWxsIGNpcmN1bXN0YW5jZXMsIGJ1dCBpdCByZXF1aXJlcyB0aGUgYWxsb2NhdGlvblxuXHQvLyBhbmQgdGhlIGNvbnN0cnVjdGlvbiBvZiBhIGBrZXkgPT4gb2xkSW5kZXhgIG1hcCwgYW5kIHRocmVlIGFycmF5cyAob25lIHdpdGggYG5ld0luZGV4ID0+IG9sZEluZGV4YCxcblx0Ly8gdGhlIGBMSVNgIGFuZCBhIHRlbXBvcmFyeSBvbmUgdG8gY3JlYXRlIHRoZSBMSVMpLlxuXHQvL1xuXHQvLyBTbyB3ZSBjaGVhdCB3aGVyZSB3ZSBjYW46IGlmIHRoZSB0YWlscyBvZiB0aGUgbGlzdHMgYXJlIGlkZW50aWNhbCwgdGhleSBhcmUgZ3VhcmFudGVlZCB0byBiZSBwYXJ0IG9mXG5cdC8vIHRoZSBMSVMgYW5kIGNhbiBiZSB1cGRhdGVkIHdpdGhvdXQgbW92aW5nIHRoZW0uXG5cdC8vXG5cdC8vIElmIHR3byBub2RlcyBhcmUgc3dhcHBlZCwgdGhleSBhcmUgZ3VhcmFudGVlZCBub3QgdG8gYmUgcGFydCBvZiB0aGUgTElTLCBhbmQgbXVzdCBiZSBtb3ZlZCAod2l0aFxuXHQvLyB0aGUgZXhjZXB0aW9uIG9mIHRoZSBsYXN0IG5vZGUgaWYgdGhlIGxpc3QgaXMgZnVsbHkgcmV2ZXJzZWQpLlxuXHQvL1xuXHQvLyAjIyBGaW5kaW5nIHRoZSBuZXh0IHNpYmxpbmcuXG5cdC8vXG5cdC8vIGB1cGRhdGVOb2RlKClgIGFuZCBgY3JlYXRlTm9kZSgpYCBleHBlY3QgYSBuZXh0U2libGluZyBwYXJhbWV0ZXIgdG8gcGVyZm9ybSBET00gb3BlcmF0aW9ucy5cblx0Ly8gV2hlbiB0aGUgbGlzdCBpcyBiZWluZyB0cmF2ZXJzZWQgdG9wLWRvd24sIGF0IGFueSBpbmRleCwgdGhlIERPTSBub2RlcyB1cCB0byB0aGUgcHJldmlvdXNcblx0Ly8gdm5vZGUgcmVmbGVjdCB0aGUgY29udGVudCBvZiB0aGUgbmV3IGxpc3QsIHdoZXJlYXMgdGhlIHJlc3Qgb2YgdGhlIERPTSBub2RlcyByZWZsZWN0IHRoZSBvbGRcblx0Ly8gbGlzdC4gVGhlIG5leHQgc2libGluZyBtdXN0IGJlIGxvb2tlZCBmb3IgaW4gdGhlIG9sZCBsaXN0IHVzaW5nIGBnZXROZXh0U2libGluZyguLi4gb2xkU3RhcnQgKyAxIC4uLilgLlxuXHQvL1xuXHQvLyBJbiB0aGUgb3RoZXIgc2NlbmFyaW9zIChzd2FwcywgdXB3YXJkcyB0cmF2ZXJzYWwsIG1hcC1iYXNlZCBkaWZmKSxcblx0Ly8gdGhlIG5ldyB2bm9kZXMgbGlzdCBpcyB0cmF2ZXJzZWQgdXB3YXJkcy4gVGhlIERPTSBub2RlcyBhdCB0aGUgYm90dG9tIG9mIHRoZSBsaXN0IHJlZmxlY3QgdGhlXG5cdC8vIGJvdHRvbSBwYXJ0IG9mIHRoZSBuZXcgdm5vZGVzIGxpc3QsIGFuZCB3ZSBjYW4gdXNlIHRoZSBgdi5kb21gICB2YWx1ZSBvZiB0aGUgcHJldmlvdXMgbm9kZVxuXHQvLyBhcyB0aGUgbmV4dCBzaWJsaW5nIChjYWNoZWQgaW4gdGhlIGBuZXh0U2libGluZ2AgdmFyaWFibGUpLlxuXG5cblx0Ly8gIyMgRE9NIG5vZGUgbW92ZXNcblx0Ly9cblx0Ly8gSW4gbW9zdCBzY2VuYXJpb3MgYHVwZGF0ZU5vZGUoKWAgYW5kIGBjcmVhdGVOb2RlKClgIHBlcmZvcm0gdGhlIERPTSBvcGVyYXRpb25zLiBIb3dldmVyLFxuXHQvLyB0aGlzIGlzIG5vdCB0aGUgY2FzZSBpZiB0aGUgbm9kZSBtb3ZlZCAoc2Vjb25kIGFuZCBmb3VydGggcGFydCBvZiB0aGUgZGlmZiBhbGdvKS4gV2UgbW92ZVxuXHQvLyB0aGUgb2xkIERPTSBub2RlcyBiZWZvcmUgdXBkYXRlTm9kZSBydW5zIGJlY2F1c2UgaXQgZW5hYmxlcyB1cyB0byB1c2UgdGhlIGNhY2hlZCBgbmV4dFNpYmxpbmdgXG5cdC8vIHZhcmlhYmxlIHJhdGhlciB0aGFuIGZldGNoaW5nIGl0IHVzaW5nIGBnZXROZXh0U2libGluZygpYC5cblx0Ly9cblx0Ly8gVGhlIGZvdXJ0aCBwYXJ0IG9mIHRoZSBkaWZmIGN1cnJlbnRseSBpbnNlcnRzIG5vZGVzIHVuY29uZGl0aW9uYWxseSwgbGVhZGluZyB0byBpc3N1ZXNcblx0Ly8gbGlrZSAjMTc5MSBhbmQgIzE5OTkuIFdlIG5lZWQgdG8gYmUgc21hcnRlciBhYm91dCB0aG9zZSBzaXR1YXRpb25zIHdoZXJlIGFkamFzY2VudCBvbGRcblx0Ly8gbm9kZXMgcmVtYWluIHRvZ2V0aGVyIGluIHRoZSBuZXcgbGlzdCBpbiBhIHdheSB0aGF0IGlzbid0IGNvdmVyZWQgYnkgcGFydHMgb25lIGFuZFxuXHQvLyB0aHJlZSBvZiB0aGUgZGlmZiBhbGdvLlxuXG5cdGZ1bmN0aW9uIHVwZGF0ZU5vZGVzKHBhcmVudCwgb2xkLCB2bm9kZXMsIGhvb2tzLCBuZXh0U2libGluZywgbnMpIHtcblx0XHRpZiAob2xkID09PSB2bm9kZXMgfHwgb2xkID09IG51bGwgJiYgdm5vZGVzID09IG51bGwpIHJldHVyblxuXHRcdGVsc2UgaWYgKG9sZCA9PSBudWxsIHx8IG9sZC5sZW5ndGggPT09IDApIGNyZWF0ZU5vZGVzKHBhcmVudCwgdm5vZGVzLCAwLCB2bm9kZXMubGVuZ3RoLCBob29rcywgbmV4dFNpYmxpbmcsIG5zKVxuXHRcdGVsc2UgaWYgKHZub2RlcyA9PSBudWxsIHx8IHZub2Rlcy5sZW5ndGggPT09IDApIHJlbW92ZU5vZGVzKHBhcmVudCwgb2xkLCAwLCBvbGQubGVuZ3RoKVxuXHRcdGVsc2Uge1xuXHRcdFx0dmFyIGlzT2xkS2V5ZWQgPSBvbGRbMF0gIT0gbnVsbCAmJiBvbGRbMF0ua2V5ICE9IG51bGxcblx0XHRcdHZhciBpc0tleWVkID0gdm5vZGVzWzBdICE9IG51bGwgJiYgdm5vZGVzWzBdLmtleSAhPSBudWxsXG5cdFx0XHR2YXIgc3RhcnQgPSAwLCBvbGRTdGFydCA9IDBcblx0XHRcdGlmICghaXNPbGRLZXllZCkgd2hpbGUgKG9sZFN0YXJ0IDwgb2xkLmxlbmd0aCAmJiBvbGRbb2xkU3RhcnRdID09IG51bGwpIG9sZFN0YXJ0Kytcblx0XHRcdGlmICghaXNLZXllZCkgd2hpbGUgKHN0YXJ0IDwgdm5vZGVzLmxlbmd0aCAmJiB2bm9kZXNbc3RhcnRdID09IG51bGwpIHN0YXJ0Kytcblx0XHRcdGlmIChpc0tleWVkID09PSBudWxsICYmIGlzT2xkS2V5ZWQgPT0gbnVsbCkgcmV0dXJuIC8vIGJvdGggbGlzdHMgYXJlIGZ1bGwgb2YgbnVsbHNcblx0XHRcdGlmIChpc09sZEtleWVkICE9PSBpc0tleWVkKSB7XG5cdFx0XHRcdHJlbW92ZU5vZGVzKHBhcmVudCwgb2xkLCBvbGRTdGFydCwgb2xkLmxlbmd0aClcblx0XHRcdFx0Y3JlYXRlTm9kZXMocGFyZW50LCB2bm9kZXMsIHN0YXJ0LCB2bm9kZXMubGVuZ3RoLCBob29rcywgbmV4dFNpYmxpbmcsIG5zKVxuXHRcdFx0fSBlbHNlIGlmICghaXNLZXllZCkge1xuXHRcdFx0XHQvLyBEb24ndCBpbmRleCBwYXN0IHRoZSBlbmQgb2YgZWl0aGVyIGxpc3QgKGNhdXNlcyBkZW9wdHMpLlxuXHRcdFx0XHR2YXIgY29tbW9uTGVuZ3RoID0gb2xkLmxlbmd0aCA8IHZub2Rlcy5sZW5ndGggPyBvbGQubGVuZ3RoIDogdm5vZGVzLmxlbmd0aFxuXHRcdFx0XHQvLyBSZXdpbmQgaWYgbmVjZXNzYXJ5IHRvIHRoZSBmaXJzdCBub24tbnVsbCBpbmRleCBvbiBlaXRoZXIgc2lkZS5cblx0XHRcdFx0Ly8gV2UgY291bGQgYWx0ZXJuYXRpdmVseSBlaXRoZXIgZXhwbGljaXRseSBjcmVhdGUgb3IgcmVtb3ZlIG5vZGVzIHdoZW4gYHN0YXJ0ICE9PSBvbGRTdGFydGBcblx0XHRcdFx0Ly8gYnV0IHRoYXQgd291bGQgYmUgb3B0aW1pemluZyBmb3Igc3BhcnNlIGxpc3RzIHdoaWNoIGFyZSBtb3JlIHJhcmUgdGhhbiBkZW5zZSBvbmVzLlxuXHRcdFx0XHRzdGFydCA9IHN0YXJ0IDwgb2xkU3RhcnQgPyBzdGFydCA6IG9sZFN0YXJ0XG5cdFx0XHRcdGZvciAoOyBzdGFydCA8IGNvbW1vbkxlbmd0aDsgc3RhcnQrKykge1xuXHRcdFx0XHRcdG8gPSBvbGRbc3RhcnRdXG5cdFx0XHRcdFx0diA9IHZub2Rlc1tzdGFydF1cblx0XHRcdFx0XHRpZiAobyA9PT0gdiB8fCBvID09IG51bGwgJiYgdiA9PSBudWxsKSBjb250aW51ZVxuXHRcdFx0XHRcdGVsc2UgaWYgKG8gPT0gbnVsbCkgY3JlYXRlTm9kZShwYXJlbnQsIHYsIGhvb2tzLCBucywgZ2V0TmV4dFNpYmxpbmcob2xkLCBzdGFydCArIDEsIG5leHRTaWJsaW5nKSlcblx0XHRcdFx0XHRlbHNlIGlmICh2ID09IG51bGwpIHJlbW92ZU5vZGUocGFyZW50LCBvKVxuXHRcdFx0XHRcdGVsc2UgdXBkYXRlTm9kZShwYXJlbnQsIG8sIHYsIGhvb2tzLCBnZXROZXh0U2libGluZyhvbGQsIHN0YXJ0ICsgMSwgbmV4dFNpYmxpbmcpLCBucylcblx0XHRcdFx0fVxuXHRcdFx0XHRpZiAob2xkLmxlbmd0aCA+IGNvbW1vbkxlbmd0aCkgcmVtb3ZlTm9kZXMocGFyZW50LCBvbGQsIHN0YXJ0LCBvbGQubGVuZ3RoKVxuXHRcdFx0XHRpZiAodm5vZGVzLmxlbmd0aCA+IGNvbW1vbkxlbmd0aCkgY3JlYXRlTm9kZXMocGFyZW50LCB2bm9kZXMsIHN0YXJ0LCB2bm9kZXMubGVuZ3RoLCBob29rcywgbmV4dFNpYmxpbmcsIG5zKVxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0Ly8ga2V5ZWQgZGlmZlxuXHRcdFx0XHR2YXIgb2xkRW5kID0gb2xkLmxlbmd0aCAtIDEsIGVuZCA9IHZub2Rlcy5sZW5ndGggLSAxLCBtYXAsIG8sIHYsIG9lLCB2ZSwgdG9wU2libGluZ1xuXG5cdFx0XHRcdC8vIGJvdHRvbS11cFxuXHRcdFx0XHR3aGlsZSAob2xkRW5kID49IG9sZFN0YXJ0ICYmIGVuZCA+PSBzdGFydCkge1xuXHRcdFx0XHRcdG9lID0gb2xkW29sZEVuZF1cblx0XHRcdFx0XHR2ZSA9IHZub2Rlc1tlbmRdXG5cdFx0XHRcdFx0aWYgKG9lLmtleSAhPT0gdmUua2V5KSBicmVha1xuXHRcdFx0XHRcdGlmIChvZSAhPT0gdmUpIHVwZGF0ZU5vZGUocGFyZW50LCBvZSwgdmUsIGhvb2tzLCBuZXh0U2libGluZywgbnMpXG5cdFx0XHRcdFx0aWYgKHZlLmRvbSAhPSBudWxsKSBuZXh0U2libGluZyA9IHZlLmRvbVxuXHRcdFx0XHRcdG9sZEVuZC0tLCBlbmQtLVxuXHRcdFx0XHR9XG5cdFx0XHRcdC8vIHRvcC1kb3duXG5cdFx0XHRcdHdoaWxlIChvbGRFbmQgPj0gb2xkU3RhcnQgJiYgZW5kID49IHN0YXJ0KSB7XG5cdFx0XHRcdFx0byA9IG9sZFtvbGRTdGFydF1cblx0XHRcdFx0XHR2ID0gdm5vZGVzW3N0YXJ0XVxuXHRcdFx0XHRcdGlmIChvLmtleSAhPT0gdi5rZXkpIGJyZWFrXG5cdFx0XHRcdFx0b2xkU3RhcnQrKywgc3RhcnQrK1xuXHRcdFx0XHRcdGlmIChvICE9PSB2KSB1cGRhdGVOb2RlKHBhcmVudCwgbywgdiwgaG9va3MsIGdldE5leHRTaWJsaW5nKG9sZCwgb2xkU3RhcnQsIG5leHRTaWJsaW5nKSwgbnMpXG5cdFx0XHRcdH1cblx0XHRcdFx0Ly8gc3dhcHMgYW5kIGxpc3QgcmV2ZXJzYWxzXG5cdFx0XHRcdHdoaWxlIChvbGRFbmQgPj0gb2xkU3RhcnQgJiYgZW5kID49IHN0YXJ0KSB7XG5cdFx0XHRcdFx0aWYgKHN0YXJ0ID09PSBlbmQpIGJyZWFrXG5cdFx0XHRcdFx0aWYgKG8ua2V5ICE9PSB2ZS5rZXkgfHwgb2Uua2V5ICE9PSB2LmtleSkgYnJlYWtcblx0XHRcdFx0XHR0b3BTaWJsaW5nID0gZ2V0TmV4dFNpYmxpbmcob2xkLCBvbGRTdGFydCwgbmV4dFNpYmxpbmcpXG5cdFx0XHRcdFx0bW92ZU5vZGVzKHBhcmVudCwgb2UsIHRvcFNpYmxpbmcpXG5cdFx0XHRcdFx0aWYgKG9lICE9PSB2KSB1cGRhdGVOb2RlKHBhcmVudCwgb2UsIHYsIGhvb2tzLCB0b3BTaWJsaW5nLCBucylcblx0XHRcdFx0XHRpZiAoKytzdGFydCA8PSAtLWVuZCkgbW92ZU5vZGVzKHBhcmVudCwgbywgbmV4dFNpYmxpbmcpXG5cdFx0XHRcdFx0aWYgKG8gIT09IHZlKSB1cGRhdGVOb2RlKHBhcmVudCwgbywgdmUsIGhvb2tzLCBuZXh0U2libGluZywgbnMpXG5cdFx0XHRcdFx0aWYgKHZlLmRvbSAhPSBudWxsKSBuZXh0U2libGluZyA9IHZlLmRvbVxuXHRcdFx0XHRcdG9sZFN0YXJ0Kys7IG9sZEVuZC0tXG5cdFx0XHRcdFx0b2UgPSBvbGRbb2xkRW5kXVxuXHRcdFx0XHRcdHZlID0gdm5vZGVzW2VuZF1cblx0XHRcdFx0XHRvID0gb2xkW29sZFN0YXJ0XVxuXHRcdFx0XHRcdHYgPSB2bm9kZXNbc3RhcnRdXG5cdFx0XHRcdH1cblx0XHRcdFx0Ly8gYm90dG9tIHVwIG9uY2UgYWdhaW5cblx0XHRcdFx0d2hpbGUgKG9sZEVuZCA+PSBvbGRTdGFydCAmJiBlbmQgPj0gc3RhcnQpIHtcblx0XHRcdFx0XHRpZiAob2Uua2V5ICE9PSB2ZS5rZXkpIGJyZWFrXG5cdFx0XHRcdFx0aWYgKG9lICE9PSB2ZSkgdXBkYXRlTm9kZShwYXJlbnQsIG9lLCB2ZSwgaG9va3MsIG5leHRTaWJsaW5nLCBucylcblx0XHRcdFx0XHRpZiAodmUuZG9tICE9IG51bGwpIG5leHRTaWJsaW5nID0gdmUuZG9tXG5cdFx0XHRcdFx0b2xkRW5kLS0sIGVuZC0tXG5cdFx0XHRcdFx0b2UgPSBvbGRbb2xkRW5kXVxuXHRcdFx0XHRcdHZlID0gdm5vZGVzW2VuZF1cblx0XHRcdFx0fVxuXHRcdFx0XHRpZiAoc3RhcnQgPiBlbmQpIHJlbW92ZU5vZGVzKHBhcmVudCwgb2xkLCBvbGRTdGFydCwgb2xkRW5kICsgMSlcblx0XHRcdFx0ZWxzZSBpZiAob2xkU3RhcnQgPiBvbGRFbmQpIGNyZWF0ZU5vZGVzKHBhcmVudCwgdm5vZGVzLCBzdGFydCwgZW5kICsgMSwgaG9va3MsIG5leHRTaWJsaW5nLCBucylcblx0XHRcdFx0ZWxzZSB7XG5cdFx0XHRcdFx0Ly8gaW5zcGlyZWQgYnkgaXZpIGh0dHBzOi8vZ2l0aHViLmNvbS9pdmlqcy9pdmkvIGJ5IEJvcmlzIEthdWxcblx0XHRcdFx0XHR2YXIgb3JpZ2luYWxOZXh0U2libGluZyA9IG5leHRTaWJsaW5nLCB2bm9kZXNMZW5ndGggPSBlbmQgLSBzdGFydCArIDEsIG9sZEluZGljZXMgPSBuZXcgQXJyYXkodm5vZGVzTGVuZ3RoKSwgbGk9MCwgaT0wLCBwb3MgPSAyMTQ3NDgzNjQ3LCBtYXRjaGVkID0gMCwgbWFwLCBsaXNJbmRpY2VzXG5cdFx0XHRcdFx0Zm9yIChpID0gMDsgaSA8IHZub2Rlc0xlbmd0aDsgaSsrKSBvbGRJbmRpY2VzW2ldID0gLTFcblx0XHRcdFx0XHRmb3IgKGkgPSBlbmQ7IGkgPj0gc3RhcnQ7IGktLSkge1xuXHRcdFx0XHRcdFx0aWYgKG1hcCA9PSBudWxsKSBtYXAgPSBnZXRLZXlNYXAob2xkLCBvbGRTdGFydCwgb2xkRW5kICsgMSlcblx0XHRcdFx0XHRcdHZlID0gdm5vZGVzW2ldXG5cdFx0XHRcdFx0XHR2YXIgb2xkSW5kZXggPSBtYXBbdmUua2V5XVxuXHRcdFx0XHRcdFx0aWYgKG9sZEluZGV4ICE9IG51bGwpIHtcblx0XHRcdFx0XHRcdFx0cG9zID0gKG9sZEluZGV4IDwgcG9zKSA/IG9sZEluZGV4IDogLTEgLy8gYmVjb21lcyAtMSBpZiBub2RlcyB3ZXJlIHJlLW9yZGVyZWRcblx0XHRcdFx0XHRcdFx0b2xkSW5kaWNlc1tpLXN0YXJ0XSA9IG9sZEluZGV4XG5cdFx0XHRcdFx0XHRcdG9lID0gb2xkW29sZEluZGV4XVxuXHRcdFx0XHRcdFx0XHRvbGRbb2xkSW5kZXhdID0gbnVsbFxuXHRcdFx0XHRcdFx0XHRpZiAob2UgIT09IHZlKSB1cGRhdGVOb2RlKHBhcmVudCwgb2UsIHZlLCBob29rcywgbmV4dFNpYmxpbmcsIG5zKVxuXHRcdFx0XHRcdFx0XHRpZiAodmUuZG9tICE9IG51bGwpIG5leHRTaWJsaW5nID0gdmUuZG9tXG5cdFx0XHRcdFx0XHRcdG1hdGNoZWQrK1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRuZXh0U2libGluZyA9IG9yaWdpbmFsTmV4dFNpYmxpbmdcblx0XHRcdFx0XHRpZiAobWF0Y2hlZCAhPT0gb2xkRW5kIC0gb2xkU3RhcnQgKyAxKSByZW1vdmVOb2RlcyhwYXJlbnQsIG9sZCwgb2xkU3RhcnQsIG9sZEVuZCArIDEpXG5cdFx0XHRcdFx0aWYgKG1hdGNoZWQgPT09IDApIGNyZWF0ZU5vZGVzKHBhcmVudCwgdm5vZGVzLCBzdGFydCwgZW5kICsgMSwgaG9va3MsIG5leHRTaWJsaW5nLCBucylcblx0XHRcdFx0XHRlbHNlIHtcblx0XHRcdFx0XHRcdGlmIChwb3MgPT09IC0xKSB7XG5cdFx0XHRcdFx0XHRcdC8vIHRoZSBpbmRpY2VzIG9mIHRoZSBpbmRpY2VzIG9mIHRoZSBpdGVtcyB0aGF0IGFyZSBwYXJ0IG9mIHRoZVxuXHRcdFx0XHRcdFx0XHQvLyBsb25nZXN0IGluY3JlYXNpbmcgc3Vic2VxdWVuY2UgaW4gdGhlIG9sZEluZGljZXMgbGlzdFxuXHRcdFx0XHRcdFx0XHRsaXNJbmRpY2VzID0gbWFrZUxpc0luZGljZXMob2xkSW5kaWNlcylcblx0XHRcdFx0XHRcdFx0bGkgPSBsaXNJbmRpY2VzLmxlbmd0aCAtIDFcblx0XHRcdFx0XHRcdFx0Zm9yIChpID0gZW5kOyBpID49IHN0YXJ0OyBpLS0pIHtcblx0XHRcdFx0XHRcdFx0XHR2ID0gdm5vZGVzW2ldXG5cdFx0XHRcdFx0XHRcdFx0aWYgKG9sZEluZGljZXNbaS1zdGFydF0gPT09IC0xKSBjcmVhdGVOb2RlKHBhcmVudCwgdiwgaG9va3MsIG5zLCBuZXh0U2libGluZylcblx0XHRcdFx0XHRcdFx0XHRlbHNlIHtcblx0XHRcdFx0XHRcdFx0XHRcdGlmIChsaXNJbmRpY2VzW2xpXSA9PT0gaSAtIHN0YXJ0KSBsaS0tXG5cdFx0XHRcdFx0XHRcdFx0XHRlbHNlIG1vdmVOb2RlcyhwYXJlbnQsIHYsIG5leHRTaWJsaW5nKVxuXHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0XHRpZiAodi5kb20gIT0gbnVsbCkgbmV4dFNpYmxpbmcgPSB2bm9kZXNbaV0uZG9tXG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRcdGZvciAoaSA9IGVuZDsgaSA+PSBzdGFydDsgaS0tKSB7XG5cdFx0XHRcdFx0XHRcdFx0diA9IHZub2Rlc1tpXVxuXHRcdFx0XHRcdFx0XHRcdGlmIChvbGRJbmRpY2VzW2ktc3RhcnRdID09PSAtMSkgY3JlYXRlTm9kZShwYXJlbnQsIHYsIGhvb2tzLCBucywgbmV4dFNpYmxpbmcpXG5cdFx0XHRcdFx0XHRcdFx0aWYgKHYuZG9tICE9IG51bGwpIG5leHRTaWJsaW5nID0gdm5vZGVzW2ldLmRvbVxuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cdGZ1bmN0aW9uIHVwZGF0ZU5vZGUocGFyZW50LCBvbGQsIHZub2RlLCBob29rcywgbmV4dFNpYmxpbmcsIG5zKSB7XG5cdFx0dmFyIG9sZFRhZyA9IG9sZC50YWcsIHRhZyA9IHZub2RlLnRhZ1xuXHRcdGlmIChvbGRUYWcgPT09IHRhZykge1xuXHRcdFx0dm5vZGUuc3RhdGUgPSBvbGQuc3RhdGVcblx0XHRcdHZub2RlLmV2ZW50cyA9IG9sZC5ldmVudHNcblx0XHRcdGlmIChzaG91bGROb3RVcGRhdGUodm5vZGUsIG9sZCkpIHJldHVyblxuXHRcdFx0aWYgKHR5cGVvZiBvbGRUYWcgPT09IFwic3RyaW5nXCIpIHtcblx0XHRcdFx0aWYgKHZub2RlLmF0dHJzICE9IG51bGwpIHtcblx0XHRcdFx0XHR1cGRhdGVMaWZlY3ljbGUodm5vZGUuYXR0cnMsIHZub2RlLCBob29rcylcblx0XHRcdFx0fVxuXHRcdFx0XHRzd2l0Y2ggKG9sZFRhZykge1xuXHRcdFx0XHRcdGNhc2UgXCIjXCI6IHVwZGF0ZVRleHQob2xkLCB2bm9kZSk7IGJyZWFrXG5cdFx0XHRcdFx0Y2FzZSBcIjxcIjogdXBkYXRlSFRNTChwYXJlbnQsIG9sZCwgdm5vZGUsIG5zLCBuZXh0U2libGluZyk7IGJyZWFrXG5cdFx0XHRcdFx0Y2FzZSBcIltcIjogdXBkYXRlRnJhZ21lbnQocGFyZW50LCBvbGQsIHZub2RlLCBob29rcywgbmV4dFNpYmxpbmcsIG5zKTsgYnJlYWtcblx0XHRcdFx0XHRkZWZhdWx0OiB1cGRhdGVFbGVtZW50KG9sZCwgdm5vZGUsIGhvb2tzLCBucylcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0ZWxzZSB1cGRhdGVDb21wb25lbnQocGFyZW50LCBvbGQsIHZub2RlLCBob29rcywgbmV4dFNpYmxpbmcsIG5zKVxuXHRcdH1cblx0XHRlbHNlIHtcblx0XHRcdHJlbW92ZU5vZGUocGFyZW50LCBvbGQpXG5cdFx0XHRjcmVhdGVOb2RlKHBhcmVudCwgdm5vZGUsIGhvb2tzLCBucywgbmV4dFNpYmxpbmcpXG5cdFx0fVxuXHR9XG5cdGZ1bmN0aW9uIHVwZGF0ZVRleHQob2xkLCB2bm9kZSkge1xuXHRcdGlmIChvbGQuY2hpbGRyZW4udG9TdHJpbmcoKSAhPT0gdm5vZGUuY2hpbGRyZW4udG9TdHJpbmcoKSkge1xuXHRcdFx0b2xkLmRvbS5ub2RlVmFsdWUgPSB2bm9kZS5jaGlsZHJlblxuXHRcdH1cblx0XHR2bm9kZS5kb20gPSBvbGQuZG9tXG5cdH1cblx0ZnVuY3Rpb24gdXBkYXRlSFRNTChwYXJlbnQsIG9sZCwgdm5vZGUsIG5zLCBuZXh0U2libGluZykge1xuXHRcdGlmIChvbGQuY2hpbGRyZW4gIT09IHZub2RlLmNoaWxkcmVuKSB7XG5cdFx0XHRyZW1vdmVIVE1MKHBhcmVudCwgb2xkKVxuXHRcdFx0Y3JlYXRlSFRNTChwYXJlbnQsIHZub2RlLCBucywgbmV4dFNpYmxpbmcpXG5cdFx0fVxuXHRcdGVsc2Uge1xuXHRcdFx0dm5vZGUuZG9tID0gb2xkLmRvbVxuXHRcdFx0dm5vZGUuZG9tU2l6ZSA9IG9sZC5kb21TaXplXG5cdFx0XHR2bm9kZS5pbnN0YW5jZSA9IG9sZC5pbnN0YW5jZVxuXHRcdH1cblx0fVxuXHRmdW5jdGlvbiB1cGRhdGVGcmFnbWVudChwYXJlbnQsIG9sZCwgdm5vZGUsIGhvb2tzLCBuZXh0U2libGluZywgbnMpIHtcblx0XHR1cGRhdGVOb2RlcyhwYXJlbnQsIG9sZC5jaGlsZHJlbiwgdm5vZGUuY2hpbGRyZW4sIGhvb2tzLCBuZXh0U2libGluZywgbnMpXG5cdFx0dmFyIGRvbVNpemUgPSAwLCBjaGlsZHJlbiA9IHZub2RlLmNoaWxkcmVuXG5cdFx0dm5vZGUuZG9tID0gbnVsbFxuXHRcdGlmIChjaGlsZHJlbiAhPSBudWxsKSB7XG5cdFx0XHRmb3IgKHZhciBpID0gMDsgaSA8IGNoaWxkcmVuLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHRcdHZhciBjaGlsZCA9IGNoaWxkcmVuW2ldXG5cdFx0XHRcdGlmIChjaGlsZCAhPSBudWxsICYmIGNoaWxkLmRvbSAhPSBudWxsKSB7XG5cdFx0XHRcdFx0aWYgKHZub2RlLmRvbSA9PSBudWxsKSB2bm9kZS5kb20gPSBjaGlsZC5kb21cblx0XHRcdFx0XHRkb21TaXplICs9IGNoaWxkLmRvbVNpemUgfHwgMVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRpZiAoZG9tU2l6ZSAhPT0gMSkgdm5vZGUuZG9tU2l6ZSA9IGRvbVNpemVcblx0XHR9XG5cdH1cblx0ZnVuY3Rpb24gdXBkYXRlRWxlbWVudChvbGQsIHZub2RlLCBob29rcywgbnMpIHtcblx0XHR2YXIgZWxlbWVudCA9IHZub2RlLmRvbSA9IG9sZC5kb21cblx0XHRucyA9IGdldE5hbWVTcGFjZSh2bm9kZSkgfHwgbnNcblxuXHRcdGlmICh2bm9kZS50YWcgPT09IFwidGV4dGFyZWFcIikge1xuXHRcdFx0aWYgKHZub2RlLmF0dHJzID09IG51bGwpIHZub2RlLmF0dHJzID0ge31cblx0XHRcdGlmICh2bm9kZS50ZXh0ICE9IG51bGwpIHtcblx0XHRcdFx0dm5vZGUuYXR0cnMudmFsdWUgPSB2bm9kZS50ZXh0IC8vRklYTUUgaGFuZGxlIG11bHRpcGxlIGNoaWxkcmVuXG5cdFx0XHRcdHZub2RlLnRleHQgPSB1bmRlZmluZWRcblx0XHRcdH1cblx0XHR9XG5cdFx0dXBkYXRlQXR0cnModm5vZGUsIG9sZC5hdHRycywgdm5vZGUuYXR0cnMsIG5zKVxuXHRcdGlmICghbWF5YmVTZXRDb250ZW50RWRpdGFibGUodm5vZGUpKSB7XG5cdFx0XHRpZiAob2xkLnRleHQgIT0gbnVsbCAmJiB2bm9kZS50ZXh0ICE9IG51bGwgJiYgdm5vZGUudGV4dCAhPT0gXCJcIikge1xuXHRcdFx0XHRpZiAob2xkLnRleHQudG9TdHJpbmcoKSAhPT0gdm5vZGUudGV4dC50b1N0cmluZygpKSBvbGQuZG9tLmZpcnN0Q2hpbGQubm9kZVZhbHVlID0gdm5vZGUudGV4dFxuXHRcdFx0fVxuXHRcdFx0ZWxzZSB7XG5cdFx0XHRcdGlmIChvbGQudGV4dCAhPSBudWxsKSBvbGQuY2hpbGRyZW4gPSBbVm5vZGUoXCIjXCIsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCBvbGQudGV4dCwgdW5kZWZpbmVkLCBvbGQuZG9tLmZpcnN0Q2hpbGQpXVxuXHRcdFx0XHRpZiAodm5vZGUudGV4dCAhPSBudWxsKSB2bm9kZS5jaGlsZHJlbiA9IFtWbm9kZShcIiNcIiwgdW5kZWZpbmVkLCB1bmRlZmluZWQsIHZub2RlLnRleHQsIHVuZGVmaW5lZCwgdW5kZWZpbmVkKV1cblx0XHRcdFx0dXBkYXRlTm9kZXMoZWxlbWVudCwgb2xkLmNoaWxkcmVuLCB2bm9kZS5jaGlsZHJlbiwgaG9va3MsIG51bGwsIG5zKVxuXHRcdFx0fVxuXHRcdH1cblx0fVxuXHRmdW5jdGlvbiB1cGRhdGVDb21wb25lbnQocGFyZW50LCBvbGQsIHZub2RlLCBob29rcywgbmV4dFNpYmxpbmcsIG5zKSB7XG5cdFx0dm5vZGUuaW5zdGFuY2UgPSBWbm9kZS5ub3JtYWxpemUoY2FsbEhvb2suY2FsbCh2bm9kZS5zdGF0ZS52aWV3LCB2bm9kZSkpXG5cdFx0aWYgKHZub2RlLmluc3RhbmNlID09PSB2bm9kZSkgdGhyb3cgRXJyb3IoXCJBIHZpZXcgY2Fubm90IHJldHVybiB0aGUgdm5vZGUgaXQgcmVjZWl2ZWQgYXMgYXJndW1lbnRcIilcblx0XHR1cGRhdGVMaWZlY3ljbGUodm5vZGUuc3RhdGUsIHZub2RlLCBob29rcylcblx0XHRpZiAodm5vZGUuYXR0cnMgIT0gbnVsbCkgdXBkYXRlTGlmZWN5Y2xlKHZub2RlLmF0dHJzLCB2bm9kZSwgaG9va3MpXG5cdFx0aWYgKHZub2RlLmluc3RhbmNlICE9IG51bGwpIHtcblx0XHRcdGlmIChvbGQuaW5zdGFuY2UgPT0gbnVsbCkgY3JlYXRlTm9kZShwYXJlbnQsIHZub2RlLmluc3RhbmNlLCBob29rcywgbnMsIG5leHRTaWJsaW5nKVxuXHRcdFx0ZWxzZSB1cGRhdGVOb2RlKHBhcmVudCwgb2xkLmluc3RhbmNlLCB2bm9kZS5pbnN0YW5jZSwgaG9va3MsIG5leHRTaWJsaW5nLCBucylcblx0XHRcdHZub2RlLmRvbSA9IHZub2RlLmluc3RhbmNlLmRvbVxuXHRcdFx0dm5vZGUuZG9tU2l6ZSA9IHZub2RlLmluc3RhbmNlLmRvbVNpemVcblx0XHR9XG5cdFx0ZWxzZSBpZiAob2xkLmluc3RhbmNlICE9IG51bGwpIHtcblx0XHRcdHJlbW92ZU5vZGUocGFyZW50LCBvbGQuaW5zdGFuY2UpXG5cdFx0XHR2bm9kZS5kb20gPSB1bmRlZmluZWRcblx0XHRcdHZub2RlLmRvbVNpemUgPSAwXG5cdFx0fVxuXHRcdGVsc2Uge1xuXHRcdFx0dm5vZGUuZG9tID0gb2xkLmRvbVxuXHRcdFx0dm5vZGUuZG9tU2l6ZSA9IG9sZC5kb21TaXplXG5cdFx0fVxuXHR9XG5cdGZ1bmN0aW9uIGdldEtleU1hcCh2bm9kZXMsIHN0YXJ0LCBlbmQpIHtcblx0XHR2YXIgbWFwID0gT2JqZWN0LmNyZWF0ZShudWxsKVxuXHRcdGZvciAoOyBzdGFydCA8IGVuZDsgc3RhcnQrKykge1xuXHRcdFx0dmFyIHZub2RlID0gdm5vZGVzW3N0YXJ0XVxuXHRcdFx0aWYgKHZub2RlICE9IG51bGwpIHtcblx0XHRcdFx0dmFyIGtleSA9IHZub2RlLmtleVxuXHRcdFx0XHRpZiAoa2V5ICE9IG51bGwpIG1hcFtrZXldID0gc3RhcnRcblx0XHRcdH1cblx0XHR9XG5cdFx0cmV0dXJuIG1hcFxuXHR9XG5cdC8vIExpZnRlZCBmcm9tIGl2aSBodHRwczovL2dpdGh1Yi5jb20vaXZpanMvaXZpL1xuXHQvLyB0YWtlcyBhIGxpc3Qgb2YgdW5pcXVlIG51bWJlcnMgKC0xIGlzIHNwZWNpYWwgYW5kIGNhblxuXHQvLyBvY2N1ciBtdWx0aXBsZSB0aW1lcykgYW5kIHJldHVybnMgYW4gYXJyYXkgd2l0aCB0aGUgaW5kaWNlc1xuXHQvLyBvZiB0aGUgaXRlbXMgdGhhdCBhcmUgcGFydCBvZiB0aGUgbG9uZ2VzdCBpbmNyZWFzaW5nXG5cdC8vIHN1YnNlcXVlY2Vcblx0dmFyIGxpc1RlbXAgPSBbXVxuXHRmdW5jdGlvbiBtYWtlTGlzSW5kaWNlcyhhKSB7XG5cdFx0dmFyIHJlc3VsdCA9IFswXVxuXHRcdHZhciB1ID0gMCwgdiA9IDAsIGkgPSAwXG5cdFx0dmFyIGlsID0gbGlzVGVtcC5sZW5ndGggPSBhLmxlbmd0aFxuXHRcdGZvciAodmFyIGkgPSAwOyBpIDwgaWw7IGkrKykgbGlzVGVtcFtpXSA9IGFbaV1cblx0XHRmb3IgKHZhciBpID0gMDsgaSA8IGlsOyArK2kpIHtcblx0XHRcdGlmIChhW2ldID09PSAtMSkgY29udGludWVcblx0XHRcdHZhciBqID0gcmVzdWx0W3Jlc3VsdC5sZW5ndGggLSAxXVxuXHRcdFx0aWYgKGFbal0gPCBhW2ldKSB7XG5cdFx0XHRcdGxpc1RlbXBbaV0gPSBqXG5cdFx0XHRcdHJlc3VsdC5wdXNoKGkpXG5cdFx0XHRcdGNvbnRpbnVlXG5cdFx0XHR9XG5cdFx0XHR1ID0gMFxuXHRcdFx0diA9IHJlc3VsdC5sZW5ndGggLSAxXG5cdFx0XHR3aGlsZSAodSA8IHYpIHtcblx0XHRcdFx0Ly8gRmFzdCBpbnRlZ2VyIGF2ZXJhZ2Ugd2l0aG91dCBvdmVyZmxvdy5cblx0XHRcdFx0Ly8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWJpdHdpc2Vcblx0XHRcdFx0dmFyIGMgPSAodSA+Pj4gMSkgKyAodiA+Pj4gMSkgKyAodSAmIHYgJiAxKVxuXHRcdFx0XHRpZiAoYVtyZXN1bHRbY11dIDwgYVtpXSkge1xuXHRcdFx0XHRcdHUgPSBjICsgMVxuXHRcdFx0XHR9XG5cdFx0XHRcdGVsc2Uge1xuXHRcdFx0XHRcdHYgPSBjXG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdGlmIChhW2ldIDwgYVtyZXN1bHRbdV1dKSB7XG5cdFx0XHRcdGlmICh1ID4gMCkgbGlzVGVtcFtpXSA9IHJlc3VsdFt1IC0gMV1cblx0XHRcdFx0cmVzdWx0W3VdID0gaVxuXHRcdFx0fVxuXHRcdH1cblx0XHR1ID0gcmVzdWx0Lmxlbmd0aFxuXHRcdHYgPSByZXN1bHRbdSAtIDFdXG5cdFx0d2hpbGUgKHUtLSA+IDApIHtcblx0XHRcdHJlc3VsdFt1XSA9IHZcblx0XHRcdHYgPSBsaXNUZW1wW3ZdXG5cdFx0fVxuXHRcdGxpc1RlbXAubGVuZ3RoID0gMFxuXHRcdHJldHVybiByZXN1bHRcblx0fVxuXG5cdGZ1bmN0aW9uIGdldE5leHRTaWJsaW5nKHZub2RlcywgaSwgbmV4dFNpYmxpbmcpIHtcblx0XHRmb3IgKDsgaSA8IHZub2Rlcy5sZW5ndGg7IGkrKykge1xuXHRcdFx0aWYgKHZub2Rlc1tpXSAhPSBudWxsICYmIHZub2Rlc1tpXS5kb20gIT0gbnVsbCkgcmV0dXJuIHZub2Rlc1tpXS5kb21cblx0XHR9XG5cdFx0cmV0dXJuIG5leHRTaWJsaW5nXG5cdH1cblxuXHQvLyBUaGlzIGNvdmVycyBhIHJlYWxseSBzcGVjaWZpYyBlZGdlIGNhc2U6XG5cdC8vIC0gUGFyZW50IG5vZGUgaXMga2V5ZWQgYW5kIGNvbnRhaW5zIGNoaWxkXG5cdC8vIC0gQ2hpbGQgaXMgcmVtb3ZlZCwgcmV0dXJucyB1bnJlc29sdmVkIHByb21pc2UgaW4gYG9uYmVmb3JlcmVtb3ZlYFxuXHQvLyAtIFBhcmVudCBub2RlIGlzIG1vdmVkIGluIGtleWVkIGRpZmZcblx0Ly8gLSBSZW1haW5pbmcgY2hpbGRyZW4gc3RpbGwgbmVlZCBtb3ZlZCBhcHByb3ByaWF0ZWx5XG5cdC8vXG5cdC8vIElkZWFsbHksIEknZCB0cmFjayByZW1vdmVkIG5vZGVzIGFzIHdlbGwsIGJ1dCB0aGF0IGludHJvZHVjZXMgYSBsb3QgbW9yZVxuXHQvLyBjb21wbGV4aXR5IGFuZCBJJ20gbm90IGV4YWN0bHkgaW50ZXJlc3RlZCBpbiBkb2luZyB0aGF0LlxuXHRmdW5jdGlvbiBtb3ZlTm9kZXMocGFyZW50LCB2bm9kZSwgbmV4dFNpYmxpbmcpIHtcblx0XHR2YXIgZnJhZyA9ICRkb2MuY3JlYXRlRG9jdW1lbnRGcmFnbWVudCgpXG5cdFx0bW92ZUNoaWxkVG9GcmFnKHBhcmVudCwgZnJhZywgdm5vZGUpXG5cdFx0aW5zZXJ0Tm9kZShwYXJlbnQsIGZyYWcsIG5leHRTaWJsaW5nKVxuXHR9XG5cdGZ1bmN0aW9uIG1vdmVDaGlsZFRvRnJhZyhwYXJlbnQsIGZyYWcsIHZub2RlKSB7XG5cdFx0Ly8gRG9kZ2UgdGhlIHJlY3Vyc2lvbiBvdmVyaGVhZCBpbiBhIGZldyBvZiB0aGUgbW9zdCBjb21tb24gY2FzZXMuXG5cdFx0d2hpbGUgKHZub2RlLmRvbSAhPSBudWxsICYmIHZub2RlLmRvbS5wYXJlbnROb2RlID09PSBwYXJlbnQpIHtcblx0XHRcdGlmICh0eXBlb2Ygdm5vZGUudGFnICE9PSBcInN0cmluZ1wiKSB7XG5cdFx0XHRcdHZub2RlID0gdm5vZGUuaW5zdGFuY2Vcblx0XHRcdFx0aWYgKHZub2RlICE9IG51bGwpIGNvbnRpbnVlXG5cdFx0XHR9IGVsc2UgaWYgKHZub2RlLnRhZyA9PT0gXCI8XCIpIHtcblx0XHRcdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCB2bm9kZS5pbnN0YW5jZS5sZW5ndGg7IGkrKykge1xuXHRcdFx0XHRcdGZyYWcuYXBwZW5kQ2hpbGQodm5vZGUuaW5zdGFuY2VbaV0pXG5cdFx0XHRcdH1cblx0XHRcdH0gZWxzZSBpZiAodm5vZGUudGFnICE9PSBcIltcIikge1xuXHRcdFx0XHQvLyBEb24ndCByZWN1cnNlIGZvciB0ZXh0IG5vZGVzICpvciogZWxlbWVudHMsIGp1c3QgZnJhZ21lbnRzXG5cdFx0XHRcdGZyYWcuYXBwZW5kQ2hpbGQodm5vZGUuZG9tKVxuXHRcdFx0fSBlbHNlIGlmICh2bm9kZS5jaGlsZHJlbi5sZW5ndGggPT09IDEpIHtcblx0XHRcdFx0dm5vZGUgPSB2bm9kZS5jaGlsZHJlblswXVxuXHRcdFx0XHRpZiAodm5vZGUgIT0gbnVsbCkgY29udGludWVcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGZvciAodmFyIGkgPSAwOyBpIDwgdm5vZGUuY2hpbGRyZW4ubGVuZ3RoOyBpKyspIHtcblx0XHRcdFx0XHR2YXIgY2hpbGQgPSB2bm9kZS5jaGlsZHJlbltpXVxuXHRcdFx0XHRcdGlmIChjaGlsZCAhPSBudWxsKSBtb3ZlQ2hpbGRUb0ZyYWcocGFyZW50LCBmcmFnLCBjaGlsZClcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0YnJlYWtcblx0XHR9XG5cdH1cblxuXHRmdW5jdGlvbiBpbnNlcnROb2RlKHBhcmVudCwgZG9tLCBuZXh0U2libGluZykge1xuXHRcdGlmIChuZXh0U2libGluZyAhPSBudWxsKSBwYXJlbnQuaW5zZXJ0QmVmb3JlKGRvbSwgbmV4dFNpYmxpbmcpXG5cdFx0ZWxzZSBwYXJlbnQuYXBwZW5kQ2hpbGQoZG9tKVxuXHR9XG5cblx0ZnVuY3Rpb24gbWF5YmVTZXRDb250ZW50RWRpdGFibGUodm5vZGUpIHtcblx0XHRpZiAodm5vZGUuYXR0cnMgPT0gbnVsbCB8fCAoXG5cdFx0XHR2bm9kZS5hdHRycy5jb250ZW50ZWRpdGFibGUgPT0gbnVsbCAmJiAvLyBhdHRyaWJ1dGVcblx0XHRcdHZub2RlLmF0dHJzLmNvbnRlbnRFZGl0YWJsZSA9PSBudWxsIC8vIHByb3BlcnR5XG5cdFx0KSkgcmV0dXJuIGZhbHNlXG5cdFx0dmFyIGNoaWxkcmVuID0gdm5vZGUuY2hpbGRyZW5cblx0XHRpZiAoY2hpbGRyZW4gIT0gbnVsbCAmJiBjaGlsZHJlbi5sZW5ndGggPT09IDEgJiYgY2hpbGRyZW5bMF0udGFnID09PSBcIjxcIikge1xuXHRcdFx0dmFyIGNvbnRlbnQgPSBjaGlsZHJlblswXS5jaGlsZHJlblxuXHRcdFx0aWYgKHZub2RlLmRvbS5pbm5lckhUTUwgIT09IGNvbnRlbnQpIHZub2RlLmRvbS5pbm5lckhUTUwgPSBjb250ZW50XG5cdFx0fVxuXHRcdGVsc2UgaWYgKHZub2RlLnRleHQgIT0gbnVsbCB8fCBjaGlsZHJlbiAhPSBudWxsICYmIGNoaWxkcmVuLmxlbmd0aCAhPT0gMCkgdGhyb3cgbmV3IEVycm9yKFwiQ2hpbGQgbm9kZSBvZiBhIGNvbnRlbnRlZGl0YWJsZSBtdXN0IGJlIHRydXN0ZWRcIilcblx0XHRyZXR1cm4gdHJ1ZVxuXHR9XG5cblx0Ly9yZW1vdmVcblx0ZnVuY3Rpb24gcmVtb3ZlTm9kZXMocGFyZW50LCB2bm9kZXMsIHN0YXJ0LCBlbmQpIHtcblx0XHRmb3IgKHZhciBpID0gc3RhcnQ7IGkgPCBlbmQ7IGkrKykge1xuXHRcdFx0dmFyIHZub2RlID0gdm5vZGVzW2ldXG5cdFx0XHRpZiAodm5vZGUgIT0gbnVsbCkgcmVtb3ZlTm9kZShwYXJlbnQsIHZub2RlKVxuXHRcdH1cblx0fVxuXHRmdW5jdGlvbiByZW1vdmVOb2RlKHBhcmVudCwgdm5vZGUpIHtcblx0XHR2YXIgbWFzayA9IDBcblx0XHR2YXIgb3JpZ2luYWwgPSB2bm9kZS5zdGF0ZVxuXHRcdHZhciBzdGF0ZVJlc3VsdCwgYXR0cnNSZXN1bHRcblx0XHRpZiAodHlwZW9mIHZub2RlLnRhZyAhPT0gXCJzdHJpbmdcIiAmJiB0eXBlb2Ygdm5vZGUuc3RhdGUub25iZWZvcmVyZW1vdmUgPT09IFwiZnVuY3Rpb25cIikge1xuXHRcdFx0dmFyIHJlc3VsdCA9IGNhbGxIb29rLmNhbGwodm5vZGUuc3RhdGUub25iZWZvcmVyZW1vdmUsIHZub2RlKVxuXHRcdFx0aWYgKHJlc3VsdCAhPSBudWxsICYmIHR5cGVvZiByZXN1bHQudGhlbiA9PT0gXCJmdW5jdGlvblwiKSB7XG5cdFx0XHRcdG1hc2sgPSAxXG5cdFx0XHRcdHN0YXRlUmVzdWx0ID0gcmVzdWx0XG5cdFx0XHR9XG5cdFx0fVxuXHRcdGlmICh2bm9kZS5hdHRycyAmJiB0eXBlb2Ygdm5vZGUuYXR0cnMub25iZWZvcmVyZW1vdmUgPT09IFwiZnVuY3Rpb25cIikge1xuXHRcdFx0dmFyIHJlc3VsdCA9IGNhbGxIb29rLmNhbGwodm5vZGUuYXR0cnMub25iZWZvcmVyZW1vdmUsIHZub2RlKVxuXHRcdFx0aWYgKHJlc3VsdCAhPSBudWxsICYmIHR5cGVvZiByZXN1bHQudGhlbiA9PT0gXCJmdW5jdGlvblwiKSB7XG5cdFx0XHRcdC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1iaXR3aXNlXG5cdFx0XHRcdG1hc2sgfD0gMlxuXHRcdFx0XHRhdHRyc1Jlc3VsdCA9IHJlc3VsdFxuXHRcdFx0fVxuXHRcdH1cblx0XHRjaGVja1N0YXRlKHZub2RlLCBvcmlnaW5hbClcblxuXHRcdC8vIElmIHdlIGNhbiwgdHJ5IHRvIGZhc3QtcGF0aCBpdCBhbmQgYXZvaWQgYWxsIHRoZSBvdmVyaGVhZCBvZiBhd2FpdGluZ1xuXHRcdGlmICghbWFzaykge1xuXHRcdFx0b25yZW1vdmUodm5vZGUpXG5cdFx0XHRyZW1vdmVDaGlsZChwYXJlbnQsIHZub2RlKVxuXHRcdH0gZWxzZSB7XG5cdFx0XHRpZiAoc3RhdGVSZXN1bHQgIT0gbnVsbCkge1xuXHRcdFx0XHR2YXIgbmV4dCA9IGZ1bmN0aW9uICgpIHtcblx0XHRcdFx0XHQvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tYml0d2lzZVxuXHRcdFx0XHRcdGlmIChtYXNrICYgMSkgeyBtYXNrICY9IDI7IGlmICghbWFzaykgcmVhbGx5UmVtb3ZlKCkgfVxuXHRcdFx0XHR9XG5cdFx0XHRcdHN0YXRlUmVzdWx0LnRoZW4obmV4dCwgbmV4dClcblx0XHRcdH1cblx0XHRcdGlmIChhdHRyc1Jlc3VsdCAhPSBudWxsKSB7XG5cdFx0XHRcdHZhciBuZXh0ID0gZnVuY3Rpb24gKCkge1xuXHRcdFx0XHRcdC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1iaXR3aXNlXG5cdFx0XHRcdFx0aWYgKG1hc2sgJiAyKSB7IG1hc2sgJj0gMTsgaWYgKCFtYXNrKSByZWFsbHlSZW1vdmUoKSB9XG5cdFx0XHRcdH1cblx0XHRcdFx0YXR0cnNSZXN1bHQudGhlbihuZXh0LCBuZXh0KVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdGZ1bmN0aW9uIHJlYWxseVJlbW92ZSgpIHtcblx0XHRcdGNoZWNrU3RhdGUodm5vZGUsIG9yaWdpbmFsKVxuXHRcdFx0b25yZW1vdmUodm5vZGUpXG5cdFx0XHRyZW1vdmVDaGlsZChwYXJlbnQsIHZub2RlKVxuXHRcdH1cblx0fVxuXHRmdW5jdGlvbiByZW1vdmVIVE1MKHBhcmVudCwgdm5vZGUpIHtcblx0XHRmb3IgKHZhciBpID0gMDsgaSA8IHZub2RlLmluc3RhbmNlLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHRwYXJlbnQucmVtb3ZlQ2hpbGQodm5vZGUuaW5zdGFuY2VbaV0pXG5cdFx0fVxuXHR9XG5cdGZ1bmN0aW9uIHJlbW92ZUNoaWxkKHBhcmVudCwgdm5vZGUpIHtcblx0XHQvLyBEb2RnZSB0aGUgcmVjdXJzaW9uIG92ZXJoZWFkIGluIGEgZmV3IG9mIHRoZSBtb3N0IGNvbW1vbiBjYXNlcy5cblx0XHR3aGlsZSAodm5vZGUuZG9tICE9IG51bGwgJiYgdm5vZGUuZG9tLnBhcmVudE5vZGUgPT09IHBhcmVudCkge1xuXHRcdFx0aWYgKHR5cGVvZiB2bm9kZS50YWcgIT09IFwic3RyaW5nXCIpIHtcblx0XHRcdFx0dm5vZGUgPSB2bm9kZS5pbnN0YW5jZVxuXHRcdFx0XHRpZiAodm5vZGUgIT0gbnVsbCkgY29udGludWVcblx0XHRcdH0gZWxzZSBpZiAodm5vZGUudGFnID09PSBcIjxcIikge1xuXHRcdFx0XHRyZW1vdmVIVE1MKHBhcmVudCwgdm5vZGUpXG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRpZiAodm5vZGUudGFnICE9PSBcIltcIikge1xuXHRcdFx0XHRcdHBhcmVudC5yZW1vdmVDaGlsZCh2bm9kZS5kb20pXG5cdFx0XHRcdFx0aWYgKCFBcnJheS5pc0FycmF5KHZub2RlLmNoaWxkcmVuKSkgYnJlYWtcblx0XHRcdFx0fVxuXHRcdFx0XHRpZiAodm5vZGUuY2hpbGRyZW4ubGVuZ3RoID09PSAxKSB7XG5cdFx0XHRcdFx0dm5vZGUgPSB2bm9kZS5jaGlsZHJlblswXVxuXHRcdFx0XHRcdGlmICh2bm9kZSAhPSBudWxsKSBjb250aW51ZVxuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdGZvciAodmFyIGkgPSAwOyBpIDwgdm5vZGUuY2hpbGRyZW4ubGVuZ3RoOyBpKyspIHtcblx0XHRcdFx0XHRcdHZhciBjaGlsZCA9IHZub2RlLmNoaWxkcmVuW2ldXG5cdFx0XHRcdFx0XHRpZiAoY2hpbGQgIT0gbnVsbCkgcmVtb3ZlQ2hpbGQocGFyZW50LCBjaGlsZClcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdGJyZWFrXG5cdFx0fVxuXHR9XG5cdGZ1bmN0aW9uIG9ucmVtb3ZlKHZub2RlKSB7XG5cdFx0aWYgKHR5cGVvZiB2bm9kZS50YWcgIT09IFwic3RyaW5nXCIgJiYgdHlwZW9mIHZub2RlLnN0YXRlLm9ucmVtb3ZlID09PSBcImZ1bmN0aW9uXCIpIGNhbGxIb29rLmNhbGwodm5vZGUuc3RhdGUub25yZW1vdmUsIHZub2RlKVxuXHRcdGlmICh2bm9kZS5hdHRycyAmJiB0eXBlb2Ygdm5vZGUuYXR0cnMub25yZW1vdmUgPT09IFwiZnVuY3Rpb25cIikgY2FsbEhvb2suY2FsbCh2bm9kZS5hdHRycy5vbnJlbW92ZSwgdm5vZGUpXG5cdFx0aWYgKHR5cGVvZiB2bm9kZS50YWcgIT09IFwic3RyaW5nXCIpIHtcblx0XHRcdGlmICh2bm9kZS5pbnN0YW5jZSAhPSBudWxsKSBvbnJlbW92ZSh2bm9kZS5pbnN0YW5jZSlcblx0XHR9IGVsc2Uge1xuXHRcdFx0dmFyIGNoaWxkcmVuID0gdm5vZGUuY2hpbGRyZW5cblx0XHRcdGlmIChBcnJheS5pc0FycmF5KGNoaWxkcmVuKSkge1xuXHRcdFx0XHRmb3IgKHZhciBpID0gMDsgaSA8IGNoaWxkcmVuLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHRcdFx0dmFyIGNoaWxkID0gY2hpbGRyZW5baV1cblx0XHRcdFx0XHRpZiAoY2hpbGQgIT0gbnVsbCkgb25yZW1vdmUoY2hpbGQpXG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHQvL2F0dHJzXG5cdGZ1bmN0aW9uIHNldEF0dHJzKHZub2RlLCBhdHRycywgbnMpIHtcblx0XHRmb3IgKHZhciBrZXkgaW4gYXR0cnMpIHtcblx0XHRcdHNldEF0dHIodm5vZGUsIGtleSwgbnVsbCwgYXR0cnNba2V5XSwgbnMpXG5cdFx0fVxuXHR9XG5cdGZ1bmN0aW9uIHNldEF0dHIodm5vZGUsIGtleSwgb2xkLCB2YWx1ZSwgbnMpIHtcblx0XHRpZiAoa2V5ID09PSBcImtleVwiIHx8IGtleSA9PT0gXCJpc1wiIHx8IHZhbHVlID09IG51bGwgfHwgaXNMaWZlY3ljbGVNZXRob2Qoa2V5KSB8fCAob2xkID09PSB2YWx1ZSAmJiAhaXNGb3JtQXR0cmlidXRlKHZub2RlLCBrZXkpKSAmJiB0eXBlb2YgdmFsdWUgIT09IFwib2JqZWN0XCIpIHJldHVyblxuXHRcdGlmIChrZXlbMF0gPT09IFwib1wiICYmIGtleVsxXSA9PT0gXCJuXCIpIHJldHVybiB1cGRhdGVFdmVudCh2bm9kZSwga2V5LCB2YWx1ZSlcblx0XHRpZiAoa2V5LnNsaWNlKDAsIDYpID09PSBcInhsaW5rOlwiKSB2bm9kZS5kb20uc2V0QXR0cmlidXRlTlMoXCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hsaW5rXCIsIGtleS5zbGljZSg2KSwgdmFsdWUpXG5cdFx0ZWxzZSBpZiAoa2V5ID09PSBcInN0eWxlXCIpIHVwZGF0ZVN0eWxlKHZub2RlLmRvbSwgb2xkLCB2YWx1ZSlcblx0XHRlbHNlIGlmIChoYXNQcm9wZXJ0eUtleSh2bm9kZSwga2V5LCBucykpIHtcblx0XHRcdGlmIChrZXkgPT09IFwidmFsdWVcIikge1xuXHRcdFx0XHQvLyBPbmx5IGRvIHRoZSBjb2VyY2lvbiBpZiB3ZSdyZSBhY3R1YWxseSBnb2luZyB0byBjaGVjayB0aGUgdmFsdWUuXG5cdFx0XHRcdC8qIGVzbGludC1kaXNhYmxlIG5vLWltcGxpY2l0LWNvZXJjaW9uICovXG5cdFx0XHRcdC8vc2V0dGluZyBpbnB1dFt2YWx1ZV0gdG8gc2FtZSB2YWx1ZSBieSB0eXBpbmcgb24gZm9jdXNlZCBlbGVtZW50IG1vdmVzIGN1cnNvciB0byBlbmQgaW4gQ2hyb21lXG5cdFx0XHRcdGlmICgodm5vZGUudGFnID09PSBcImlucHV0XCIgfHwgdm5vZGUudGFnID09PSBcInRleHRhcmVhXCIpICYmIHZub2RlLmRvbS52YWx1ZSA9PT0gXCJcIiArIHZhbHVlICYmIHZub2RlLmRvbSA9PT0gYWN0aXZlRWxlbWVudCgpKSByZXR1cm5cblx0XHRcdFx0Ly9zZXR0aW5nIHNlbGVjdFt2YWx1ZV0gdG8gc2FtZSB2YWx1ZSB3aGlsZSBoYXZpbmcgc2VsZWN0IG9wZW4gYmxpbmtzIHNlbGVjdCBkcm9wZG93biBpbiBDaHJvbWVcblx0XHRcdFx0aWYgKHZub2RlLnRhZyA9PT0gXCJzZWxlY3RcIiAmJiBvbGQgIT09IG51bGwgJiYgdm5vZGUuZG9tLnZhbHVlID09PSBcIlwiICsgdmFsdWUpIHJldHVyblxuXHRcdFx0XHQvL3NldHRpbmcgb3B0aW9uW3ZhbHVlXSB0byBzYW1lIHZhbHVlIHdoaWxlIGhhdmluZyBzZWxlY3Qgb3BlbiBibGlua3Mgc2VsZWN0IGRyb3Bkb3duIGluIENocm9tZVxuXHRcdFx0XHRpZiAodm5vZGUudGFnID09PSBcIm9wdGlvblwiICYmIG9sZCAhPT0gbnVsbCAmJiB2bm9kZS5kb20udmFsdWUgPT09IFwiXCIgKyB2YWx1ZSkgcmV0dXJuXG5cdFx0XHRcdC8qIGVzbGludC1lbmFibGUgbm8taW1wbGljaXQtY29lcmNpb24gKi9cblx0XHRcdH1cblx0XHRcdC8vIElmIHlvdSBhc3NpZ24gYW4gaW5wdXQgdHlwZSB0aGF0IGlzIG5vdCBzdXBwb3J0ZWQgYnkgSUUgMTEgd2l0aCBhbiBhc3NpZ25tZW50IGV4cHJlc3Npb24sIGFuIGVycm9yIHdpbGwgb2NjdXIuXG5cdFx0XHRpZiAodm5vZGUudGFnID09PSBcImlucHV0XCIgJiYga2V5ID09PSBcInR5cGVcIikgdm5vZGUuZG9tLnNldEF0dHJpYnV0ZShrZXksIHZhbHVlKVxuXHRcdFx0ZWxzZSB2bm9kZS5kb21ba2V5XSA9IHZhbHVlXG5cdFx0fSBlbHNlIHtcblx0XHRcdGlmICh0eXBlb2YgdmFsdWUgPT09IFwiYm9vbGVhblwiKSB7XG5cdFx0XHRcdGlmICh2YWx1ZSkgdm5vZGUuZG9tLnNldEF0dHJpYnV0ZShrZXksIFwiXCIpXG5cdFx0XHRcdGVsc2Ugdm5vZGUuZG9tLnJlbW92ZUF0dHJpYnV0ZShrZXkpXG5cdFx0XHR9XG5cdFx0XHRlbHNlIHZub2RlLmRvbS5zZXRBdHRyaWJ1dGUoa2V5ID09PSBcImNsYXNzTmFtZVwiID8gXCJjbGFzc1wiIDoga2V5LCB2YWx1ZSlcblx0XHR9XG5cdH1cblx0ZnVuY3Rpb24gcmVtb3ZlQXR0cih2bm9kZSwga2V5LCBvbGQsIG5zKSB7XG5cdFx0aWYgKGtleSA9PT0gXCJrZXlcIiB8fCBrZXkgPT09IFwiaXNcIiB8fCBvbGQgPT0gbnVsbCB8fCBpc0xpZmVjeWNsZU1ldGhvZChrZXkpKSByZXR1cm5cblx0XHRpZiAoa2V5WzBdID09PSBcIm9cIiAmJiBrZXlbMV0gPT09IFwiblwiICYmICFpc0xpZmVjeWNsZU1ldGhvZChrZXkpKSB1cGRhdGVFdmVudCh2bm9kZSwga2V5LCB1bmRlZmluZWQpXG5cdFx0ZWxzZSBpZiAoa2V5ID09PSBcInN0eWxlXCIpIHVwZGF0ZVN0eWxlKHZub2RlLmRvbSwgb2xkLCBudWxsKVxuXHRcdGVsc2UgaWYgKFxuXHRcdFx0aGFzUHJvcGVydHlLZXkodm5vZGUsIGtleSwgbnMpXG5cdFx0XHQmJiBrZXkgIT09IFwiY2xhc3NOYW1lXCJcblx0XHRcdCYmICEoa2V5ID09PSBcInZhbHVlXCIgJiYgKFxuXHRcdFx0XHR2bm9kZS50YWcgPT09IFwib3B0aW9uXCJcblx0XHRcdFx0fHwgdm5vZGUudGFnID09PSBcInNlbGVjdFwiICYmIHZub2RlLmRvbS5zZWxlY3RlZEluZGV4ID09PSAtMSAmJiB2bm9kZS5kb20gPT09IGFjdGl2ZUVsZW1lbnQoKVxuXHRcdFx0KSlcblx0XHRcdCYmICEodm5vZGUudGFnID09PSBcImlucHV0XCIgJiYga2V5ID09PSBcInR5cGVcIilcblx0XHQpIHtcblx0XHRcdHZub2RlLmRvbVtrZXldID0gbnVsbFxuXHRcdH0gZWxzZSB7XG5cdFx0XHR2YXIgbnNMYXN0SW5kZXggPSBrZXkuaW5kZXhPZihcIjpcIilcblx0XHRcdGlmIChuc0xhc3RJbmRleCAhPT0gLTEpIGtleSA9IGtleS5zbGljZShuc0xhc3RJbmRleCArIDEpXG5cdFx0XHRpZiAob2xkICE9PSBmYWxzZSkgdm5vZGUuZG9tLnJlbW92ZUF0dHJpYnV0ZShrZXkgPT09IFwiY2xhc3NOYW1lXCIgPyBcImNsYXNzXCIgOiBrZXkpXG5cdFx0fVxuXHR9XG5cdGZ1bmN0aW9uIHNldExhdGVTZWxlY3RBdHRycyh2bm9kZSwgYXR0cnMpIHtcblx0XHRpZiAoXCJ2YWx1ZVwiIGluIGF0dHJzKSB7XG5cdFx0XHRpZihhdHRycy52YWx1ZSA9PT0gbnVsbCkge1xuXHRcdFx0XHRpZiAodm5vZGUuZG9tLnNlbGVjdGVkSW5kZXggIT09IC0xKSB2bm9kZS5kb20udmFsdWUgPSBudWxsXG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHR2YXIgbm9ybWFsaXplZCA9IFwiXCIgKyBhdHRycy52YWx1ZSAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLWltcGxpY2l0LWNvZXJjaW9uXG5cdFx0XHRcdGlmICh2bm9kZS5kb20udmFsdWUgIT09IG5vcm1hbGl6ZWQgfHwgdm5vZGUuZG9tLnNlbGVjdGVkSW5kZXggPT09IC0xKSB7XG5cdFx0XHRcdFx0dm5vZGUuZG9tLnZhbHVlID0gbm9ybWFsaXplZFxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHRcdGlmIChcInNlbGVjdGVkSW5kZXhcIiBpbiBhdHRycykgc2V0QXR0cih2bm9kZSwgXCJzZWxlY3RlZEluZGV4XCIsIG51bGwsIGF0dHJzLnNlbGVjdGVkSW5kZXgsIHVuZGVmaW5lZClcblx0fVxuXHRmdW5jdGlvbiB1cGRhdGVBdHRycyh2bm9kZSwgb2xkLCBhdHRycywgbnMpIHtcblx0XHRpZiAoYXR0cnMgIT0gbnVsbCkge1xuXHRcdFx0Zm9yICh2YXIga2V5IGluIGF0dHJzKSB7XG5cdFx0XHRcdHNldEF0dHIodm5vZGUsIGtleSwgb2xkICYmIG9sZFtrZXldLCBhdHRyc1trZXldLCBucylcblx0XHRcdH1cblx0XHR9XG5cdFx0dmFyIHZhbFxuXHRcdGlmIChvbGQgIT0gbnVsbCkge1xuXHRcdFx0Zm9yICh2YXIga2V5IGluIG9sZCkge1xuXHRcdFx0XHRpZiAoKCh2YWwgPSBvbGRba2V5XSkgIT0gbnVsbCkgJiYgKGF0dHJzID09IG51bGwgfHwgYXR0cnNba2V5XSA9PSBudWxsKSkge1xuXHRcdFx0XHRcdHJlbW92ZUF0dHIodm5vZGUsIGtleSwgdmFsLCBucylcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fVxuXHRmdW5jdGlvbiBpc0Zvcm1BdHRyaWJ1dGUodm5vZGUsIGF0dHIpIHtcblx0XHRyZXR1cm4gYXR0ciA9PT0gXCJ2YWx1ZVwiIHx8IGF0dHIgPT09IFwiY2hlY2tlZFwiIHx8IGF0dHIgPT09IFwic2VsZWN0ZWRJbmRleFwiIHx8IGF0dHIgPT09IFwic2VsZWN0ZWRcIiAmJiB2bm9kZS5kb20gPT09IGFjdGl2ZUVsZW1lbnQoKSB8fCB2bm9kZS50YWcgPT09IFwib3B0aW9uXCIgJiYgdm5vZGUuZG9tLnBhcmVudE5vZGUgPT09ICRkb2MuYWN0aXZlRWxlbWVudFxuXHR9XG5cdGZ1bmN0aW9uIGlzTGlmZWN5Y2xlTWV0aG9kKGF0dHIpIHtcblx0XHRyZXR1cm4gYXR0ciA9PT0gXCJvbmluaXRcIiB8fCBhdHRyID09PSBcIm9uY3JlYXRlXCIgfHwgYXR0ciA9PT0gXCJvbnVwZGF0ZVwiIHx8IGF0dHIgPT09IFwib25yZW1vdmVcIiB8fCBhdHRyID09PSBcIm9uYmVmb3JlcmVtb3ZlXCIgfHwgYXR0ciA9PT0gXCJvbmJlZm9yZXVwZGF0ZVwiXG5cdH1cblx0ZnVuY3Rpb24gaGFzUHJvcGVydHlLZXkodm5vZGUsIGtleSwgbnMpIHtcblx0XHQvLyBGaWx0ZXIgb3V0IG5hbWVzcGFjZWQga2V5c1xuXHRcdHJldHVybiBucyA9PT0gdW5kZWZpbmVkICYmIChcblx0XHRcdC8vIElmIGl0J3MgYSBjdXN0b20gZWxlbWVudCwganVzdCBrZWVwIGl0LlxuXHRcdFx0dm5vZGUudGFnLmluZGV4T2YoXCItXCIpID4gLTEgfHwgdm5vZGUuYXR0cnMgIT0gbnVsbCAmJiB2bm9kZS5hdHRycy5pcyB8fFxuXHRcdFx0Ly8gSWYgaXQncyBhIG5vcm1hbCBlbGVtZW50LCBsZXQncyB0cnkgdG8gYXZvaWQgYSBmZXcgYnJvd3NlciBidWdzLlxuXHRcdFx0a2V5ICE9PSBcImhyZWZcIiAmJiBrZXkgIT09IFwibGlzdFwiICYmIGtleSAhPT0gXCJmb3JtXCIgJiYga2V5ICE9PSBcIndpZHRoXCIgJiYga2V5ICE9PSBcImhlaWdodFwiLy8gJiYga2V5ICE9PSBcInR5cGVcIlxuXHRcdFx0Ly8gRGVmZXIgdGhlIHByb3BlcnR5IGNoZWNrIHVudGlsICphZnRlciogd2UgY2hlY2sgZXZlcnl0aGluZy5cblx0XHQpICYmIGtleSBpbiB2bm9kZS5kb21cblx0fVxuXG5cdC8vc3R5bGVcblx0dmFyIHVwcGVyY2FzZVJlZ2V4ID0gL1tBLVpdL2dcblx0ZnVuY3Rpb24gdG9Mb3dlckNhc2UoY2FwaXRhbCkgeyByZXR1cm4gXCItXCIgKyBjYXBpdGFsLnRvTG93ZXJDYXNlKCkgfVxuXHRmdW5jdGlvbiBub3JtYWxpemVLZXkoa2V5KSB7XG5cdFx0cmV0dXJuIGtleVswXSA9PT0gXCItXCIgJiYga2V5WzFdID09PSBcIi1cIiA/IGtleSA6XG5cdFx0XHRrZXkgPT09IFwiY3NzRmxvYXRcIiA/IFwiZmxvYXRcIiA6XG5cdFx0XHRcdGtleS5yZXBsYWNlKHVwcGVyY2FzZVJlZ2V4LCB0b0xvd2VyQ2FzZSlcblx0fVxuXHRmdW5jdGlvbiB1cGRhdGVTdHlsZShlbGVtZW50LCBvbGQsIHN0eWxlKSB7XG5cdFx0aWYgKG9sZCA9PT0gc3R5bGUpIHtcblx0XHRcdC8vIFN0eWxlcyBhcmUgZXF1aXZhbGVudCwgZG8gbm90aGluZy5cblx0XHR9IGVsc2UgaWYgKHN0eWxlID09IG51bGwpIHtcblx0XHRcdC8vIE5ldyBzdHlsZSBpcyBtaXNzaW5nLCBqdXN0IGNsZWFyIGl0LlxuXHRcdFx0ZWxlbWVudC5zdHlsZS5jc3NUZXh0ID0gXCJcIlxuXHRcdH0gZWxzZSBpZiAodHlwZW9mIHN0eWxlICE9PSBcIm9iamVjdFwiKSB7XG5cdFx0XHQvLyBOZXcgc3R5bGUgaXMgYSBzdHJpbmcsIGxldCBlbmdpbmUgZGVhbCB3aXRoIHBhdGNoaW5nLlxuXHRcdFx0ZWxlbWVudC5zdHlsZS5jc3NUZXh0ID0gc3R5bGVcblx0XHR9IGVsc2UgaWYgKG9sZCA9PSBudWxsIHx8IHR5cGVvZiBvbGQgIT09IFwib2JqZWN0XCIpIHtcblx0XHRcdC8vIGBvbGRgIGlzIG1pc3Npbmcgb3IgYSBzdHJpbmcsIGBzdHlsZWAgaXMgYW4gb2JqZWN0LlxuXHRcdFx0ZWxlbWVudC5zdHlsZS5jc3NUZXh0ID0gXCJcIlxuXHRcdFx0Ly8gQWRkIG5ldyBzdHlsZSBwcm9wZXJ0aWVzXG5cdFx0XHRmb3IgKHZhciBrZXkgaW4gc3R5bGUpIHtcblx0XHRcdFx0dmFyIHZhbHVlID0gc3R5bGVba2V5XVxuXHRcdFx0XHRpZiAodmFsdWUgIT0gbnVsbCkgZWxlbWVudC5zdHlsZS5zZXRQcm9wZXJ0eShub3JtYWxpemVLZXkoa2V5KSwgU3RyaW5nKHZhbHVlKSlcblx0XHRcdH1cblx0XHR9IGVsc2Uge1xuXHRcdFx0Ly8gQm90aCBvbGQgJiBuZXcgYXJlIChkaWZmZXJlbnQpIG9iamVjdHMuXG5cdFx0XHQvLyBVcGRhdGUgc3R5bGUgcHJvcGVydGllcyB0aGF0IGhhdmUgY2hhbmdlZFxuXHRcdFx0Zm9yICh2YXIga2V5IGluIHN0eWxlKSB7XG5cdFx0XHRcdHZhciB2YWx1ZSA9IHN0eWxlW2tleV1cblx0XHRcdFx0aWYgKHZhbHVlICE9IG51bGwgJiYgKHZhbHVlID0gU3RyaW5nKHZhbHVlKSkgIT09IFN0cmluZyhvbGRba2V5XSkpIHtcblx0XHRcdFx0XHRlbGVtZW50LnN0eWxlLnNldFByb3BlcnR5KG5vcm1hbGl6ZUtleShrZXkpLCB2YWx1ZSlcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0Ly8gUmVtb3ZlIHN0eWxlIHByb3BlcnRpZXMgdGhhdCBubyBsb25nZXIgZXhpc3Rcblx0XHRcdGZvciAodmFyIGtleSBpbiBvbGQpIHtcblx0XHRcdFx0aWYgKG9sZFtrZXldICE9IG51bGwgJiYgc3R5bGVba2V5XSA9PSBudWxsKSB7XG5cdFx0XHRcdFx0ZWxlbWVudC5zdHlsZS5yZW1vdmVQcm9wZXJ0eShub3JtYWxpemVLZXkoa2V5KSlcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdC8vIEhlcmUncyBhbiBleHBsYW5hdGlvbiBvZiBob3cgdGhpcyB3b3Jrczpcblx0Ly8gMS4gVGhlIGV2ZW50IG5hbWVzIGFyZSBhbHdheXMgKGJ5IGRlc2lnbikgcHJlZml4ZWQgYnkgYG9uYC5cblx0Ly8gMi4gVGhlIEV2ZW50TGlzdGVuZXIgaW50ZXJmYWNlIGFjY2VwdHMgZWl0aGVyIGEgZnVuY3Rpb24gb3IgYW4gb2JqZWN0XG5cdC8vICAgIHdpdGggYSBgaGFuZGxlRXZlbnRgIG1ldGhvZC5cblx0Ly8gMy4gVGhlIG9iamVjdCBkb2VzIG5vdCBpbmhlcml0IGZyb20gYE9iamVjdC5wcm90b3R5cGVgLCB0byBhdm9pZFxuXHQvLyAgICBhbnkgcG90ZW50aWFsIGludGVyZmVyZW5jZSB3aXRoIHRoYXQgKGUuZy4gc2V0dGVycykuXG5cdC8vIDQuIFRoZSBldmVudCBuYW1lIGlzIHJlbWFwcGVkIHRvIHRoZSBoYW5kbGVyIGJlZm9yZSBjYWxsaW5nIGl0LlxuXHQvLyA1LiBJbiBmdW5jdGlvbi1iYXNlZCBldmVudCBoYW5kbGVycywgYGV2LnRhcmdldCA9PT0gdGhpc2AuIFdlIHJlcGxpY2F0ZVxuXHQvLyAgICB0aGF0IGJlbG93LlxuXHQvLyA2LiBJbiBmdW5jdGlvbi1iYXNlZCBldmVudCBoYW5kbGVycywgYHJldHVybiBmYWxzZWAgcHJldmVudHMgdGhlIGRlZmF1bHRcblx0Ly8gICAgYWN0aW9uIGFuZCBzdG9wcyBldmVudCBwcm9wYWdhdGlvbi4gV2UgcmVwbGljYXRlIHRoYXQgYmVsb3cuXG5cdGZ1bmN0aW9uIEV2ZW50RGljdCgpIHtcblx0XHQvLyBTYXZlIHRoaXMsIHNvIHRoZSBjdXJyZW50IHJlZHJhdyBpcyBjb3JyZWN0bHkgdHJhY2tlZC5cblx0XHR0aGlzLl8gPSBjdXJyZW50UmVkcmF3XG5cdH1cblx0RXZlbnREaWN0LnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUobnVsbClcblx0RXZlbnREaWN0LnByb3RvdHlwZS5oYW5kbGVFdmVudCA9IGZ1bmN0aW9uIChldikge1xuXHRcdHZhciBoYW5kbGVyID0gdGhpc1tcIm9uXCIgKyBldi50eXBlXVxuXHRcdHZhciByZXN1bHRcblx0XHRpZiAodHlwZW9mIGhhbmRsZXIgPT09IFwiZnVuY3Rpb25cIikgcmVzdWx0ID0gaGFuZGxlci5jYWxsKGV2LmN1cnJlbnRUYXJnZXQsIGV2KVxuXHRcdGVsc2UgaWYgKHR5cGVvZiBoYW5kbGVyLmhhbmRsZUV2ZW50ID09PSBcImZ1bmN0aW9uXCIpIGhhbmRsZXIuaGFuZGxlRXZlbnQoZXYpXG5cdFx0aWYgKHRoaXMuXyAmJiBldi5yZWRyYXcgIT09IGZhbHNlKSAoMCwgdGhpcy5fKSgpXG5cdFx0aWYgKHJlc3VsdCA9PT0gZmFsc2UpIHtcblx0XHRcdGV2LnByZXZlbnREZWZhdWx0KClcblx0XHRcdGV2LnN0b3BQcm9wYWdhdGlvbigpXG5cdFx0fVxuXHR9XG5cblx0Ly9ldmVudFxuXHRmdW5jdGlvbiB1cGRhdGVFdmVudCh2bm9kZSwga2V5LCB2YWx1ZSkge1xuXHRcdGlmICh2bm9kZS5ldmVudHMgIT0gbnVsbCkge1xuXHRcdFx0aWYgKHZub2RlLmV2ZW50c1trZXldID09PSB2YWx1ZSkgcmV0dXJuXG5cdFx0XHRpZiAodmFsdWUgIT0gbnVsbCAmJiAodHlwZW9mIHZhbHVlID09PSBcImZ1bmN0aW9uXCIgfHwgdHlwZW9mIHZhbHVlID09PSBcIm9iamVjdFwiKSkge1xuXHRcdFx0XHRpZiAodm5vZGUuZXZlbnRzW2tleV0gPT0gbnVsbCkgdm5vZGUuZG9tLmFkZEV2ZW50TGlzdGVuZXIoa2V5LnNsaWNlKDIpLCB2bm9kZS5ldmVudHMsIGZhbHNlKVxuXHRcdFx0XHR2bm9kZS5ldmVudHNba2V5XSA9IHZhbHVlXG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRpZiAodm5vZGUuZXZlbnRzW2tleV0gIT0gbnVsbCkgdm5vZGUuZG9tLnJlbW92ZUV2ZW50TGlzdGVuZXIoa2V5LnNsaWNlKDIpLCB2bm9kZS5ldmVudHMsIGZhbHNlKVxuXHRcdFx0XHR2bm9kZS5ldmVudHNba2V5XSA9IHVuZGVmaW5lZFxuXHRcdFx0fVxuXHRcdH0gZWxzZSBpZiAodmFsdWUgIT0gbnVsbCAmJiAodHlwZW9mIHZhbHVlID09PSBcImZ1bmN0aW9uXCIgfHwgdHlwZW9mIHZhbHVlID09PSBcIm9iamVjdFwiKSkge1xuXHRcdFx0dm5vZGUuZXZlbnRzID0gbmV3IEV2ZW50RGljdCgpXG5cdFx0XHR2bm9kZS5kb20uYWRkRXZlbnRMaXN0ZW5lcihrZXkuc2xpY2UoMiksIHZub2RlLmV2ZW50cywgZmFsc2UpXG5cdFx0XHR2bm9kZS5ldmVudHNba2V5XSA9IHZhbHVlXG5cdFx0fVxuXHR9XG5cblx0Ly9saWZlY3ljbGVcblx0ZnVuY3Rpb24gaW5pdExpZmVjeWNsZShzb3VyY2UsIHZub2RlLCBob29rcykge1xuXHRcdGlmICh0eXBlb2Ygc291cmNlLm9uaW5pdCA9PT0gXCJmdW5jdGlvblwiKSBjYWxsSG9vay5jYWxsKHNvdXJjZS5vbmluaXQsIHZub2RlKVxuXHRcdGlmICh0eXBlb2Ygc291cmNlLm9uY3JlYXRlID09PSBcImZ1bmN0aW9uXCIpIGhvb2tzLnB1c2goY2FsbEhvb2suYmluZChzb3VyY2Uub25jcmVhdGUsIHZub2RlKSlcblx0fVxuXHRmdW5jdGlvbiB1cGRhdGVMaWZlY3ljbGUoc291cmNlLCB2bm9kZSwgaG9va3MpIHtcblx0XHRpZiAodHlwZW9mIHNvdXJjZS5vbnVwZGF0ZSA9PT0gXCJmdW5jdGlvblwiKSBob29rcy5wdXNoKGNhbGxIb29rLmJpbmQoc291cmNlLm9udXBkYXRlLCB2bm9kZSkpXG5cdH1cblx0ZnVuY3Rpb24gc2hvdWxkTm90VXBkYXRlKHZub2RlLCBvbGQpIHtcblx0XHRkbyB7XG5cdFx0XHRpZiAodm5vZGUuYXR0cnMgIT0gbnVsbCAmJiB0eXBlb2Ygdm5vZGUuYXR0cnMub25iZWZvcmV1cGRhdGUgPT09IFwiZnVuY3Rpb25cIikge1xuXHRcdFx0XHR2YXIgZm9yY2UgPSBjYWxsSG9vay5jYWxsKHZub2RlLmF0dHJzLm9uYmVmb3JldXBkYXRlLCB2bm9kZSwgb2xkKVxuXHRcdFx0XHRpZiAoZm9yY2UgIT09IHVuZGVmaW5lZCAmJiAhZm9yY2UpIGJyZWFrXG5cdFx0XHR9XG5cdFx0XHRpZiAodHlwZW9mIHZub2RlLnRhZyAhPT0gXCJzdHJpbmdcIiAmJiB0eXBlb2Ygdm5vZGUuc3RhdGUub25iZWZvcmV1cGRhdGUgPT09IFwiZnVuY3Rpb25cIikge1xuXHRcdFx0XHR2YXIgZm9yY2UgPSBjYWxsSG9vay5jYWxsKHZub2RlLnN0YXRlLm9uYmVmb3JldXBkYXRlLCB2bm9kZSwgb2xkKVxuXHRcdFx0XHRpZiAoZm9yY2UgIT09IHVuZGVmaW5lZCAmJiAhZm9yY2UpIGJyZWFrXG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gZmFsc2Vcblx0XHR9IHdoaWxlIChmYWxzZSk7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tY29uc3RhbnQtY29uZGl0aW9uXG5cdFx0dm5vZGUuZG9tID0gb2xkLmRvbVxuXHRcdHZub2RlLmRvbVNpemUgPSBvbGQuZG9tU2l6ZVxuXHRcdHZub2RlLmluc3RhbmNlID0gb2xkLmluc3RhbmNlXG5cdFx0Ly8gT25lIHdvdWxkIHRoaW5rIGhhdmluZyB0aGUgYWN0dWFsIGxhdGVzdCBhdHRyaWJ1dGVzIHdvdWxkIGJlIGlkZWFsLFxuXHRcdC8vIGJ1dCBpdCBkb2Vzbid0IGxldCB1cyBwcm9wZXJseSBkaWZmIGJhc2VkIG9uIG91ciBjdXJyZW50IGludGVybmFsXG5cdFx0Ly8gcmVwcmVzZW50YXRpb24uIFdlIGhhdmUgdG8gc2F2ZSBub3Qgb25seSB0aGUgb2xkIERPTSBpbmZvLCBidXQgYWxzb1xuXHRcdC8vIHRoZSBhdHRyaWJ1dGVzIHVzZWQgdG8gY3JlYXRlIGl0LCBhcyB3ZSBkaWZmICp0aGF0Kiwgbm90IGFnYWluc3QgdGhlXG5cdFx0Ly8gRE9NIGRpcmVjdGx5ICh3aXRoIGEgZmV3IGV4Y2VwdGlvbnMgaW4gYHNldEF0dHJgKS4gQW5kLCBvZiBjb3Vyc2UsIHdlXG5cdFx0Ly8gbmVlZCB0byBzYXZlIHRoZSBjaGlsZHJlbiBhbmQgdGV4dCBhcyB0aGV5IGFyZSBjb25jZXB0dWFsbHkgbm90XG5cdFx0Ly8gdW5saWtlIHNwZWNpYWwgXCJhdHRyaWJ1dGVzXCIgaW50ZXJuYWxseS5cblx0XHR2bm9kZS5hdHRycyA9IG9sZC5hdHRyc1xuXHRcdHZub2RlLmNoaWxkcmVuID0gb2xkLmNoaWxkcmVuXG5cdFx0dm5vZGUudGV4dCA9IG9sZC50ZXh0XG5cdFx0cmV0dXJuIHRydWVcblx0fVxuXG5cdHJldHVybiBmdW5jdGlvbihkb20sIHZub2RlcywgcmVkcmF3KSB7XG5cdFx0aWYgKCFkb20pIHRocm93IG5ldyBUeXBlRXJyb3IoXCJFbnN1cmUgdGhlIERPTSBlbGVtZW50IGJlaW5nIHBhc3NlZCB0byBtLnJvdXRlL20ubW91bnQvbS5yZW5kZXIgaXMgbm90IHVuZGVmaW5lZC5cIilcblx0XHR2YXIgaG9va3MgPSBbXVxuXHRcdHZhciBhY3RpdmUgPSBhY3RpdmVFbGVtZW50KClcblx0XHR2YXIgbmFtZXNwYWNlID0gZG9tLm5hbWVzcGFjZVVSSVxuXG5cdFx0Ly8gRmlyc3QgdGltZSByZW5kZXJpbmcgaW50byBhIG5vZGUgY2xlYXJzIGl0IG91dFxuXHRcdGlmIChkb20udm5vZGVzID09IG51bGwpIGRvbS50ZXh0Q29udGVudCA9IFwiXCJcblxuXHRcdHZub2RlcyA9IFZub2RlLm5vcm1hbGl6ZUNoaWxkcmVuKEFycmF5LmlzQXJyYXkodm5vZGVzKSA/IHZub2RlcyA6IFt2bm9kZXNdKVxuXHRcdHZhciBwcmV2UmVkcmF3ID0gY3VycmVudFJlZHJhd1xuXHRcdHRyeSB7XG5cdFx0XHRjdXJyZW50UmVkcmF3ID0gdHlwZW9mIHJlZHJhdyA9PT0gXCJmdW5jdGlvblwiID8gcmVkcmF3IDogdW5kZWZpbmVkXG5cdFx0XHR1cGRhdGVOb2Rlcyhkb20sIGRvbS52bm9kZXMsIHZub2RlcywgaG9va3MsIG51bGwsIG5hbWVzcGFjZSA9PT0gXCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hodG1sXCIgPyB1bmRlZmluZWQgOiBuYW1lc3BhY2UpXG5cdFx0fSBmaW5hbGx5IHtcblx0XHRcdGN1cnJlbnRSZWRyYXcgPSBwcmV2UmVkcmF3XG5cdFx0fVxuXHRcdGRvbS52bm9kZXMgPSB2bm9kZXNcblx0XHQvLyBgZG9jdW1lbnQuYWN0aXZlRWxlbWVudGAgY2FuIHJldHVybiBudWxsOiBodHRwczovL2h0bWwuc3BlYy53aGF0d2cub3JnL211bHRpcGFnZS9pbnRlcmFjdGlvbi5odG1sI2RvbS1kb2N1bWVudC1hY3RpdmVlbGVtZW50XG5cdFx0aWYgKGFjdGl2ZSAhPSBudWxsICYmIGFjdGl2ZUVsZW1lbnQoKSAhPT0gYWN0aXZlICYmIHR5cGVvZiBhY3RpdmUuZm9jdXMgPT09IFwiZnVuY3Rpb25cIikgYWN0aXZlLmZvY3VzKClcblx0XHRmb3IgKHZhciBpID0gMDsgaSA8IGhvb2tzLmxlbmd0aDsgaSsrKSBob29rc1tpXSgpXG5cdH1cbn1cbiIsIlwidXNlIHN0cmljdFwiXG5cbnZhciBWbm9kZSA9IHJlcXVpcmUoXCIuLi9yZW5kZXIvdm5vZGVcIilcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihodG1sKSB7XG5cdGlmIChodG1sID09IG51bGwpIGh0bWwgPSBcIlwiXG5cdHJldHVybiBWbm9kZShcIjxcIiwgdW5kZWZpbmVkLCB1bmRlZmluZWQsIGh0bWwsIHVuZGVmaW5lZCwgdW5kZWZpbmVkKVxufVxuIiwiXCJ1c2Ugc3RyaWN0XCJcblxuZnVuY3Rpb24gVm5vZGUodGFnLCBrZXksIGF0dHJzLCBjaGlsZHJlbiwgdGV4dCwgZG9tKSB7XG5cdHJldHVybiB7dGFnOiB0YWcsIGtleToga2V5LCBhdHRyczogYXR0cnMsIGNoaWxkcmVuOiBjaGlsZHJlbiwgdGV4dDogdGV4dCwgZG9tOiBkb20sIGRvbVNpemU6IHVuZGVmaW5lZCwgc3RhdGU6IHVuZGVmaW5lZCwgZXZlbnRzOiB1bmRlZmluZWQsIGluc3RhbmNlOiB1bmRlZmluZWR9XG59XG5Wbm9kZS5ub3JtYWxpemUgPSBmdW5jdGlvbihub2RlKSB7XG5cdGlmIChBcnJheS5pc0FycmF5KG5vZGUpKSByZXR1cm4gVm5vZGUoXCJbXCIsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCBWbm9kZS5ub3JtYWxpemVDaGlsZHJlbihub2RlKSwgdW5kZWZpbmVkLCB1bmRlZmluZWQpXG5cdGlmIChub2RlID09IG51bGwgfHwgdHlwZW9mIG5vZGUgPT09IFwiYm9vbGVhblwiKSByZXR1cm4gbnVsbFxuXHRpZiAodHlwZW9mIG5vZGUgPT09IFwib2JqZWN0XCIpIHJldHVybiBub2RlXG5cdHJldHVybiBWbm9kZShcIiNcIiwgdW5kZWZpbmVkLCB1bmRlZmluZWQsIFN0cmluZyhub2RlKSwgdW5kZWZpbmVkLCB1bmRlZmluZWQpXG59XG5Wbm9kZS5ub3JtYWxpemVDaGlsZHJlbiA9IGZ1bmN0aW9uKGlucHV0KSB7XG5cdHZhciBjaGlsZHJlbiA9IFtdXG5cdGlmIChpbnB1dC5sZW5ndGgpIHtcblx0XHR2YXIgaXNLZXllZCA9IGlucHV0WzBdICE9IG51bGwgJiYgaW5wdXRbMF0ua2V5ICE9IG51bGxcblx0XHQvLyBOb3RlOiB0aGlzIGlzIGEgKnZlcnkqIHBlcmYtc2Vuc2l0aXZlIGNoZWNrLlxuXHRcdC8vIEZ1biBmYWN0OiBtZXJnaW5nIHRoZSBsb29wIGxpa2UgdGhpcyBpcyBzb21laG93IGZhc3RlciB0aGFuIHNwbGl0dGluZ1xuXHRcdC8vIGl0LCBub3RpY2VhYmx5IHNvLlxuXHRcdGZvciAodmFyIGkgPSAxOyBpIDwgaW5wdXQubGVuZ3RoOyBpKyspIHtcblx0XHRcdGlmICgoaW5wdXRbaV0gIT0gbnVsbCAmJiBpbnB1dFtpXS5rZXkgIT0gbnVsbCkgIT09IGlzS2V5ZWQpIHtcblx0XHRcdFx0dGhyb3cgbmV3IFR5cGVFcnJvcihcIlZub2RlcyBtdXN0IGVpdGhlciBhbHdheXMgaGF2ZSBrZXlzIG9yIG5ldmVyIGhhdmUga2V5cyFcIilcblx0XHRcdH1cblx0XHR9XG5cdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCBpbnB1dC5sZW5ndGg7IGkrKykge1xuXHRcdFx0Y2hpbGRyZW5baV0gPSBWbm9kZS5ub3JtYWxpemUoaW5wdXRbaV0pXG5cdFx0fVxuXHR9XG5cdHJldHVybiBjaGlsZHJlblxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IFZub2RlXG4iLCJcInVzZSBzdHJpY3RcIlxuXG52YXIgUHJvbWlzZVBvbHlmaWxsID0gcmVxdWlyZShcIi4vcHJvbWlzZS9wcm9taXNlXCIpXG52YXIgbW91bnRSZWRyYXcgPSByZXF1aXJlKFwiLi9tb3VudC1yZWRyYXdcIilcblxubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwiLi9yZXF1ZXN0L3JlcXVlc3RcIikod2luZG93LCBQcm9taXNlUG9seWZpbGwsIG1vdW50UmVkcmF3LnJlZHJhdylcbiIsIlwidXNlIHN0cmljdFwiXG5cbnZhciBidWlsZFBhdGhuYW1lID0gcmVxdWlyZShcIi4uL3BhdGhuYW1lL2J1aWxkXCIpXG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oJHdpbmRvdywgUHJvbWlzZSwgb25jb21wbGV0aW9uKSB7XG5cdHZhciBjYWxsYmFja0NvdW50ID0gMFxuXG5cdGZ1bmN0aW9uIFByb21pc2VQcm94eShleGVjdXRvcikge1xuXHRcdHJldHVybiBuZXcgUHJvbWlzZShleGVjdXRvcilcblx0fVxuXG5cdC8vIEluIGNhc2UgdGhlIGdsb2JhbCBQcm9taXNlIGlzIHNvbWUgdXNlcmxhbmQgbGlicmFyeSdzIHdoZXJlIHRoZXkgcmVseSBvblxuXHQvLyBgZm9vIGluc3RhbmNlb2YgdGhpcy5jb25zdHJ1Y3RvcmAsIGB0aGlzLmNvbnN0cnVjdG9yLnJlc29sdmUodmFsdWUpYCwgb3Jcblx0Ly8gc2ltaWxhci4gTGV0J3MgKm5vdCogYnJlYWsgdGhlbS5cblx0UHJvbWlzZVByb3h5LnByb3RvdHlwZSA9IFByb21pc2UucHJvdG90eXBlXG5cdFByb21pc2VQcm94eS5fX3Byb3RvX18gPSBQcm9taXNlIC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tcHJvdG9cblxuXHRmdW5jdGlvbiBtYWtlUmVxdWVzdChmYWN0b3J5KSB7XG5cdFx0cmV0dXJuIGZ1bmN0aW9uKHVybCwgYXJncykge1xuXHRcdFx0aWYgKHR5cGVvZiB1cmwgIT09IFwic3RyaW5nXCIpIHsgYXJncyA9IHVybDsgdXJsID0gdXJsLnVybCB9XG5cdFx0XHRlbHNlIGlmIChhcmdzID09IG51bGwpIGFyZ3MgPSB7fVxuXHRcdFx0dmFyIHByb21pc2UgPSBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlLCByZWplY3QpIHtcblx0XHRcdFx0ZmFjdG9yeShidWlsZFBhdGhuYW1lKHVybCwgYXJncy5wYXJhbXMpLCBhcmdzLCBmdW5jdGlvbiAoZGF0YSkge1xuXHRcdFx0XHRcdGlmICh0eXBlb2YgYXJncy50eXBlID09PSBcImZ1bmN0aW9uXCIpIHtcblx0XHRcdFx0XHRcdGlmIChBcnJheS5pc0FycmF5KGRhdGEpKSB7XG5cdFx0XHRcdFx0XHRcdGZvciAodmFyIGkgPSAwOyBpIDwgZGF0YS5sZW5ndGg7IGkrKykge1xuXHRcdFx0XHRcdFx0XHRcdGRhdGFbaV0gPSBuZXcgYXJncy50eXBlKGRhdGFbaV0pXG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdGVsc2UgZGF0YSA9IG5ldyBhcmdzLnR5cGUoZGF0YSlcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0cmVzb2x2ZShkYXRhKVxuXHRcdFx0XHR9LCByZWplY3QpXG5cdFx0XHR9KVxuXHRcdFx0aWYgKGFyZ3MuYmFja2dyb3VuZCA9PT0gdHJ1ZSkgcmV0dXJuIHByb21pc2Vcblx0XHRcdHZhciBjb3VudCA9IDBcblx0XHRcdGZ1bmN0aW9uIGNvbXBsZXRlKCkge1xuXHRcdFx0XHRpZiAoLS1jb3VudCA9PT0gMCAmJiB0eXBlb2Ygb25jb21wbGV0aW9uID09PSBcImZ1bmN0aW9uXCIpIG9uY29tcGxldGlvbigpXG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiB3cmFwKHByb21pc2UpXG5cblx0XHRcdGZ1bmN0aW9uIHdyYXAocHJvbWlzZSkge1xuXHRcdFx0XHR2YXIgdGhlbiA9IHByb21pc2UudGhlblxuXHRcdFx0XHQvLyBTZXQgdGhlIGNvbnN0cnVjdG9yLCBzbyBlbmdpbmVzIGtub3cgdG8gbm90IGF3YWl0IG9yIHJlc29sdmVcblx0XHRcdFx0Ly8gdGhpcyBhcyBhIG5hdGl2ZSBwcm9taXNlLiBBdCB0aGUgdGltZSBvZiB3cml0aW5nLCB0aGlzIGlzXG5cdFx0XHRcdC8vIG9ubHkgbmVjZXNzYXJ5IGZvciBWOCwgYnV0IHRoZWlyIGJlaGF2aW9yIGlzIHRoZSBjb3JyZWN0XG5cdFx0XHRcdC8vIGJlaGF2aW9yIHBlciBzcGVjLiBTZWUgdGhpcyBzcGVjIGlzc3VlIGZvciBtb3JlIGRldGFpbHM6XG5cdFx0XHRcdC8vIGh0dHBzOi8vZ2l0aHViLmNvbS90YzM5L2VjbWEyNjIvaXNzdWVzLzE1NzcuIEFsc28sIHNlZSB0aGVcblx0XHRcdFx0Ly8gY29ycmVzcG9uZGluZyBjb21tZW50IGluIGByZXF1ZXN0L3Rlc3RzL3Rlc3QtcmVxdWVzdC5qc2AgZm9yXG5cdFx0XHRcdC8vIGEgYml0IG1vcmUgYmFja2dyb3VuZCBvbiB0aGUgaXNzdWUgYXQgaGFuZC5cblx0XHRcdFx0cHJvbWlzZS5jb25zdHJ1Y3RvciA9IFByb21pc2VQcm94eVxuXHRcdFx0XHRwcm9taXNlLnRoZW4gPSBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRjb3VudCsrXG5cdFx0XHRcdFx0dmFyIG5leHQgPSB0aGVuLmFwcGx5KHByb21pc2UsIGFyZ3VtZW50cylcblx0XHRcdFx0XHRuZXh0LnRoZW4oY29tcGxldGUsIGZ1bmN0aW9uKGUpIHtcblx0XHRcdFx0XHRcdGNvbXBsZXRlKClcblx0XHRcdFx0XHRcdGlmIChjb3VudCA9PT0gMCkgdGhyb3cgZVxuXHRcdFx0XHRcdH0pXG5cdFx0XHRcdFx0cmV0dXJuIHdyYXAobmV4dClcblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm4gcHJvbWlzZVxuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdGZ1bmN0aW9uIGhhc0hlYWRlcihhcmdzLCBuYW1lKSB7XG5cdFx0Zm9yICh2YXIga2V5IGluIGFyZ3MuaGVhZGVycykge1xuXHRcdFx0aWYgKHt9Lmhhc093blByb3BlcnR5LmNhbGwoYXJncy5oZWFkZXJzLCBrZXkpICYmIG5hbWUudGVzdChrZXkpKSByZXR1cm4gdHJ1ZVxuXHRcdH1cblx0XHRyZXR1cm4gZmFsc2Vcblx0fVxuXG5cdHJldHVybiB7XG5cdFx0cmVxdWVzdDogbWFrZVJlcXVlc3QoZnVuY3Rpb24odXJsLCBhcmdzLCByZXNvbHZlLCByZWplY3QpIHtcblx0XHRcdHZhciBtZXRob2QgPSBhcmdzLm1ldGhvZCAhPSBudWxsID8gYXJncy5tZXRob2QudG9VcHBlckNhc2UoKSA6IFwiR0VUXCJcblx0XHRcdHZhciBib2R5ID0gYXJncy5ib2R5XG5cdFx0XHR2YXIgYXNzdW1lSlNPTiA9IChhcmdzLnNlcmlhbGl6ZSA9PSBudWxsIHx8IGFyZ3Muc2VyaWFsaXplID09PSBKU09OLnNlcmlhbGl6ZSkgJiYgIShib2R5IGluc3RhbmNlb2YgJHdpbmRvdy5Gb3JtRGF0YSlcblx0XHRcdHZhciByZXNwb25zZVR5cGUgPSBhcmdzLnJlc3BvbnNlVHlwZSB8fCAodHlwZW9mIGFyZ3MuZXh0cmFjdCA9PT0gXCJmdW5jdGlvblwiID8gXCJcIiA6IFwianNvblwiKVxuXG5cdFx0XHR2YXIgeGhyID0gbmV3ICR3aW5kb3cuWE1MSHR0cFJlcXVlc3QoKSwgYWJvcnRlZCA9IGZhbHNlXG5cdFx0XHR2YXIgb3JpZ2luYWwgPSB4aHIsIHJlcGxhY2VkQWJvcnRcblx0XHRcdHZhciBhYm9ydCA9IHhoci5hYm9ydFxuXG5cdFx0XHR4aHIuYWJvcnQgPSBmdW5jdGlvbigpIHtcblx0XHRcdFx0YWJvcnRlZCA9IHRydWVcblx0XHRcdFx0YWJvcnQuY2FsbCh0aGlzKVxuXHRcdFx0fVxuXG5cdFx0XHR4aHIub3BlbihtZXRob2QsIHVybCwgYXJncy5hc3luYyAhPT0gZmFsc2UsIHR5cGVvZiBhcmdzLnVzZXIgPT09IFwic3RyaW5nXCIgPyBhcmdzLnVzZXIgOiB1bmRlZmluZWQsIHR5cGVvZiBhcmdzLnBhc3N3b3JkID09PSBcInN0cmluZ1wiID8gYXJncy5wYXNzd29yZCA6IHVuZGVmaW5lZClcblxuXHRcdFx0aWYgKGFzc3VtZUpTT04gJiYgYm9keSAhPSBudWxsICYmICFoYXNIZWFkZXIoYXJncywgL15jb250ZW50LXR5cGUkL2kpKSB7XG5cdFx0XHRcdHhoci5zZXRSZXF1ZXN0SGVhZGVyKFwiQ29udGVudC1UeXBlXCIsIFwiYXBwbGljYXRpb24vanNvbjsgY2hhcnNldD11dGYtOFwiKVxuXHRcdFx0fVxuXHRcdFx0aWYgKHR5cGVvZiBhcmdzLmRlc2VyaWFsaXplICE9PSBcImZ1bmN0aW9uXCIgJiYgIWhhc0hlYWRlcihhcmdzLCAvXmFjY2VwdCQvaSkpIHtcblx0XHRcdFx0eGhyLnNldFJlcXVlc3RIZWFkZXIoXCJBY2NlcHRcIiwgXCJhcHBsaWNhdGlvbi9qc29uLCB0ZXh0LypcIilcblx0XHRcdH1cblx0XHRcdGlmIChhcmdzLndpdGhDcmVkZW50aWFscykgeGhyLndpdGhDcmVkZW50aWFscyA9IGFyZ3Mud2l0aENyZWRlbnRpYWxzXG5cdFx0XHRpZiAoYXJncy50aW1lb3V0KSB4aHIudGltZW91dCA9IGFyZ3MudGltZW91dFxuXHRcdFx0eGhyLnJlc3BvbnNlVHlwZSA9IHJlc3BvbnNlVHlwZVxuXG5cdFx0XHRmb3IgKHZhciBrZXkgaW4gYXJncy5oZWFkZXJzKSB7XG5cdFx0XHRcdGlmICh7fS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGFyZ3MuaGVhZGVycywga2V5KSkge1xuXHRcdFx0XHRcdHhoci5zZXRSZXF1ZXN0SGVhZGVyKGtleSwgYXJncy5oZWFkZXJzW2tleV0pXG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0eGhyLm9ucmVhZHlzdGF0ZWNoYW5nZSA9IGZ1bmN0aW9uKGV2KSB7XG5cdFx0XHRcdC8vIERvbid0IHRocm93IGVycm9ycyBvbiB4aHIuYWJvcnQoKS5cblx0XHRcdFx0aWYgKGFib3J0ZWQpIHJldHVyblxuXG5cdFx0XHRcdGlmIChldi50YXJnZXQucmVhZHlTdGF0ZSA9PT0gNCkge1xuXHRcdFx0XHRcdHRyeSB7XG5cdFx0XHRcdFx0XHR2YXIgc3VjY2VzcyA9IChldi50YXJnZXQuc3RhdHVzID49IDIwMCAmJiBldi50YXJnZXQuc3RhdHVzIDwgMzAwKSB8fCBldi50YXJnZXQuc3RhdHVzID09PSAzMDQgfHwgKC9eZmlsZTpcXC9cXC8vaSkudGVzdCh1cmwpXG5cdFx0XHRcdFx0XHQvLyBXaGVuIHRoZSByZXNwb25zZSB0eXBlIGlzbid0IFwiXCIgb3IgXCJ0ZXh0XCIsXG5cdFx0XHRcdFx0XHQvLyBgeGhyLnJlc3BvbnNlVGV4dGAgaXMgdGhlIHdyb25nIHRoaW5nIHRvIHVzZS5cblx0XHRcdFx0XHRcdC8vIEJyb3dzZXJzIGRvIHRoZSByaWdodCB0aGluZyBhbmQgdGhyb3cgaGVyZSwgYW5kIHdlXG5cdFx0XHRcdFx0XHQvLyBzaG91bGQgaG9ub3IgdGhhdCBhbmQgZG8gdGhlIHJpZ2h0IHRoaW5nIGJ5XG5cdFx0XHRcdFx0XHQvLyBwcmVmZXJyaW5nIGB4aHIucmVzcG9uc2VgIHdoZXJlIHBvc3NpYmxlL3ByYWN0aWNhbC5cblx0XHRcdFx0XHRcdHZhciByZXNwb25zZSA9IGV2LnRhcmdldC5yZXNwb25zZSwgbWVzc2FnZVxuXG5cdFx0XHRcdFx0XHRpZiAocmVzcG9uc2VUeXBlID09PSBcImpzb25cIikge1xuXHRcdFx0XHRcdFx0XHQvLyBGb3IgSUUgYW5kIEVkZ2UsIHdoaWNoIGRvbid0IGltcGxlbWVudFxuXHRcdFx0XHRcdFx0XHQvLyBgcmVzcG9uc2VUeXBlOiBcImpzb25cImAuXG5cdFx0XHRcdFx0XHRcdGlmICghZXYudGFyZ2V0LnJlc3BvbnNlVHlwZSAmJiB0eXBlb2YgYXJncy5leHRyYWN0ICE9PSBcImZ1bmN0aW9uXCIpIHJlc3BvbnNlID0gSlNPTi5wYXJzZShldi50YXJnZXQucmVzcG9uc2VUZXh0KVxuXHRcdFx0XHRcdFx0fSBlbHNlIGlmICghcmVzcG9uc2VUeXBlIHx8IHJlc3BvbnNlVHlwZSA9PT0gXCJ0ZXh0XCIpIHtcblx0XHRcdFx0XHRcdFx0Ly8gT25seSB1c2UgdGhpcyBkZWZhdWx0IGlmIGl0J3MgdGV4dC4gSWYgYSBwYXJzZWRcblx0XHRcdFx0XHRcdFx0Ly8gZG9jdW1lbnQgaXMgbmVlZGVkIG9uIG9sZCBJRSBhbmQgZnJpZW5kcyAoYWxsXG5cdFx0XHRcdFx0XHRcdC8vIHVuc3VwcG9ydGVkKSwgdGhlIHVzZXIgc2hvdWxkIHVzZSBhIGN1c3RvbVxuXHRcdFx0XHRcdFx0XHQvLyBgY29uZmlnYCBpbnN0ZWFkLiBUaGV5J3JlIGFscmVhZHkgdXNpbmcgdGhpcyBhdFxuXHRcdFx0XHRcdFx0XHQvLyB0aGVpciBvd24gcmlzay5cblx0XHRcdFx0XHRcdFx0aWYgKHJlc3BvbnNlID09IG51bGwpIHJlc3BvbnNlID0gZXYudGFyZ2V0LnJlc3BvbnNlVGV4dFxuXHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHRpZiAodHlwZW9mIGFyZ3MuZXh0cmFjdCA9PT0gXCJmdW5jdGlvblwiKSB7XG5cdFx0XHRcdFx0XHRcdHJlc3BvbnNlID0gYXJncy5leHRyYWN0KGV2LnRhcmdldCwgYXJncylcblx0XHRcdFx0XHRcdFx0c3VjY2VzcyA9IHRydWVcblx0XHRcdFx0XHRcdH0gZWxzZSBpZiAodHlwZW9mIGFyZ3MuZGVzZXJpYWxpemUgPT09IFwiZnVuY3Rpb25cIikge1xuXHRcdFx0XHRcdFx0XHRyZXNwb25zZSA9IGFyZ3MuZGVzZXJpYWxpemUocmVzcG9uc2UpXG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRpZiAoc3VjY2VzcykgcmVzb2x2ZShyZXNwb25zZSlcblx0XHRcdFx0XHRcdGVsc2Uge1xuXHRcdFx0XHRcdFx0XHR0cnkgeyBtZXNzYWdlID0gZXYudGFyZ2V0LnJlc3BvbnNlVGV4dCB9XG5cdFx0XHRcdFx0XHRcdGNhdGNoIChlKSB7IG1lc3NhZ2UgPSByZXNwb25zZSB9XG5cdFx0XHRcdFx0XHRcdHZhciBlcnJvciA9IG5ldyBFcnJvcihtZXNzYWdlKVxuXHRcdFx0XHRcdFx0XHRlcnJvci5jb2RlID0gZXYudGFyZ2V0LnN0YXR1c1xuXHRcdFx0XHRcdFx0XHRlcnJvci5yZXNwb25zZSA9IHJlc3BvbnNlXG5cdFx0XHRcdFx0XHRcdHJlamVjdChlcnJvcilcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0Y2F0Y2ggKGUpIHtcblx0XHRcdFx0XHRcdHJlamVjdChlKVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHRpZiAodHlwZW9mIGFyZ3MuY29uZmlnID09PSBcImZ1bmN0aW9uXCIpIHtcblx0XHRcdFx0eGhyID0gYXJncy5jb25maWcoeGhyLCBhcmdzLCB1cmwpIHx8IHhoclxuXG5cdFx0XHRcdC8vIFByb3BhZ2F0ZSB0aGUgYGFib3J0YCB0byBhbnkgcmVwbGFjZW1lbnQgWEhSIGFzIHdlbGwuXG5cdFx0XHRcdGlmICh4aHIgIT09IG9yaWdpbmFsKSB7XG5cdFx0XHRcdFx0cmVwbGFjZWRBYm9ydCA9IHhoci5hYm9ydFxuXHRcdFx0XHRcdHhoci5hYm9ydCA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdFx0YWJvcnRlZCA9IHRydWVcblx0XHRcdFx0XHRcdHJlcGxhY2VkQWJvcnQuY2FsbCh0aGlzKVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHRpZiAoYm9keSA9PSBudWxsKSB4aHIuc2VuZCgpXG5cdFx0XHRlbHNlIGlmICh0eXBlb2YgYXJncy5zZXJpYWxpemUgPT09IFwiZnVuY3Rpb25cIikgeGhyLnNlbmQoYXJncy5zZXJpYWxpemUoYm9keSkpXG5cdFx0XHRlbHNlIGlmIChib2R5IGluc3RhbmNlb2YgJHdpbmRvdy5Gb3JtRGF0YSkgeGhyLnNlbmQoYm9keSlcblx0XHRcdGVsc2UgeGhyLnNlbmQoSlNPTi5zdHJpbmdpZnkoYm9keSkpXG5cdFx0fSksXG5cdFx0anNvbnA6IG1ha2VSZXF1ZXN0KGZ1bmN0aW9uKHVybCwgYXJncywgcmVzb2x2ZSwgcmVqZWN0KSB7XG5cdFx0XHR2YXIgY2FsbGJhY2tOYW1lID0gYXJncy5jYWxsYmFja05hbWUgfHwgXCJfbWl0aHJpbF9cIiArIE1hdGgucm91bmQoTWF0aC5yYW5kb20oKSAqIDFlMTYpICsgXCJfXCIgKyBjYWxsYmFja0NvdW50Kytcblx0XHRcdHZhciBzY3JpcHQgPSAkd2luZG93LmRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJzY3JpcHRcIilcblx0XHRcdCR3aW5kb3dbY2FsbGJhY2tOYW1lXSA9IGZ1bmN0aW9uKGRhdGEpIHtcblx0XHRcdFx0ZGVsZXRlICR3aW5kb3dbY2FsbGJhY2tOYW1lXVxuXHRcdFx0XHRzY3JpcHQucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChzY3JpcHQpXG5cdFx0XHRcdHJlc29sdmUoZGF0YSlcblx0XHRcdH1cblx0XHRcdHNjcmlwdC5vbmVycm9yID0gZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGRlbGV0ZSAkd2luZG93W2NhbGxiYWNrTmFtZV1cblx0XHRcdFx0c2NyaXB0LnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoc2NyaXB0KVxuXHRcdFx0XHRyZWplY3QobmV3IEVycm9yKFwiSlNPTlAgcmVxdWVzdCBmYWlsZWRcIikpXG5cdFx0XHR9XG5cdFx0XHRzY3JpcHQuc3JjID0gdXJsICsgKHVybC5pbmRleE9mKFwiP1wiKSA8IDAgPyBcIj9cIiA6IFwiJlwiKSArXG5cdFx0XHRcdGVuY29kZVVSSUNvbXBvbmVudChhcmdzLmNhbGxiYWNrS2V5IHx8IFwiY2FsbGJhY2tcIikgKyBcIj1cIiArXG5cdFx0XHRcdGVuY29kZVVSSUNvbXBvbmVudChjYWxsYmFja05hbWUpXG5cdFx0XHQkd2luZG93LmRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5hcHBlbmRDaGlsZChzY3JpcHQpXG5cdFx0fSksXG5cdH1cbn1cbiIsIlwidXNlIHN0cmljdFwiXG5cbnZhciBtb3VudFJlZHJhdyA9IHJlcXVpcmUoXCIuL21vdW50LXJlZHJhd1wiKVxuXG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCIuL2FwaS9yb3V0ZXJcIikod2luZG93LCBtb3VudFJlZHJhdylcbiIsIlwidXNlIHN0cmljdFwiO1xyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XHJcbmV4cG9ydHMuTWVzc2VuZ2VyID0gZXhwb3J0cy5NZXNzYWdlVHlwZSA9IHZvaWQgMDtcclxuY29uc3QgTW9kZWxfMSA9IHJlcXVpcmUoXCIuLi9zdHJ1Y3QvTW9kZWxcIik7XHJcbmNvbnN0IFBBUkVOVF9PUklHSU4gPSB3aW5kb3cubG9jYXRpb24ub3JpZ2luO1xyXG52YXIgTWVzc2FnZVR5cGU7XHJcbihmdW5jdGlvbiAoTWVzc2FnZVR5cGUpIHtcclxuICAgIE1lc3NhZ2VUeXBlW01lc3NhZ2VUeXBlW1wiQ1NfTG9hZGVkXCJdID0gMF0gPSBcIkNTX0xvYWRlZFwiO1xyXG4gICAgTWVzc2FnZVR5cGVbTWVzc2FnZVR5cGVbXCJDU19Db21wbGV0ZVwiXSA9IDFdID0gXCJDU19Db21wbGV0ZVwiO1xyXG4gICAgTWVzc2FnZVR5cGVbTWVzc2FnZVR5cGVbXCJTQ19Td2FwTW9kZWxcIl0gPSAyXSA9IFwiU0NfU3dhcE1vZGVsXCI7XHJcbiAgICBNZXNzYWdlVHlwZVtNZXNzYWdlVHlwZVtcIlNDX1N3YXBUZXh0dXJlXCJdID0gM10gPSBcIlNDX1N3YXBUZXh0dXJlXCI7XHJcbiAgICBNZXNzYWdlVHlwZVtNZXNzYWdlVHlwZVtcIlNDX1NldFBhcmFtZXRlck92ZXJyaWRlXCJdID0gNF0gPSBcIlNDX1NldFBhcmFtZXRlck92ZXJyaWRlXCI7XHJcbiAgICBNZXNzYWdlVHlwZVtNZXNzYWdlVHlwZVtcIlNDX1NldFBhcmFtZXRlcnNcIl0gPSA1XSA9IFwiU0NfU2V0UGFyYW1ldGVyc1wiO1xyXG59KShNZXNzYWdlVHlwZSA9IGV4cG9ydHMuTWVzc2FnZVR5cGUgfHwgKGV4cG9ydHMuTWVzc2FnZVR5cGUgPSB7fSkpO1xyXG5jbGFzcyBNZXNzZW5nZXIge1xyXG4gICAgY29uc3RydWN0b3Ioc3RhdGUsIGxvYWRlciwgYXNzZXRTdG9yZSkge1xyXG4gICAgICAgIHRoaXMuc3RhdGUgPSBzdGF0ZTtcclxuICAgICAgICB0aGlzLmxvYWRlciA9IGxvYWRlcjtcclxuICAgICAgICB0aGlzLmFzc2V0U3RvcmUgPSBhc3NldFN0b3JlO1xyXG4gICAgICAgIHRoaXMucGFyZW50V2luZG93ID0gd2luZG93LnBhcmVudCB8fCBudWxsO1xyXG4gICAgICAgIGlmICghdGhpcy5wYXJlbnRXaW5kb3cpIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcignbWVzc2FnZScsIGFzeW5jIChldmVudCkgPT4ge1xyXG4gICAgICAgICAgICB2YXIgX2E7XHJcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiU3Vic2NyaWJlXCIpO1xyXG4gICAgICAgICAgICBpZiAoZXZlbnQub3JpZ2luICE9PSBQQVJFTlRfT1JJR0lOKSB7XHJcbiAgICAgICAgICAgICAgICB0aHJvdyAnTWVzc2FnZSBvcmlnaW4gZG9lcyBub3QgbWF0Y2gnO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGNvbnN0IG1zZyA9IGV2ZW50LmRhdGE7XHJcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKHsgbXNnIH0pO1xyXG4gICAgICAgICAgICBpZiAobXNnLnR5cGUgPT09IE1lc3NhZ2VUeXBlLlNDX1N3YXBNb2RlbCkge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgcGF5bG9hZCA9IG1zZy5wYXlsb2FkO1xyXG4gICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5sb2FkZXIucmVpbml0aWFsaXplKCk7XHJcbiAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLmxvYWRlci5sb2FkTW9kZWxBc3NldChwYXlsb2FkLmlkKTtcclxuICAgICAgICAgICAgICAgIGxldCBtb2RlbCA9IG5ldyBNb2RlbF8xLk1vZGVsKHRoaXMuYXNzZXRTdG9yZS5nZXQocGF5bG9hZC5pZCkpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5zdGF0ZS5tb2RlbHMuZGF0YVtwYXlsb2FkLmxheWVyXSA9IG1vZGVsO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5zZW5kTWVzc2FnZShNZXNzYWdlVHlwZS5DU19Db21wbGV0ZSwgbnVsbCwgbXNnLmlkKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIGlmIChtc2cudHlwZSA9PT0gTWVzc2FnZVR5cGUuU0NfU3dhcFRleHR1cmUpIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHBheWxvYWQgPSBtc2cucGF5bG9hZDtcclxuICAgICAgICAgICAgICAgIGlmICghYXNzZXRTdG9yZS5oYXMocGF5bG9hZC5tb2RlbElkKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRocm93IGBBc3NldCAnJHtwYXlsb2FkLm1vZGVsSWR9JyBub3QgZm91bmRgO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgY29uc3QgYXNzZXQgPSBhc3NldFN0b3JlLmdldChwYXlsb2FkLm1vZGVsSWQpO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgdGV4dHVyZUlkID0gYHRleHR1cmUvJHtwYXlsb2FkLm1vZGVsSWQuc3BsaXQoJy8nKVsxXX0uJHtwYXlsb2FkLmluZGV4fS8ke1N0cmluZyhwYXlsb2FkLnZhcmlhbnQpLnBhZFN0YXJ0KDIsICcwJyl9YDtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHRleHR1cmUgPSBhd2FpdCBsb2FkZXIubG9hZFRleHR1cmUodGV4dHVyZUlkKTtcclxuICAgICAgICAgICAgICAgIChfYSA9IGFzc2V0LnJlbmRlcmVyKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EuYmluZFRleHR1cmUocGF5bG9hZC5pbmRleCwgdGV4dHVyZS5kYXRhKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuc2VuZE1lc3NhZ2UoTWVzc2FnZVR5cGUuQ1NfQ29tcGxldGUsIG51bGwsIG1zZy5pZCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSBpZiAobXNnLnR5cGUgPT09IE1lc3NhZ2VUeXBlLlNDX1NldFBhcmFtZXRlck92ZXJyaWRlKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBwYXlsb2FkID0gbXNnLnBheWxvYWQ7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnN0YXRlLmV4dGVybmFsLm92ZXJyaWRlID0gcGF5bG9hZC5vdmVycmlkZTtcclxuICAgICAgICAgICAgICAgIHRoaXMuc2VuZE1lc3NhZ2UoTWVzc2FnZVR5cGUuQ1NfQ29tcGxldGUsIG51bGwsIG1zZy5pZCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSBpZiAobXNnLnR5cGUgPT09IE1lc3NhZ2VUeXBlLlNDX1NldFBhcmFtZXRlcnMpIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHBheWxvYWQgPSBtc2cucGF5bG9hZDtcclxuICAgICAgICAgICAgICAgIHRoaXMuc3RhdGUuZXh0ZXJuYWwuZmFjZVggPSBwYXlsb2FkLmZhY2VYIC8gNTAgLSAxO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5zdGF0ZS5leHRlcm5hbC5mYWNlWSA9IHBheWxvYWQuZmFjZVkgLyA1MCAtIDE7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnN0YXRlLmV4dGVybmFsLmJvZHlYID0gcGF5bG9hZC5ib2R5WCAvIDUwIC0gMTtcclxuICAgICAgICAgICAgICAgIHRoaXMuc3RhdGUuZXh0ZXJuYWwuYm9keVkgPSBwYXlsb2FkLmJvZHlZIC8gNTAgLSAxO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5zZW5kTWVzc2FnZShNZXNzYWdlVHlwZS5DU19Db21wbGV0ZSwgbnVsbCwgbXNnLmlkKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG4gICAgc2VuZE1lc3NhZ2UodHlwZSwgcGF5bG9hZCwgaWQpIHtcclxuICAgICAgICBpZiAoIXRoaXMucGFyZW50V2luZG93KSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgY29uc3QgbXNnID0ge1xyXG4gICAgICAgICAgICBpZDogaWQgfHwgMCxcclxuICAgICAgICAgICAgdHlwZSxcclxuICAgICAgICAgICAgcGF5bG9hZFxyXG4gICAgICAgIH07XHJcbiAgICAgICAgdGhpcy5wYXJlbnRXaW5kb3cucG9zdE1lc3NhZ2UobXNnLCBQQVJFTlRfT1JJR0lOKTtcclxuICAgIH1cclxufVxyXG5leHBvcnRzLk1lc3NlbmdlciA9IE1lc3NlbmdlcjtcclxuIiwiXCJ1c2Ugc3RyaWN0XCI7XHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcclxuZXhwb3J0cy5Nb2RlbFN0YXRlID0gZXhwb3J0cy5Nb2RlbExheWVyID0gdm9pZCAwO1xyXG52YXIgTW9kZWxMYXllcjtcclxuKGZ1bmN0aW9uIChNb2RlbExheWVyKSB7XHJcbiAgICBNb2RlbExheWVyW01vZGVsTGF5ZXJbXCJCYWNrSGFpclwiXSA9IDBdID0gXCJCYWNrSGFpclwiO1xyXG4gICAgTW9kZWxMYXllcltNb2RlbExheWVyW1wiQm9keVwiXSA9IDFdID0gXCJCb2R5XCI7XHJcbiAgICBNb2RlbExheWVyW01vZGVsTGF5ZXJbXCJFeWVzXCJdID0gMl0gPSBcIkV5ZXNcIjtcclxuICAgIE1vZGVsTGF5ZXJbTW9kZWxMYXllcltcIkZyb250SGFpclwiXSA9IDNdID0gXCJGcm9udEhhaXJcIjtcclxuICAgIE1vZGVsTGF5ZXJbTW9kZWxMYXllcltcIk91dGZpdFwiXSA9IDRdID0gXCJPdXRmaXRcIjtcclxufSkoTW9kZWxMYXllciA9IGV4cG9ydHMuTW9kZWxMYXllciB8fCAoZXhwb3J0cy5Nb2RlbExheWVyID0ge30pKTtcclxuY2xhc3MgTW9kZWxTdGF0ZSB7XHJcbiAgICBjb25zdHJ1Y3Rvcihhc3NldHMpIHtcclxuICAgICAgICB0aGlzLmFzc2V0cyA9IGFzc2V0cztcclxuICAgICAgICB0aGlzLmRhdGEgPSB7XHJcbiAgICAgICAgICAgIFtNb2RlbExheWVyLkJhY2tIYWlyXTogbnVsbCxcclxuICAgICAgICAgICAgW01vZGVsTGF5ZXIuQm9keV06IG51bGwsXHJcbiAgICAgICAgICAgIFtNb2RlbExheWVyLkV5ZXNdOiBudWxsLFxyXG4gICAgICAgICAgICBbTW9kZWxMYXllci5Gcm9udEhhaXJdOiBudWxsLFxyXG4gICAgICAgICAgICBbTW9kZWxMYXllci5PdXRmaXRdOiBudWxsXHJcbiAgICAgICAgfTtcclxuICAgIH1cclxufVxyXG5leHBvcnRzLk1vZGVsU3RhdGUgPSBNb2RlbFN0YXRlO1xyXG4iLCJcInVzZSBzdHJpY3RcIjtcclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xyXG5leHBvcnRzLk1vZGVsID0gdm9pZCAwO1xyXG5jbGFzcyBNb2RlbCB7XHJcbiAgICBjb25zdHJ1Y3Rvcihhc3NldCkge1xyXG4gICAgICAgIHRoaXMuYXNzZXQgPSBhc3NldDtcclxuICAgIH1cclxuICAgIHN5bmNQYXJhbXMocGFyYW1zKSB7XHJcbiAgICB9XHJcbn1cclxuZXhwb3J0cy5Nb2RlbCA9IE1vZGVsO1xyXG4iLCJcInVzZSBzdHJpY3RcIjtcclxudmFyIF9faW1wb3J0RGVmYXVsdCA9ICh0aGlzICYmIHRoaXMuX19pbXBvcnREZWZhdWx0KSB8fCBmdW5jdGlvbiAobW9kKSB7XHJcbiAgICByZXR1cm4gKG1vZCAmJiBtb2QuX19lc01vZHVsZSkgPyBtb2QgOiB7IFwiZGVmYXVsdFwiOiBtb2QgfTtcclxufTtcclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xyXG5jb25zdCBtaXRocmlsXzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcIm1pdGhyaWxcIikpO1xyXG5jb25zdCBtaXRocmlsX3RzeF9jb21wb25lbnRfMSA9IHJlcXVpcmUoXCJtaXRocmlsLXRzeC1jb21wb25lbnRcIik7XHJcbmNvbnN0IGlmcmFtZV8xID0gcmVxdWlyZShcIi4uL3N0b3JlL2lmcmFtZVwiKTtcclxuY29uc3QgdXBncmFkZV8xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCIuLi9ob2MvdXBncmFkZVwiKSk7XHJcbmNsYXNzIEVtYmVkIGV4dGVuZHMgbWl0aHJpbF90c3hfY29tcG9uZW50XzEuTWl0aHJpbFRzeENvbXBvbmVudCB7XHJcbiAgICBvbmNyZWF0ZSh7IGF0dHJzIH0pIHtcclxuICAgICAgICBhdHRycy5kaXNwYXRjaCgoMCwgaWZyYW1lXzEuc2V0SUZyYW1lRWxlbWVudCkoZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2lmcmFtZScpKSk7XHJcbiAgICB9XHJcbiAgICB2aWV3KCkge1xyXG4gICAgICAgIHJldHVybiAoMCwgbWl0aHJpbF8xLmRlZmF1bHQpKFwiZGl2XCIsIHsgY2xhc3M6ICdlbWJlZCBiZy1kYXJrLTkwMCcgfSxcclxuICAgICAgICAgICAgKDAsIG1pdGhyaWxfMS5kZWZhdWx0KShcImlmcmFtZVwiLCB7IGlkOiAnaWZyYW1lJywgYWxsb3c6IFwiYWNjZWxlcm9tZXRlcjsgYXV0b3BsYXkgIDsgZW5jcnlwdGVkLW1lZGlhOyBneXJvc2NvcGU7IHBpY3R1cmUtaW4tcGljdHVyZVwiLCBmcmFtZWJvcmRlcjogXCIwXCIsIGhlaWdodDogXCIxMDAlXCIsIHNyYzogXCIvZW1iZWRcIiwgd2lkdGg6IFwiMTAwJVwiLCBzYW5kYm94OiBcImFsbG93LXNjcmlwdHMgYWxsb3ctc2FtZS1vcmlnaW5cIiwgc3R5bGU6IFwibWluLWhlaWdodDogNTAwcHg7XCIgfSkpO1xyXG4gICAgfVxyXG59XHJcbmV4cG9ydHMuZGVmYXVsdCA9ICgwLCB1cGdyYWRlXzEuZGVmYXVsdCkoRW1iZWQpXHJcbiAgICAuY29ubmVjdCgpO1xyXG4iLCJcInVzZSBzdHJpY3RcIjtcclxudmFyIF9faW1wb3J0RGVmYXVsdCA9ICh0aGlzICYmIHRoaXMuX19pbXBvcnREZWZhdWx0KSB8fCBmdW5jdGlvbiAobW9kKSB7XHJcbiAgICByZXR1cm4gKG1vZCAmJiBtb2QuX19lc01vZHVsZSkgPyBtb2QgOiB7IFwiZGVmYXVsdFwiOiBtb2QgfTtcclxufTtcclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xyXG5jb25zdCBtaXRocmlsXzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcIm1pdGhyaWxcIikpO1xyXG5jb25zdCBtaXRocmlsX3RzeF9jb21wb25lbnRfMSA9IHJlcXVpcmUoXCJtaXRocmlsLXRzeC1jb21wb25lbnRcIik7XHJcbmNvbnN0IEVtYmVkXzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcIi4vRW1iZWRcIikpO1xyXG5jb25zdCBQYW5lbF8xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCIuL1BhbmVsXCIpKTtcclxuY2xhc3MgTGF5b3V0IGV4dGVuZHMgbWl0aHJpbF90c3hfY29tcG9uZW50XzEuTWl0aHJpbFRzeENvbXBvbmVudCB7XHJcbiAgICB2aWV3KHsgYXR0cnMgfSkge1xyXG4gICAgICAgIHJldHVybiAoMCwgbWl0aHJpbF8xLmRlZmF1bHQpKFwiZGl2XCIsIHsgY2xhc3M6ICdhcHAgZmxleCBoLWZ1bGwnIH0sXHJcbiAgICAgICAgICAgICgwLCBtaXRocmlsXzEuZGVmYXVsdCkoXCJkaXZcIiwgeyBjbGFzczogJ2ZsZXgganVzdGlmeS1jZW50ZXIgaXRlbXMtY2VudGVyIGZsZXgtMSB3LWZ1bGwnIH0sXHJcbiAgICAgICAgICAgICAgICAoMCwgbWl0aHJpbF8xLmRlZmF1bHQpKEVtYmVkXzEuZGVmYXVsdCwgbnVsbCkpLFxyXG4gICAgICAgICAgICAoMCwgbWl0aHJpbF8xLmRlZmF1bHQpKFBhbmVsXzEuZGVmYXVsdCwgbnVsbCkpO1xyXG4gICAgfVxyXG59XHJcbmV4cG9ydHMuZGVmYXVsdCA9IExheW91dDtcclxuIiwiXCJ1c2Ugc3RyaWN0XCI7XHJcbnZhciBfX2ltcG9ydERlZmF1bHQgPSAodGhpcyAmJiB0aGlzLl9faW1wb3J0RGVmYXVsdCkgfHwgZnVuY3Rpb24gKG1vZCkge1xyXG4gICAgcmV0dXJuIChtb2QgJiYgbW9kLl9fZXNNb2R1bGUpID8gbW9kIDogeyBcImRlZmF1bHRcIjogbW9kIH07XHJcbn07XHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcclxuY29uc3QgbWl0aHJpbF8xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCJtaXRocmlsXCIpKTtcclxuY29uc3QgbWl0aHJpbF90c3hfY29tcG9uZW50XzEgPSByZXF1aXJlKFwibWl0aHJpbC10c3gtY29tcG9uZW50XCIpO1xyXG5jb25zdCB0YWJfMSA9IHJlcXVpcmUoXCIuLi9zdG9yZS90YWJcIik7XHJcbmNvbnN0IHVwZ3JhZGVfMSA9IF9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwiLi4vaG9jL3VwZ3JhZGVcIikpO1xyXG5jb25zdCBQYW5lbFRhYl8xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCIuL1BhbmVsVGFiXCIpKTtcclxuY29uc3QgVGFiT3V0Zml0XzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcIi4vdGFicy9UYWJPdXRmaXRcIikpO1xyXG5jb25zdCBUYWJCb2R5XzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcIi4vdGFicy9UYWJCb2R5XCIpKTtcclxuY29uc3QgVGFiRXllXzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcIi4vdGFicy9UYWJFeWVcIikpO1xyXG5jb25zdCBUYWJIYWlyXzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcIi4vdGFicy9UYWJIYWlyXCIpKTtcclxuY29uc3QgVGFiUGFyYW1ldGVyc18xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCIuL3RhYnMvVGFiUGFyYW1ldGVyc1wiKSk7XHJcbmNvbnN0IFRhYkNvbXBvbmVudHMgPSB7XHJcbiAgICBbdGFiXzEuVGFiSWQuT3V0Zml0XTogVGFiT3V0Zml0XzEuZGVmYXVsdCxcclxuICAgIFt0YWJfMS5UYWJJZC5Cb2R5XTogVGFiQm9keV8xLmRlZmF1bHQsXHJcbiAgICBbdGFiXzEuVGFiSWQuRXllXTogVGFiRXllXzEuZGVmYXVsdCxcclxuICAgIFt0YWJfMS5UYWJJZC5IYWlyXTogVGFiSGFpcl8xLmRlZmF1bHQsXHJcbiAgICBbdGFiXzEuVGFiSWQuUGFyYW1ldGVyc106IFRhYlBhcmFtZXRlcnNfMS5kZWZhdWx0XHJcbn07XHJcbmNsYXNzIFBhbmVsIGV4dGVuZHMgbWl0aHJpbF90c3hfY29tcG9uZW50XzEuTWl0aHJpbFRzeENvbXBvbmVudCB7XHJcbiAgICB2aWV3KHsgYXR0cnMgfSkge1xyXG4gICAgICAgIGNvbnN0IFRhYkNvbXBuZW50ID0gVGFiQ29tcG9uZW50c1thdHRycy5hY3RpdmVUYWJdO1xyXG4gICAgICAgIHJldHVybiAoMCwgbWl0aHJpbF8xLmRlZmF1bHQpKFwiZGl2XCIsIHsgY2xhc3M6ICdmbGV4IHctMjQwIGJnLWRhcmstODAwJyB9LFxyXG4gICAgICAgICAgICAoMCwgbWl0aHJpbF8xLmRlZmF1bHQpKFwiZGl2XCIsIHsgY2xhc3M6ICdmbGV4IGZsZXgtY29sIHB4LTY1IHB5LTE3NScgfSxcclxuICAgICAgICAgICAgICAgICgwLCBtaXRocmlsXzEuZGVmYXVsdCkoUGFuZWxUYWJfMS5kZWZhdWx0LCB7IGlkOiB0YWJfMS5UYWJJZC5PdXRmaXQsIGFjdGl2ZVRhYjogYXR0cnMuYWN0aXZlVGFiIH0sIFwiT1VURklUXCIpLFxyXG4gICAgICAgICAgICAgICAgKDAsIG1pdGhyaWxfMS5kZWZhdWx0KShQYW5lbFRhYl8xLmRlZmF1bHQsIHsgaWQ6IHRhYl8xLlRhYklkLkJvZHksIGFjdGl2ZVRhYjogYXR0cnMuYWN0aXZlVGFiIH0sIFwiQk9EWVwiKSxcclxuICAgICAgICAgICAgICAgICgwLCBtaXRocmlsXzEuZGVmYXVsdCkoUGFuZWxUYWJfMS5kZWZhdWx0LCB7IGlkOiB0YWJfMS5UYWJJZC5FeWUsIGFjdGl2ZVRhYjogYXR0cnMuYWN0aXZlVGFiIH0sIFwiRVlFU1wiKSxcclxuICAgICAgICAgICAgICAgICgwLCBtaXRocmlsXzEuZGVmYXVsdCkoUGFuZWxUYWJfMS5kZWZhdWx0LCB7IGlkOiB0YWJfMS5UYWJJZC5IYWlyLCBhY3RpdmVUYWI6IGF0dHJzLmFjdGl2ZVRhYiB9LCBcIkhBSVJcIiksXHJcbiAgICAgICAgICAgICAgICAoMCwgbWl0aHJpbF8xLmRlZmF1bHQpKFBhbmVsVGFiXzEuZGVmYXVsdCwgeyBpZDogdGFiXzEuVGFiSWQuUGFyYW1ldGVycywgYWN0aXZlVGFiOiBhdHRycy5hY3RpdmVUYWIgfSwgXCJQQVJBTUVURVJTXCIpKSxcclxuICAgICAgICAgICAgKDAsIG1pdGhyaWxfMS5kZWZhdWx0KShcImRpdlwiLCB7IGNsYXNzOiAnZmxleC0xIHctZnVsbCBiZy1kYXJrLTkwMCBib3JkZXItZGFyay03MDAnIH0sXHJcbiAgICAgICAgICAgICAgICAoMCwgbWl0aHJpbF8xLmRlZmF1bHQpKFRhYkNvbXBuZW50LCBudWxsKSkpO1xyXG4gICAgfVxyXG59XHJcbmV4cG9ydHMuZGVmYXVsdCA9ICgwLCB1cGdyYWRlXzEuZGVmYXVsdCkoUGFuZWwpXHJcbiAgICAuY29ubmVjdCgoc3RhdGUpID0+ICh7XHJcbiAgICBhY3RpdmVUYWI6IHN0YXRlLnRhYlxyXG59KSk7XHJcbiIsIlwidXNlIHN0cmljdFwiO1xyXG52YXIgX19pbXBvcnREZWZhdWx0ID0gKHRoaXMgJiYgdGhpcy5fX2ltcG9ydERlZmF1bHQpIHx8IGZ1bmN0aW9uIChtb2QpIHtcclxuICAgIHJldHVybiAobW9kICYmIG1vZC5fX2VzTW9kdWxlKSA/IG1vZCA6IHsgXCJkZWZhdWx0XCI6IG1vZCB9O1xyXG59O1xyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XHJcbmNvbnN0IG1pdGhyaWxfMSA9IF9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwibWl0aHJpbFwiKSk7XHJcbmNvbnN0IG1pdGhyaWxfdHN4X2NvbXBvbmVudF8xID0gcmVxdWlyZShcIm1pdGhyaWwtdHN4LWNvbXBvbmVudFwiKTtcclxuY29uc3QgdXBncmFkZV8xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCIuLi9ob2MvdXBncmFkZVwiKSk7XHJcbmNvbnN0IHRhYl8xID0gcmVxdWlyZShcIi4uL3N0b3JlL3RhYlwiKTtcclxuY2xhc3MgVGFiIGV4dGVuZHMgbWl0aHJpbF90c3hfY29tcG9uZW50XzEuTWl0aHJpbFRzeENvbXBvbmVudCB7XHJcbiAgICB2aWV3KHsgYXR0cnMsIGNoaWxkcmVuIH0pIHtcclxuICAgICAgICBjb25zdCBhY3RpdmVDbGFzcyA9IGF0dHJzLmlkID09PSBhdHRycy5hY3RpdmVUYWIgPyAnIGJnLWRhcmstNzAwJyA6ICcnO1xyXG4gICAgICAgIHJldHVybiAoMCwgbWl0aHJpbF8xLmRlZmF1bHQpKFwiZGl2XCIsIHsgY2xhc3M6IGBob3ZlcjpiZy1kYXJrLTcwMCBmbGV4IGp1c3RpZnktY2VudGVyIGl0ZW1zLWNlbnRlciB3LTE3MCBoLTE3MCBtYi02MCBjdXJzb3ItcG9pbnRlciB0ZXh0LXhzIHJvdW5kZWQtbGcgdGV4dC1jZW50ZXIke2FjdGl2ZUNsYXNzfWAsIG9uY2xpY2s6ICgpID0+IGF0dHJzLmRpc3BhdGNoKCgwLCB0YWJfMS5zZXRBY3RpdmVUYWIpKGF0dHJzLmlkKSkgfSwgY2hpbGRyZW4pO1xyXG4gICAgfVxyXG59XHJcbmV4cG9ydHMuZGVmYXVsdCA9ICgwLCB1cGdyYWRlXzEuZGVmYXVsdCkoVGFiKVxyXG4gICAgLmNvbm5lY3QoKTtcclxuIiwiXCJ1c2Ugc3RyaWN0XCI7XHJcbnZhciBfX2ltcG9ydERlZmF1bHQgPSAodGhpcyAmJiB0aGlzLl9faW1wb3J0RGVmYXVsdCkgfHwgZnVuY3Rpb24gKG1vZCkge1xyXG4gICAgcmV0dXJuIChtb2QgJiYgbW9kLl9fZXNNb2R1bGUpID8gbW9kIDogeyBcImRlZmF1bHRcIjogbW9kIH07XHJcbn07XHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcclxuY29uc3QgbWl0aHJpbF8xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCJtaXRocmlsXCIpKTtcclxuY29uc3QgbWl0aHJpbF90c3hfY29tcG9uZW50XzEgPSByZXF1aXJlKFwibWl0aHJpbC10c3gtY29tcG9uZW50XCIpO1xyXG5jb25zdCBpdGVtc18xID0gcmVxdWlyZShcIi4uLy4uL3N0b3JlL2l0ZW1zXCIpO1xyXG5jb25zdCB1cGdyYWRlXzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcIi4uLy4uL2hvYy91cGdyYWRlXCIpKTtcclxuY29uc3QgSXRlbV8xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCIuLi91aS9JdGVtXCIpKTtcclxuY29uc3QgaXRlbXMgPSBbXHJcbiAgICB7IG5hbWU6ICdOZXV0cmFsJywgY29sb3I6ICcjZjNjY2JmJyB9LFxyXG4gICAgeyBuYW1lOiAnQnJpZ2h0JywgY29sb3I6ICcjZjNkM2NkJyB9LFxyXG4gICAgeyBuYW1lOiAnV2FybScsIGNvbG9yOiAnI2UzYmRhZicgfSxcclxuICAgIHsgbmFtZTogJ1RhbicsIGNvbG9yOiAnI2QxYTc5YicgfSxcclxuICAgIHsgbmFtZTogJ0RhcmsnLCBjb2xvcjogJyNjMDk1ODknIH1cclxuXTtcclxuY2xhc3MgVGFiQm9keSBleHRlbmRzIG1pdGhyaWxfdHN4X2NvbXBvbmVudF8xLk1pdGhyaWxUc3hDb21wb25lbnQge1xyXG4gICAgdmlldyh7IGF0dHJzIH0pIHtcclxuICAgICAgICByZXR1cm4gKDAsIG1pdGhyaWxfMS5kZWZhdWx0KShcImRpdlwiLCB7IGNsYXNzOiAncHgtMTIwIHB5LTE0MCcgfSxcclxuICAgICAgICAgICAgKDAsIG1pdGhyaWxfMS5kZWZhdWx0KShcImgxXCIsIHsgY2xhc3M6ICdtYi0xMDAgdGV4dC1sZyB0ZXh0LXJpZ2h0IGZvbnQtbWVkaXVtJyB9LCBcIkJPRFkgQ09MT1JcIiksXHJcbiAgICAgICAgICAgIGl0ZW1zLm1hcCgoaXRlbSwgaSkgPT4gKDAsIG1pdGhyaWxfMS5kZWZhdWx0KShJdGVtXzEuZGVmYXVsdCwgeyBpdGVtR3JvdXA6IGl0ZW1zXzEuSXRlbUdyb3VwLkJvZHlDb2xvciwgaXRlbUlkeDogaSwgYWN0aXZlOiBhdHRycy5hY3RpdmVJdGVtID09PSBpLCBjb2xvcjogaXRlbS5jb2xvciwgbW9kZWxJZDogJ21vZGVsLzAwMDAwMScsIGluZGV4OiAwLCB2YXJpYW50OiBpIH0sIGl0ZW0ubmFtZSkpKTtcclxuICAgIH1cclxufVxyXG5leHBvcnRzLmRlZmF1bHQgPSAoMCwgdXBncmFkZV8xLmRlZmF1bHQpKFRhYkJvZHkpXHJcbiAgICAuY29ubmVjdCgoc3RhdGUpID0+ICh7XHJcbiAgICBhY3RpdmVJdGVtOiBzdGF0ZS5pdGVtcy5jdXJzb3JQb3NpdGlvbltpdGVtc18xLkl0ZW1Hcm91cC5Cb2R5Q29sb3JdXHJcbn0pKTtcclxuIiwiXCJ1c2Ugc3RyaWN0XCI7XHJcbnZhciBfX2ltcG9ydERlZmF1bHQgPSAodGhpcyAmJiB0aGlzLl9faW1wb3J0RGVmYXVsdCkgfHwgZnVuY3Rpb24gKG1vZCkge1xyXG4gICAgcmV0dXJuIChtb2QgJiYgbW9kLl9fZXNNb2R1bGUpID8gbW9kIDogeyBcImRlZmF1bHRcIjogbW9kIH07XHJcbn07XHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcclxuY29uc3QgbWl0aHJpbF8xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCJtaXRocmlsXCIpKTtcclxuY29uc3QgbWl0aHJpbF90c3hfY29tcG9uZW50XzEgPSByZXF1aXJlKFwibWl0aHJpbC10c3gtY29tcG9uZW50XCIpO1xyXG5jb25zdCBpdGVtc18xID0gcmVxdWlyZShcIi4uLy4uL3N0b3JlL2l0ZW1zXCIpO1xyXG5jb25zdCB1cGdyYWRlXzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcIi4uLy4uL2hvYy91cGdyYWRlXCIpKTtcclxuY29uc3QgSXRlbV8xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCIuLi91aS9JdGVtXCIpKTtcclxuY29uc3QgaXRlbXMgPSBbXHJcbiAgICB7IGlkOiAxLCBuYW1lOiAnQmxhY2snIH0sXHJcbiAgICB7IGlkOiAwLCBuYW1lOiAnQmx1ZScgfSxcclxuICAgIHsgaWQ6IDIsIG5hbWU6ICdCcm93bicgfSxcclxuICAgIHsgaWQ6IDMsIG5hbWU6ICdHcmF5JyB9LFxyXG4gICAgeyBpZDogNCwgbmFtZTogJ0dyZWVuJyB9LFxyXG4gICAgeyBpZDogNSwgbmFtZTogJ0xpbGFjJyB9LFxyXG4gICAgeyBpZDogNiwgbmFtZTogJ1B1cnBsZScgfSxcclxuICAgIHsgaWQ6IDcsIG5hbWU6ICdSZWQnIH1cclxuXTtcclxuY2xhc3MgVGFiRXllIGV4dGVuZHMgbWl0aHJpbF90c3hfY29tcG9uZW50XzEuTWl0aHJpbFRzeENvbXBvbmVudCB7XHJcbiAgICB2aWV3KHsgYXR0cnMgfSkge1xyXG4gICAgICAgIHJldHVybiAoMCwgbWl0aHJpbF8xLmRlZmF1bHQpKFwiZGl2XCIsIHsgY2xhc3M6ICdweC0xMjAgcHktMTQwJyB9LFxyXG4gICAgICAgICAgICAoMCwgbWl0aHJpbF8xLmRlZmF1bHQpKFwiaDFcIiwgeyBjbGFzczogJ21iLTEwMCB0ZXh0LWxnIHRleHQtcmlnaHQgZm9udC1tZWRpdW0nIH0sIFwiRVlFIENPTE9SXCIpLFxyXG4gICAgICAgICAgICBpdGVtcy5tYXAoKGl0ZW0sIGkpID0+ICgwLCBtaXRocmlsXzEuZGVmYXVsdCkoSXRlbV8xLmRlZmF1bHQsIHsgaXRlbUdyb3VwOiBpdGVtc18xLkl0ZW1Hcm91cC5FeWVDb2xvciwgaXRlbUlkeDogaSwgYWN0aXZlOiBhdHRycy5hY3RpdmVJdGVtID09PSBpLCBpY29uU3JjOiBgL2Fzc2V0cy9pY29uL2V5ZS8ke2l0ZW0ubmFtZS50b0xvd2VyQ2FzZSgpfS5wbmdgLCBtb2RlbElkOiAnbW9kZWwvMDAwMDAxJywgaW5kZXg6IDEsIHZhcmlhbnQ6IGl0ZW0uaWQgfSwgaXRlbS5uYW1lKSkpO1xyXG4gICAgfVxyXG59XHJcbmV4cG9ydHMuZGVmYXVsdCA9ICgwLCB1cGdyYWRlXzEuZGVmYXVsdCkoVGFiRXllKVxyXG4gICAgLmNvbm5lY3QoKHN0YXRlKSA9PiAoe1xyXG4gICAgYWN0aXZlSXRlbTogc3RhdGUuaXRlbXMuY3Vyc29yUG9zaXRpb25baXRlbXNfMS5JdGVtR3JvdXAuRXllQ29sb3JdXHJcbn0pKTtcclxuIiwiXCJ1c2Ugc3RyaWN0XCI7XHJcbnZhciBfX2ltcG9ydERlZmF1bHQgPSAodGhpcyAmJiB0aGlzLl9faW1wb3J0RGVmYXVsdCkgfHwgZnVuY3Rpb24gKG1vZCkge1xyXG4gICAgcmV0dXJuIChtb2QgJiYgbW9kLl9fZXNNb2R1bGUpID8gbW9kIDogeyBcImRlZmF1bHRcIjogbW9kIH07XHJcbn07XHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcclxuY29uc3QgbWl0aHJpbF8xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCJtaXRocmlsXCIpKTtcclxuY29uc3QgbWl0aHJpbF90c3hfY29tcG9uZW50XzEgPSByZXF1aXJlKFwibWl0aHJpbC10c3gtY29tcG9uZW50XCIpO1xyXG5jb25zdCBpdGVtc18xID0gcmVxdWlyZShcIi4uLy4uL3N0b3JlL2l0ZW1zXCIpO1xyXG5jb25zdCB1cGdyYWRlXzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcIi4uLy4uL2hvYy91cGdyYWRlXCIpKTtcclxuY29uc3QgSXRlbV8xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCIuLi91aS9JdGVtXCIpKTtcclxuY29uc3QgaXRlbXMgPSBbXHJcbiAgICB7IGlkOiAzLCBuYW1lOiAnQXNoJywgY29sb3I6ICcjOTM3YTZmJyB9LFxyXG4gICAgeyBpZDogMSwgbmFtZTogJ0F6dXJlJywgY29sb3I6ICcjNjc3YWFiJyB9LFxyXG4gICAgeyBpZDogMiwgbmFtZTogJ0JsYWNrIFR1cnF1b2lzZScsIGNvbG9yOiAnIzI5MjkyOScgfSxcclxuICAgIHsgaWQ6IDAsIG5hbWU6ICdHcmF5JywgY29sb3I6ICcjNTA0YzRlJyB9LFxyXG4gICAgeyBpZDogNCwgbmFtZTogJ1N0cmF3YmVycnknLCBjb2xvcjogJyNkZDkzYTInIH1cclxuXTtcclxuY2xhc3MgVGFiSGFpciBleHRlbmRzIG1pdGhyaWxfdHN4X2NvbXBvbmVudF8xLk1pdGhyaWxUc3hDb21wb25lbnQge1xyXG4gICAgdmlldyh7IGF0dHJzIH0pIHtcclxuICAgICAgICByZXR1cm4gKDAsIG1pdGhyaWxfMS5kZWZhdWx0KShcImRpdlwiLCB7IGNsYXNzOiAncHgtMTIwIHB5LTE0MCcgfSxcclxuICAgICAgICAgICAgKDAsIG1pdGhyaWxfMS5kZWZhdWx0KShcImgxXCIsIHsgY2xhc3M6ICdtYi0xMDAgdGV4dC1sZyB0ZXh0LXJpZ2h0IGZvbnQtbWVkaXVtJyB9LCBcIkhBSVIgQ09MT1JcIiksXHJcbiAgICAgICAgICAgIGl0ZW1zLm1hcCgoaXRlbSwgaSkgPT4gKDAsIG1pdGhyaWxfMS5kZWZhdWx0KShJdGVtXzEuZGVmYXVsdCwgeyBpdGVtR3JvdXA6IGl0ZW1zXzEuSXRlbUdyb3VwLkhhaXJDb2xvciwgaXRlbUlkeDogaSwgYWN0aXZlOiBhdHRycy5hY3RpdmVJdGVtID09PSBpLCBjb2xvcjogaXRlbS5jb2xvciwgbW9kZWxJZDogJ21vZGVsLzAwMDAwMScsIGluZGV4OiBbNCwgNV0sIHZhcmlhbnQ6IGl0ZW0uaWQgfSwgaXRlbS5uYW1lKSkpO1xyXG4gICAgfVxyXG59XHJcbmV4cG9ydHMuZGVmYXVsdCA9ICgwLCB1cGdyYWRlXzEuZGVmYXVsdCkoVGFiSGFpcilcclxuICAgIC5jb25uZWN0KChzdGF0ZSkgPT4gKHtcclxuICAgIGFjdGl2ZUl0ZW06IHN0YXRlLml0ZW1zLmN1cnNvclBvc2l0aW9uW2l0ZW1zXzEuSXRlbUdyb3VwLkhhaXJDb2xvcl1cclxufSkpO1xyXG4iLCJcInVzZSBzdHJpY3RcIjtcclxudmFyIF9faW1wb3J0RGVmYXVsdCA9ICh0aGlzICYmIHRoaXMuX19pbXBvcnREZWZhdWx0KSB8fCBmdW5jdGlvbiAobW9kKSB7XHJcbiAgICByZXR1cm4gKG1vZCAmJiBtb2QuX19lc01vZHVsZSkgPyBtb2QgOiB7IFwiZGVmYXVsdFwiOiBtb2QgfTtcclxufTtcclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xyXG5jb25zdCBtaXRocmlsXzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcIm1pdGhyaWxcIikpO1xyXG5jb25zdCBtaXRocmlsX3RzeF9jb21wb25lbnRfMSA9IHJlcXVpcmUoXCJtaXRocmlsLXRzeC1jb21wb25lbnRcIik7XHJcbmNvbnN0IGl0ZW1zXzEgPSByZXF1aXJlKFwiLi4vLi4vc3RvcmUvaXRlbXNcIik7XHJcbmNvbnN0IHVwZ3JhZGVfMSA9IF9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwiLi4vLi4vaG9jL3VwZ3JhZGVcIikpO1xyXG5jb25zdCBJdGVtXzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcIi4uL3VpL0l0ZW1cIikpO1xyXG5jb25zdCBNb2RlbFN0YXRlXzEgPSByZXF1aXJlKFwiYXN1bmEtd2ViLWxpdmUyZC9zcmMvc3RhdGUvTW9kZWxTdGF0ZVwiKTtcclxuY29uc3QgaXRlbXMgPSBbXHJcbiAgICB7IG5hbWU6ICdBY2Ugb2YgU3BhZGVzJywgaWQ6ICdtb2RlbC9PdXRmaXQvQWNlX09mX1NwYWRlcycsIGNvbG9yOiAnI2ZmZicgfSxcclxuICAgIHsgbmFtZTogJ01hZ2ljIEFwcHJlbnRpY2UnLCBpZDogJ21vZGVsL091dGZpdC9NYWdpY19BcHByZW50aWNlJywgY29sb3I6ICcjZmZmJyB9LFxyXG4gICAgeyBuYW1lOiAnU2lsdmVyaG9ybicsIGlkOiAnbW9kZWwvT3V0Zml0L1NpbHZlcmhvcm4nLCBjb2xvcjogJyNmZmYnIH0sXHJcbiAgICB7IG5hbWU6ICdTd2VhdGVyIFZlc3QnLCBpZDogJ21vZGVsL091dGZpdC9Td2VhdGVyX1Zlc3QnLCBjb2xvcjogJyNmZmYnIH0sXHJcbiAgICB7IG5hbWU6ICdXaGl0ZSBUYW5rIFRvcCcsIGlkOiAnbW9kZWwvT3V0Zml0L1doaXRlX1RhbmtfVG9wJywgY29sb3I6ICcjZmZmJyB9XHJcbl07XHJcbmNsYXNzIFRhYk91dGZpdCBleHRlbmRzIG1pdGhyaWxfdHN4X2NvbXBvbmVudF8xLk1pdGhyaWxUc3hDb21wb25lbnQge1xyXG4gICAgdmlldyh7IGF0dHJzIH0pIHtcclxuICAgICAgICByZXR1cm4gKDAsIG1pdGhyaWxfMS5kZWZhdWx0KShcImRpdlwiLCB7IGNsYXNzOiAncHgtMTIwIHB5LTE0MCcgfSxcclxuICAgICAgICAgICAgKDAsIG1pdGhyaWxfMS5kZWZhdWx0KShcImgxXCIsIHsgY2xhc3M6ICdtYi0xMDAgdGV4dC1sZyB0ZXh0LXJpZ2h0IGZvbnQtbWVkaXVtJyB9LCBcIk9VVEZJVFwiKSxcclxuICAgICAgICAgICAgaXRlbXMubWFwKChpdGVtLCBpKSA9PiAoMCwgbWl0aHJpbF8xLmRlZmF1bHQpKEl0ZW1fMS5kZWZhdWx0LCB7IGl0ZW1Hcm91cDogaXRlbXNfMS5JdGVtR3JvdXAuT3V0Zml0LCBpdGVtSWR4OiBpLCBhY3RpdmU6IGF0dHJzLmFjdGl2ZUl0ZW0gPT09IGksIGNvbG9yOiBpdGVtLmNvbG9yLCBtb2RlbExheWVyOiBNb2RlbFN0YXRlXzEuTW9kZWxMYXllci5PdXRmaXQsIG1vZGVsSWQ6IGl0ZW0uaWQsIGluZGV4OiAwLCB2YXJpYW50OiBpIH0sIGl0ZW0ubmFtZSkpKTtcclxuICAgIH1cclxufVxyXG5leHBvcnRzLmRlZmF1bHQgPSAoMCwgdXBncmFkZV8xLmRlZmF1bHQpKFRhYk91dGZpdClcclxuICAgIC5jb25uZWN0KChzdGF0ZSkgPT4gKHtcclxuICAgIGFjdGl2ZUl0ZW06IHN0YXRlLml0ZW1zLmN1cnNvclBvc2l0aW9uW2l0ZW1zXzEuSXRlbUdyb3VwLk91dGZpdF1cclxufSkpO1xyXG4iLCJcInVzZSBzdHJpY3RcIjtcclxudmFyIF9faW1wb3J0RGVmYXVsdCA9ICh0aGlzICYmIHRoaXMuX19pbXBvcnREZWZhdWx0KSB8fCBmdW5jdGlvbiAobW9kKSB7XHJcbiAgICByZXR1cm4gKG1vZCAmJiBtb2QuX19lc01vZHVsZSkgPyBtb2QgOiB7IFwiZGVmYXVsdFwiOiBtb2QgfTtcclxufTtcclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xyXG5jb25zdCBtaXRocmlsXzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcIm1pdGhyaWxcIikpO1xyXG5jb25zdCBtaXRocmlsX3RzeF9jb21wb25lbnRfMSA9IHJlcXVpcmUoXCJtaXRocmlsLXRzeC1jb21wb25lbnRcIik7XHJcbmNvbnN0IHBhcmFtZXRlcnNfMSA9IHJlcXVpcmUoXCIuLi8uLi9zdG9yZS9wYXJhbWV0ZXJzXCIpO1xyXG5jb25zdCB1cGdyYWRlXzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcIi4uLy4uL2hvYy91cGdyYWRlXCIpKTtcclxuY29uc3QgU2xpZGVyXzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcIi4uL3VpL1NsaWRlclwiKSk7XHJcbmNvbnN0IHBhcmFtZXRlcnMgPSBbXHJcbiAgICB7IHBhcmFtOiBwYXJhbWV0ZXJzXzEuUGFyYW1ldGVyLkZhY2VYLCBsYWJlbDogJ0ZhY2UgWCcgfSxcclxuICAgIHsgcGFyYW06IHBhcmFtZXRlcnNfMS5QYXJhbWV0ZXIuRmFjZVksIGxhYmVsOiAnRmFjZSBZJyB9LFxyXG4gICAgeyBwYXJhbTogcGFyYW1ldGVyc18xLlBhcmFtZXRlci5Cb2R5WCwgbGFiZWw6ICdCb2R5IFgnIH0sXHJcbiAgICB7IHBhcmFtOiBwYXJhbWV0ZXJzXzEuUGFyYW1ldGVyLkJvZHlZLCBsYWJlbDogJ0JvZHkgWScgfVxyXG5dO1xyXG5jbGFzcyBUYWJQYXJhbWV0ZXJzIGV4dGVuZHMgbWl0aHJpbF90c3hfY29tcG9uZW50XzEuTWl0aHJpbFRzeENvbXBvbmVudCB7XHJcbiAgICB2aWV3KHsgYXR0cnMgfSkge1xyXG4gICAgICAgIGNvbnN0IGRpc2FibGVkQ2xhc3MgPSBhdHRycy5vdmVycmlkZSA/ICcnIDogJyBvcGFjaXR5LTQwIHBvaW50ZXItZXZlbnRzLW5vbmUnO1xyXG4gICAgICAgIGNvbnN0IHRvZ2dsZUNoZWNrZWQgPSAoKSA9PiB7XHJcbiAgICAgICAgICAgIGF0dHJzLmRpc3BhdGNoKCgwLCBwYXJhbWV0ZXJzXzEudG9nZ2xlT3ZlcnJpZGUpKHsgdmFsdWU6ICFhdHRycy5vdmVycmlkZSB9KSk7XHJcbiAgICAgICAgfTtcclxuICAgICAgICByZXR1cm4gKDAsIG1pdGhyaWxfMS5kZWZhdWx0KShcImRpdlwiLCB7IGNsYXNzOiAncHgtMTIwIHB5LTE0MCcgfSxcclxuICAgICAgICAgICAgKDAsIG1pdGhyaWxfMS5kZWZhdWx0KShcImgxXCIsIHsgY2xhc3M6ICdtYi0xMDAgdGV4dC1sZyB0ZXh0LXJpZ2h0IGZvbnQtbWVkaXVtJyB9LCBcIlBBUkFNRVRFUlNcIiksXHJcbiAgICAgICAgICAgICgwLCBtaXRocmlsXzEuZGVmYXVsdCkoXCJkaXZcIiwgeyBjbGFzczogJ2Zvcm0gbWItMTUwIGN1cnNvci1wb2ludGVyJywgb25jbGljazogdG9nZ2xlQ2hlY2tlZCB9LFxyXG4gICAgICAgICAgICAgICAgKDAsIG1pdGhyaWxfMS5kZWZhdWx0KShcImlucHV0XCIsIHsgdHlwZTogJ2NoZWNrYm94JywgY2xhc3M6ICdiZy1kYXJrLTcwMCB3LTExMCBoLTExMCBtci04MCBib3JkZXItbm9uZSByb3VuZGVkLW1kIGFsaWduLW1pZGRsZSBhcHBlYXJhbmNlLW5vbmUgY3Vyc29yLXBvaW50ZXIgY2hlY2tlZDpiZy1zbGF0ZS00MDAnLCBjaGVja2VkOiBhdHRycy5vdmVycmlkZSB9KSxcclxuICAgICAgICAgICAgICAgICgwLCBtaXRocmlsXzEuZGVmYXVsdCkoXCJsYWJlbFwiLCB7IGNsYXNzOiAnYWxpZ24tbWlkZGxlIGN1cnNvci1wb2ludGVyJyB9LCBcIlVzZSBjdXN0b20gcGFyYW1ldGVyc1wiKSksXHJcbiAgICAgICAgICAgICgwLCBtaXRocmlsXzEuZGVmYXVsdCkoXCJkaXZcIiwgeyBjbGFzczogZGlzYWJsZWRDbGFzcyB9LCBwYXJhbWV0ZXJzLm1hcCgoaXRlbSkgPT4gKDAsIG1pdGhyaWxfMS5kZWZhdWx0KShTbGlkZXJfMS5kZWZhdWx0LCB7IHBhcmFtOiBpdGVtLnBhcmFtLCBsYWJlbDogaXRlbS5sYWJlbCwgdmFsdWU6IGF0dHJzLnZhbHVlc1tpdGVtLnBhcmFtXSB9KSkpKTtcclxuICAgIH1cclxufVxyXG5leHBvcnRzLmRlZmF1bHQgPSAoMCwgdXBncmFkZV8xLmRlZmF1bHQpKFRhYlBhcmFtZXRlcnMpXHJcbiAgICAuY29ubmVjdCgoc3RhdGUpID0+ICh7XHJcbiAgICBvdmVycmlkZTogc3RhdGUucGFyYW1ldGVycy5vdmVycmlkZSxcclxuICAgIHZhbHVlczogc3RhdGUucGFyYW1ldGVycy52YWx1ZVxyXG59KSk7XHJcbiIsIlwidXNlIHN0cmljdFwiO1xyXG52YXIgX19pbXBvcnREZWZhdWx0ID0gKHRoaXMgJiYgdGhpcy5fX2ltcG9ydERlZmF1bHQpIHx8IGZ1bmN0aW9uIChtb2QpIHtcclxuICAgIHJldHVybiAobW9kICYmIG1vZC5fX2VzTW9kdWxlKSA/IG1vZCA6IHsgXCJkZWZhdWx0XCI6IG1vZCB9O1xyXG59O1xyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XHJcbmNvbnN0IG1pdGhyaWxfMSA9IF9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwibWl0aHJpbFwiKSk7XHJcbmNvbnN0IG1pdGhyaWxfdHN4X2NvbXBvbmVudF8xID0gcmVxdWlyZShcIm1pdGhyaWwtdHN4LWNvbXBvbmVudFwiKTtcclxuY29uc3QgdXBncmFkZV8xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCIuLi8uLi9ob2MvdXBncmFkZVwiKSk7XHJcbmNvbnN0IGl0ZW1zXzEgPSByZXF1aXJlKFwiLi4vLi4vc3RvcmUvaXRlbXNcIik7XHJcbmNvbnN0IGlmcmFtZV8xID0gcmVxdWlyZShcIi4uLy4uL3N0b3JlL2lmcmFtZVwiKTtcclxuY2xhc3MgSXRlbSBleHRlbmRzIG1pdGhyaWxfdHN4X2NvbXBvbmVudF8xLk1pdGhyaWxUc3hDb21wb25lbnQge1xyXG4gICAgdmlldyh7IGF0dHJzLCBjaGlsZHJlbiB9KSB7XHJcbiAgICAgICAgY29uc3QgYWN0aXZlQ2xhc3MgPSBhdHRycy5hY3RpdmUgPyAnIGJnLWRhcmstNzAwJyA6ICcnO1xyXG4gICAgICAgIGNvbnN0IGNvbG9yU3R5bGUgPSBhdHRycy5jb2xvciA/IGBiYWNrZ3JvdW5kOiR7YXR0cnMuY29sb3J9O2AgOiAnJztcclxuICAgICAgICBjb25zdCBpY29uU3R5bGUgPSBhdHRycy5pY29uU3JjID8gYGJhY2tncm91bmQtaW1hZ2U6dXJsKCR7YXR0cnMuaWNvblNyY30pYCA6ICcnO1xyXG4gICAgICAgIGNvbnN0IG1vZGVsSWR4ID0gQXJyYXkuaXNBcnJheShhdHRycy5pbmRleCkgPyBhdHRycy5pbmRleCA6IFthdHRycy5pbmRleF07XHJcbiAgICAgICAgY29uc3QgaGFuZGxlQ2xpY2sgPSAoKSA9PiB7XHJcbiAgICAgICAgICAgIGF0dHJzLmRpc3BhdGNoKCgwLCBpdGVtc18xLnNlbGVjdEl0ZW0pKHtcclxuICAgICAgICAgICAgICAgIGdyb3VwOiBhdHRycy5pdGVtR3JvdXAsXHJcbiAgICAgICAgICAgICAgICBpbmRleDogYXR0cnMuaXRlbUlkeCxcclxuICAgICAgICAgICAgICAgIGlGcmFtZUFjdGlvbnM6IGF0dHJzLml0ZW1Hcm91cCA9PT0gaXRlbXNfMS5JdGVtR3JvdXAuT3V0Zml0XHJcbiAgICAgICAgICAgICAgICAgICAgPyBbKDAsIGlmcmFtZV8xLnN3YXBNb2RlbCkoe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGF5ZXI6IGF0dHJzLm1vZGVsTGF5ZXIsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZDogYXR0cnMubW9kZWxJZFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9KV1cclxuICAgICAgICAgICAgICAgICAgICA6IG1vZGVsSWR4Lm1hcChpZHggPT4gKDAsIGlmcmFtZV8xLnN3YXBUZXh0dXJlKSh7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG1vZGVsSWQ6IGF0dHJzLm1vZGVsSWQsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGluZGV4OiBpZHgsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhcmlhbnQ6IGF0dHJzLnZhcmlhbnRcclxuICAgICAgICAgICAgICAgICAgICB9KSlcclxuICAgICAgICAgICAgfSkpO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgcmV0dXJuICgwLCBtaXRocmlsXzEuZGVmYXVsdCkoXCJkaXZcIiwgeyBjbGFzczogYGZsZXggaXRlbXMtY2VudGVyIGJnLWRhcmstODAwIHAtMTEwIG15LTgwIHJvdW5kZWQtbGcgY3Vyc29yLXBvaW50ZXIgaG92ZXI6YmctZGFyay03MDAke2FjdGl2ZUNsYXNzfWAsIG9uY2xpY2s6IGhhbmRsZUNsaWNrIH0sXHJcbiAgICAgICAgICAgICgwLCBtaXRocmlsXzEuZGVmYXVsdCkoXCJkaXZcIiwgeyBjbGFzczogJ2JnLWNvdmVyIGJnLWRhcmstOTAwIHctMTIwIGgtMTIwIHJvdW5kZWQtbGcgbXItODAnLCBzdHlsZTogYCR7Y29sb3JTdHlsZX0ke2ljb25TdHlsZX1gIH0pLFxyXG4gICAgICAgICAgICBjaGlsZHJlbik7XHJcbiAgICB9XHJcbn1cclxuZXhwb3J0cy5kZWZhdWx0ID0gKDAsIHVwZ3JhZGVfMS5kZWZhdWx0KShJdGVtKS5jb25uZWN0KCk7XHJcbiIsIlwidXNlIHN0cmljdFwiO1xyXG52YXIgX19pbXBvcnREZWZhdWx0ID0gKHRoaXMgJiYgdGhpcy5fX2ltcG9ydERlZmF1bHQpIHx8IGZ1bmN0aW9uIChtb2QpIHtcclxuICAgIHJldHVybiAobW9kICYmIG1vZC5fX2VzTW9kdWxlKSA/IG1vZCA6IHsgXCJkZWZhdWx0XCI6IG1vZCB9O1xyXG59O1xyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XHJcbmNvbnN0IG1pdGhyaWxfMSA9IF9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwibWl0aHJpbFwiKSk7XHJcbmNvbnN0IG1pdGhyaWxfdHN4X2NvbXBvbmVudF8xID0gcmVxdWlyZShcIm1pdGhyaWwtdHN4LWNvbXBvbmVudFwiKTtcclxuY29uc3QgcGFyYW1ldGVyc18xID0gcmVxdWlyZShcIi4uLy4uL3N0b3JlL3BhcmFtZXRlcnNcIik7XHJcbmNvbnN0IHVwZ3JhZGVfMSA9IF9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwiLi4vLi4vaG9jL3VwZ3JhZGVcIikpO1xyXG5jbGFzcyBTbGlkZXIgZXh0ZW5kcyBtaXRocmlsX3RzeF9jb21wb25lbnRfMS5NaXRocmlsVHN4Q29tcG9uZW50IHtcclxuICAgIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgICAgIHN1cGVyKCk7XHJcbiAgICAgICAgdGhpcy54ID0gMDtcclxuICAgICAgICB0aGlzLndpZHRoID0gMDtcclxuICAgICAgICB0aGlzLmRyYWcgPSBmYWxzZTtcclxuICAgICAgICB0aGlzLmF0dHJzID0gbnVsbDtcclxuICAgICAgICB0aGlzLmhhbmRsZU1vdXNlRG93biA9IHRoaXMuaGFuZGxlTW91c2VEb3duLmJpbmQodGhpcyk7XHJcbiAgICAgICAgdGhpcy5oYW5kbGVNb3VzZVVwID0gdGhpcy5oYW5kbGVNb3VzZVVwLmJpbmQodGhpcyk7XHJcbiAgICAgICAgdGhpcy5oYW5kbGVNb3VzZU1vdmUgPSB0aGlzLmhhbmRsZU1vdXNlTW92ZS5iaW5kKHRoaXMpO1xyXG4gICAgfVxyXG4gICAgb25jcmVhdGUoeyBkb20gfSkge1xyXG4gICAgICAgIHRoaXMueCA9IGRvbS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS54O1xyXG4gICAgICAgIHRoaXMud2lkdGggPSBkb20ub2Zmc2V0V2lkdGg7XHJcbiAgICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNldXAnLCB0aGlzLmhhbmRsZU1vdXNlVXApO1xyXG4gICAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdtb3VzZW1vdmUnLCB0aGlzLmhhbmRsZU1vdXNlTW92ZSk7XHJcbiAgICB9XHJcbiAgICBvbmJlZm9yZXJlbW92ZSgpIHtcclxuICAgICAgICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcignbW91c2V1cCcsIHRoaXMuaGFuZGxlTW91c2VVcCk7XHJcbiAgICAgICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ21vdXNlbW92ZScsIHRoaXMuaGFuZGxlTW91c2VNb3ZlKTtcclxuICAgIH1cclxuICAgIHZpZXcoeyBhdHRycyB9KSB7XHJcbiAgICAgICAgdGhpcy5hdHRycyA9IGF0dHJzO1xyXG4gICAgICAgIGNvbnN0IHZhbHVlU3R5bGUgPSBgbGVmdDoke2F0dHJzLnZhbHVlfSU7YDtcclxuICAgICAgICByZXR1cm4gKDAsIG1pdGhyaWxfMS5kZWZhdWx0KShcImRpdlwiLCB7IGNsYXNzOiAnbXktMTEwJyB9LFxyXG4gICAgICAgICAgICAoMCwgbWl0aHJpbF8xLmRlZmF1bHQpKFwiZGl2XCIsIG51bGwsIGF0dHJzLmxhYmVsKSxcclxuICAgICAgICAgICAgKDAsIG1pdGhyaWxfMS5kZWZhdWx0KShcImRpdlwiLCB7IGNsYXNzOiAncmVsYXRpdmUgYmctZGFyay02MDAgaC03MCBteS04MCByb3VuZGVkIGN1cnNvci1wb2ludGVyJywgb25tb3VzZWRvd246IHRoaXMuaGFuZGxlTW91c2VEb3duIH0sXHJcbiAgICAgICAgICAgICAgICAoMCwgbWl0aHJpbF8xLmRlZmF1bHQpKFwiZGl2XCIsIHsgY2xhc3M6ICdhYnNvbHV0ZSBiZy13aGl0ZSByb3VuZGVkLWZ1bGwgdy0xMDAgaC0xMDAgLW10LTQ1IC1tbC02MCBjdXJzb3ItZ3JhYicsIHN0eWxlOiBgJHt2YWx1ZVN0eWxlfWAgfSkpKTtcclxuICAgIH1cclxuICAgIGhhbmRsZU1vdXNlRG93bihldikge1xyXG4gICAgICAgIHRoaXMuZHJhZyA9IHRydWU7XHJcbiAgICAgICAgdGhpcy5oYW5kbGVNb3VzZU1vdmUoZXYpO1xyXG4gICAgfVxyXG4gICAgaGFuZGxlTW91c2VVcChldikge1xyXG4gICAgICAgIHRoaXMuZHJhZyA9IGZhbHNlO1xyXG4gICAgfVxyXG4gICAgaGFuZGxlTW91c2VNb3ZlKGV2KSB7XHJcbiAgICAgICAgaWYgKHRoaXMuZHJhZyAmJiB0aGlzLmF0dHJzKSB7XHJcbiAgICAgICAgICAgIHRoaXMuYXR0cnMuZGlzcGF0Y2goKDAsIHBhcmFtZXRlcnNfMS5zbGlkZVBhcmFtZXRlcikoe1xyXG4gICAgICAgICAgICAgICAgcGFyYW06IHRoaXMuYXR0cnMucGFyYW0sXHJcbiAgICAgICAgICAgICAgICB2YWx1ZTogKGV2LnBhZ2VYIC0gdGhpcy54KSAvIHRoaXMud2lkdGggKiAxMDBcclxuICAgICAgICAgICAgfSkpO1xyXG4gICAgICAgICAgICBtaXRocmlsXzEuZGVmYXVsdC5yZWRyYXcoKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuZXhwb3J0cy5kZWZhdWx0ID0gKDAsIHVwZ3JhZGVfMS5kZWZhdWx0KShTbGlkZXIpLmNvbm5lY3QoKTtcclxuIiwiXCJ1c2Ugc3RyaWN0XCI7XHJcbnZhciBfX2ltcG9ydERlZmF1bHQgPSAodGhpcyAmJiB0aGlzLl9faW1wb3J0RGVmYXVsdCkgfHwgZnVuY3Rpb24gKG1vZCkge1xyXG4gICAgcmV0dXJuIChtb2QgJiYgbW9kLl9fZXNNb2R1bGUpID8gbW9kIDogeyBcImRlZmF1bHRcIjogbW9kIH07XHJcbn07XHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcclxuY29uc3QgbWl0aHJpbF8xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCJtaXRocmlsXCIpKTtcclxuY29uc3Qgc3RvcmVfMSA9IF9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwiLi4vc3RvcmUvc3RvcmVcIikpO1xyXG5jb25zdCB1cGdyYWRlXzEgPSByZXF1aXJlKFwiLi91cGdyYWRlXCIpO1xyXG5mdW5jdGlvbiBkZWZhdWx0XzEoQ29tcG9uZW50KSB7XHJcbiAgICByZXR1cm4gZnVuY3Rpb24gKG1hcEF0dHJzKSB7XHJcbiAgICAgICAgcmV0dXJuIGNsYXNzIGV4dGVuZHMgdXBncmFkZV8xLldyYXBwZWRDb21wb25lbnQge1xyXG4gICAgICAgICAgICB2aWV3KHsgYXR0cnMsIGNoaWxkcmVuIH0pIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHN0b3JlQXR0cnMgPSBtYXBBdHRycyA9PT0gdW5kZWZpbmVkID8gbnVsbCA6IG1hcEF0dHJzKHN0b3JlXzEuZGVmYXVsdC5nZXRTdGF0ZSgpKTtcclxuICAgICAgICAgICAgICAgIHJldHVybiAoMCwgbWl0aHJpbF8xLmRlZmF1bHQpKENvbXBvbmVudCwgeyAuLi5hdHRycywgLi4uc3RvcmVBdHRycywgZGlzcGF0Y2g6IHN0b3JlXzEuZGVmYXVsdC5kaXNwYXRjaCB9LCBjaGlsZHJlbik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9O1xyXG4gICAgfTtcclxufVxyXG5leHBvcnRzLmRlZmF1bHQgPSBkZWZhdWx0XzE7XHJcbiIsIlwidXNlIHN0cmljdFwiO1xyXG52YXIgX19pbXBvcnREZWZhdWx0ID0gKHRoaXMgJiYgdGhpcy5fX2ltcG9ydERlZmF1bHQpIHx8IGZ1bmN0aW9uIChtb2QpIHtcclxuICAgIHJldHVybiAobW9kICYmIG1vZC5fX2VzTW9kdWxlKSA/IG1vZCA6IHsgXCJkZWZhdWx0XCI6IG1vZCB9O1xyXG59O1xyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XHJcbmV4cG9ydHMuV3JhcHBlZENvbXBvbmVudCA9IHZvaWQgMDtcclxuY29uc3QgY29ubmVjdF8xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCIuL2Nvbm5lY3RcIikpO1xyXG5jb25zdCBtaXRocmlsX3RzeF9jb21wb25lbnRfMSA9IHJlcXVpcmUoXCJtaXRocmlsLXRzeC1jb21wb25lbnRcIik7XHJcbmNsYXNzIFdyYXBwZWRDb21wb25lbnQgZXh0ZW5kcyBtaXRocmlsX3RzeF9jb21wb25lbnRfMS5NaXRocmlsVHN4Q29tcG9uZW50IHtcclxuICAgIHZpZXcodm5vZGUpIHsgfVxyXG59XHJcbmV4cG9ydHMuV3JhcHBlZENvbXBvbmVudCA9IFdyYXBwZWRDb21wb25lbnQ7XHJcbmNvbnN0IHdyYXBwZXJzID0ge1xyXG4gICAgJ2Nvbm5lY3QnOiBjb25uZWN0XzEuZGVmYXVsdFxyXG59O1xyXG5leHBvcnRzLmRlZmF1bHQgPSAoY29tcG9uZW50KSA9PiB7XHJcbiAgICBsZXQgdXBncmFkZSA9IHt9O1xyXG4gICAgZm9yIChsZXQgbmFtZSBvZiBPYmplY3Qua2V5cyh3cmFwcGVycykpIHtcclxuICAgICAgICB1cGdyYWRlW25hbWVdID0gZnVuY3Rpb24gKC4uLmFyZ3MpIHtcclxuICAgICAgICAgICAgbGV0IHdyYXBwZWQgPSB3cmFwcGVyc1tuYW1lXSh0aGlzKSguLi5hcmdzKTtcclxuICAgICAgICAgICAgT2JqZWN0LmFzc2lnbih3cmFwcGVkLCB1cGdyYWRlKTtcclxuICAgICAgICAgICAgcmV0dXJuIHdyYXBwZWQ7XHJcbiAgICAgICAgfTtcclxuICAgIH1cclxuICAgIE9iamVjdC5hc3NpZ24oY29tcG9uZW50LCB1cGdyYWRlKTtcclxuICAgIHJldHVybiBjb21wb25lbnQ7XHJcbn07XHJcbiIsIlwidXNlIHN0cmljdFwiO1xyXG52YXIgX19pbXBvcnREZWZhdWx0ID0gKHRoaXMgJiYgdGhpcy5fX2ltcG9ydERlZmF1bHQpIHx8IGZ1bmN0aW9uIChtb2QpIHtcclxuICAgIHJldHVybiAobW9kICYmIG1vZC5fX2VzTW9kdWxlKSA/IG1vZCA6IHsgXCJkZWZhdWx0XCI6IG1vZCB9O1xyXG59O1xyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XHJcbmNvbnN0IG1pdGhyaWxfMSA9IF9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwibWl0aHJpbFwiKSk7XHJcbnJlcXVpcmUoXCIuL3N0b3JlL3N0b3JlXCIpO1xyXG5yZXF1aXJlKFwiLi9tZXNzZW5nZXJcIik7XHJcbmNvbnN0IExheW91dF8xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCIuL2NvbXBvbmVudHMvTGF5b3V0XCIpKTtcclxubWl0aHJpbF8xLmRlZmF1bHQubW91bnQoZG9jdW1lbnQuYm9keSwgTGF5b3V0XzEuZGVmYXVsdCk7XHJcbiIsIlwidXNlIHN0cmljdFwiO1xyXG52YXIgX19pbXBvcnREZWZhdWx0ID0gKHRoaXMgJiYgdGhpcy5fX2ltcG9ydERlZmF1bHQpIHx8IGZ1bmN0aW9uIChtb2QpIHtcclxuICAgIHJldHVybiAobW9kICYmIG1vZC5fX2VzTW9kdWxlKSA/IG1vZCA6IHsgXCJkZWZhdWx0XCI6IG1vZCB9O1xyXG59O1xyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XHJcbmV4cG9ydHMuc2VuZE1lc3NhZ2UgPSB2b2lkIDA7XHJcbmNvbnN0IHN0b3JlXzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcIi4vc3RvcmUvc3RvcmVcIikpO1xyXG5jb25zdCBJRlJBTUVfT1JJR0lOID0gd2luZG93LmxvY2F0aW9uLm9yaWdpbjtcclxubGV0IHByZXZJZCA9IDA7XHJcbmxldCBjYWxsYmFja3MgPSB7fTtcclxuYXN5bmMgZnVuY3Rpb24gc2VuZE1lc3NhZ2UodHlwZSwgcGF5bG9hZCkge1xyXG4gICAgY29uc3QgZWxlbSA9IHN0b3JlXzEuZGVmYXVsdC5nZXRTdGF0ZSgpLmlmcmFtZS5pRnJhbWVFbGVtZW50O1xyXG4gICAgaWYgKCFlbGVtKSB7XHJcbiAgICAgICAgdGhyb3cgJ0lGcmFtZSBlbGVtZW50IG5vdCBpbml0aWFsaXplZCc7XHJcbiAgICB9XHJcbiAgICBjb25zdCB0YXJnZXRXaW5kb3cgPSBlbGVtLmNvbnRlbnRXaW5kb3c7XHJcbiAgICBpZiAoIXRhcmdldFdpbmRvdykge1xyXG4gICAgICAgIHRocm93ICdJRnJhbWUgd2luZG93IG5vdCBpbml0aWFsaXplZCc7XHJcbiAgICB9XHJcbiAgICBjb25zdCBtc2cgPSB7XHJcbiAgICAgICAgaWQ6ICsrcHJldklkLFxyXG4gICAgICAgIHR5cGUsXHJcbiAgICAgICAgcGF5bG9hZFxyXG4gICAgfTtcclxuICAgIHRhcmdldFdpbmRvdy5wb3N0TWVzc2FnZShtc2csIElGUkFNRV9PUklHSU4pO1xyXG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcclxuICAgICAgICBjYWxsYmFja3NbcHJldklkXSA9IChwYXlsb2FkKSA9PiB7XHJcbiAgICAgICAgICAgIHJlc29sdmUocGF5bG9hZCk7XHJcbiAgICAgICAgfTtcclxuICAgIH0pO1xyXG59XHJcbmV4cG9ydHMuc2VuZE1lc3NhZ2UgPSBzZW5kTWVzc2FnZTtcclxuIiwiXCJ1c2Ugc3RyaWN0XCI7XHJcbnZhciBfYTtcclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xyXG5leHBvcnRzLnNldElGcmFtZUVsZW1lbnQgPSBleHBvcnRzLnNldFN0YXR1cyA9IGV4cG9ydHMuSUZyYW1lID0gZXhwb3J0cy5zd2FwVGV4dHVyZSA9IGV4cG9ydHMuc3dhcE1vZGVsID0gZXhwb3J0cy5JRnJhbWVTdGF0dXMgPSB2b2lkIDA7XHJcbmNvbnN0IHRvb2xraXRfMSA9IHJlcXVpcmUoXCJAcmVkdXhqcy90b29sa2l0XCIpO1xyXG5jb25zdCBhc3VuYV93ZWJfbGl2ZTJkXzEgPSByZXF1aXJlKFwiYXN1bmEtd2ViLWxpdmUyZFwiKTtcclxuY29uc3QgbWVzc2VuZ2VyXzEgPSByZXF1aXJlKFwiLi4vbWVzc2VuZ2VyXCIpO1xyXG52YXIgSUZyYW1lU3RhdHVzO1xyXG4oZnVuY3Rpb24gKElGcmFtZVN0YXR1cykge1xyXG4gICAgSUZyYW1lU3RhdHVzW0lGcmFtZVN0YXR1c1tcIlJlYWR5XCJdID0gMF0gPSBcIlJlYWR5XCI7XHJcbiAgICBJRnJhbWVTdGF0dXNbSUZyYW1lU3RhdHVzW1wiUGVuZGluZ1wiXSA9IDFdID0gXCJQZW5kaW5nXCI7XHJcbn0pKElGcmFtZVN0YXR1cyA9IGV4cG9ydHMuSUZyYW1lU3RhdHVzIHx8IChleHBvcnRzLklGcmFtZVN0YXR1cyA9IHt9KSk7XHJcbmNvbnN0IGluaXRpYWxTdGF0ZSA9IHtcclxuICAgIHN0YXR1czogSUZyYW1lU3RhdHVzLlBlbmRpbmcsXHJcbiAgICBpRnJhbWVFbGVtZW50OiBudWxsXHJcbn07XHJcbmV4cG9ydHMuc3dhcE1vZGVsID0gKDAsIHRvb2xraXRfMS5jcmVhdGVBc3luY1RodW5rKSgnaWZyYW1lL3N3YXAnLCBhc3luYyAoeyBsYXllciwgaWQgfSwgeyBkaXNwYXRjaCwgZ2V0U3RhdGUgfSkgPT4ge1xyXG4gICAgaWYgKGdldFN0YXRlKCkuaWZyYW1lLnN0YXR1cyA9PT0gSUZyYW1lU3RhdHVzLlBlbmRpbmcpIHtcclxuICAgICAgICB0aHJvdyAnaWZyYW1lIGFjdGlvbiBjYWxsZWQgd2hpbGUgcGVuZGluZyc7XHJcbiAgICB9XHJcbiAgICBkaXNwYXRjaCgoMCwgZXhwb3J0cy5zZXRTdGF0dXMpKElGcmFtZVN0YXR1cy5QZW5kaW5nKSk7XHJcbiAgICBhd2FpdCAoMCwgbWVzc2VuZ2VyXzEuc2VuZE1lc3NhZ2UpKGFzdW5hX3dlYl9saXZlMmRfMS5NZXNzYWdlVHlwZS5TQ19Td2FwTW9kZWwsIHtcclxuICAgICAgICBsYXllcixcclxuICAgICAgICBpZFxyXG4gICAgfSk7XHJcbiAgICBkaXNwYXRjaCgoMCwgZXhwb3J0cy5zZXRTdGF0dXMpKElGcmFtZVN0YXR1cy5SZWFkeSkpO1xyXG59KTtcclxuZXhwb3J0cy5zd2FwVGV4dHVyZSA9ICgwLCB0b29sa2l0XzEuY3JlYXRlQXN5bmNUaHVuaykoJ2lmcmFtZS9zd2FwJywgYXN5bmMgKHsgbW9kZWxJZCwgaW5kZXgsIHZhcmlhbnQgfSwgeyBkaXNwYXRjaCwgZ2V0U3RhdGUgfSkgPT4ge1xyXG4gICAgaWYgKGdldFN0YXRlKCkuaWZyYW1lLnN0YXR1cyA9PT0gSUZyYW1lU3RhdHVzLlBlbmRpbmcpIHtcclxuICAgICAgICB0aHJvdyAnaWZyYW1lIGFjdGlvbiBjYWxsZWQgd2hpbGUgcGVuZGluZyc7XHJcbiAgICB9XHJcbiAgICBkaXNwYXRjaCgoMCwgZXhwb3J0cy5zZXRTdGF0dXMpKElGcmFtZVN0YXR1cy5QZW5kaW5nKSk7XHJcbiAgICBhd2FpdCAoMCwgbWVzc2VuZ2VyXzEuc2VuZE1lc3NhZ2UpKGFzdW5hX3dlYl9saXZlMmRfMS5NZXNzYWdlVHlwZS5TQ19Td2FwVGV4dHVyZSwge1xyXG4gICAgICAgIG1vZGVsSWQsXHJcbiAgICAgICAgaW5kZXgsXHJcbiAgICAgICAgdmFyaWFudFxyXG4gICAgfSk7XHJcbiAgICBkaXNwYXRjaCgoMCwgZXhwb3J0cy5zZXRTdGF0dXMpKElGcmFtZVN0YXR1cy5SZWFkeSkpO1xyXG59KTtcclxuZXhwb3J0cy5JRnJhbWUgPSAoMCwgdG9vbGtpdF8xLmNyZWF0ZVNsaWNlKSh7XHJcbiAgICBuYW1lOiAnaWZyYW1lJyxcclxuICAgIGluaXRpYWxTdGF0ZSxcclxuICAgIHJlZHVjZXJzOiB7XHJcbiAgICAgICAgc2V0U3RhdHVzOiAoc3RhdGUsIGFjdGlvbikgPT4ge1xyXG4gICAgICAgICAgICBzdGF0ZS5zdGF0dXMgPSBhY3Rpb24ucGF5bG9hZDtcclxuICAgICAgICB9LFxyXG4gICAgICAgIHNldElGcmFtZUVsZW1lbnQ6IChzdGF0ZSwgYWN0aW9uKSA9PiAoe1xyXG4gICAgICAgICAgICAuLi5zdGF0ZSxcclxuICAgICAgICAgICAgaUZyYW1lRWxlbWVudDogYWN0aW9uLnBheWxvYWRcclxuICAgICAgICB9KVxyXG4gICAgfVxyXG59KTtcclxuX2EgPSBleHBvcnRzLklGcmFtZS5hY3Rpb25zLCBleHBvcnRzLnNldFN0YXR1cyA9IF9hLnNldFN0YXR1cywgZXhwb3J0cy5zZXRJRnJhbWVFbGVtZW50ID0gX2Euc2V0SUZyYW1lRWxlbWVudDtcclxuZXhwb3J0cy5kZWZhdWx0ID0gZXhwb3J0cy5JRnJhbWUucmVkdWNlcjtcclxuIiwiXCJ1c2Ugc3RyaWN0XCI7XHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcclxuZXhwb3J0cy5zZXRDdXJzb3JQb3NpdGlvbiA9IGV4cG9ydHMuSXRlbXMgPSBleHBvcnRzLnNlbGVjdEl0ZW0gPSBleHBvcnRzLkl0ZW1Hcm91cCA9IHZvaWQgMDtcclxuY29uc3QgdG9vbGtpdF8xID0gcmVxdWlyZShcIkByZWR1eGpzL3Rvb2xraXRcIik7XHJcbmNvbnN0IGlmcmFtZV8xID0gcmVxdWlyZShcIi4vaWZyYW1lXCIpO1xyXG52YXIgSXRlbUdyb3VwO1xyXG4oZnVuY3Rpb24gKEl0ZW1Hcm91cCkge1xyXG4gICAgSXRlbUdyb3VwW0l0ZW1Hcm91cFtcIk91dGZpdFwiXSA9IDBdID0gXCJPdXRmaXRcIjtcclxuICAgIEl0ZW1Hcm91cFtJdGVtR3JvdXBbXCJCb2R5Q29sb3JcIl0gPSAxXSA9IFwiQm9keUNvbG9yXCI7XHJcbiAgICBJdGVtR3JvdXBbSXRlbUdyb3VwW1wiRXllQ29sb3JcIl0gPSAyXSA9IFwiRXllQ29sb3JcIjtcclxuICAgIEl0ZW1Hcm91cFtJdGVtR3JvdXBbXCJIYWlyQ29sb3JcIl0gPSAzXSA9IFwiSGFpckNvbG9yXCI7XHJcbn0pKEl0ZW1Hcm91cCA9IGV4cG9ydHMuSXRlbUdyb3VwIHx8IChleHBvcnRzLkl0ZW1Hcm91cCA9IHt9KSk7XHJcbmV4cG9ydHMuc2VsZWN0SXRlbSA9ICgwLCB0b29sa2l0XzEuY3JlYXRlQXN5bmNUaHVuaykoJ2l0ZW1zL3NlbGVjdCcsIGFzeW5jICh7IGdyb3VwLCBpbmRleCwgaUZyYW1lQWN0aW9ucyB9LCB7IGRpc3BhdGNoLCBnZXRTdGF0ZSB9KSA9PiB7XHJcbiAgICBpZiAoZ2V0U3RhdGUoKS5pZnJhbWUuc3RhdHVzID09PSBpZnJhbWVfMS5JRnJhbWVTdGF0dXMuUGVuZGluZykge1xyXG4gICAgICAgIHJldHVybjtcclxuICAgIH1cclxuICAgIGRpc3BhdGNoKCgwLCBleHBvcnRzLnNldEN1cnNvclBvc2l0aW9uKSh7IGdyb3VwLCBpbmRleCB9KSk7XHJcbiAgICBmb3IgKGxldCBhY3Rpb24gb2YgaUZyYW1lQWN0aW9ucykge1xyXG4gICAgICAgIGF3YWl0IGRpc3BhdGNoKGFjdGlvbik7XHJcbiAgICB9XHJcbn0pO1xyXG5leHBvcnRzLkl0ZW1zID0gKDAsIHRvb2xraXRfMS5jcmVhdGVTbGljZSkoe1xyXG4gICAgbmFtZTogJ2l0ZW1zJyxcclxuICAgIGluaXRpYWxTdGF0ZToge1xyXG4gICAgICAgIGN1cnNvclBvc2l0aW9uOiB7XHJcbiAgICAgICAgICAgIFtJdGVtR3JvdXAuT3V0Zml0XTogMCxcclxuICAgICAgICAgICAgW0l0ZW1Hcm91cC5Cb2R5Q29sb3JdOiAwLFxyXG4gICAgICAgICAgICBbSXRlbUdyb3VwLkV5ZUNvbG9yXTogMSxcclxuICAgICAgICAgICAgW0l0ZW1Hcm91cC5IYWlyQ29sb3JdOiAzXHJcbiAgICAgICAgfVxyXG4gICAgfSxcclxuICAgIHJlZHVjZXJzOiB7XHJcbiAgICAgICAgc2V0Q3Vyc29yUG9zaXRpb246IChzdGF0ZSwgYWN0aW9uKSA9PiAoe1xyXG4gICAgICAgICAgICAuLi5zdGF0ZSxcclxuICAgICAgICAgICAgY3Vyc29yUG9zaXRpb246IHtcclxuICAgICAgICAgICAgICAgIC4uLnN0YXRlLmN1cnNvclBvc2l0aW9uLFxyXG4gICAgICAgICAgICAgICAgW2FjdGlvbi5wYXlsb2FkLmdyb3VwXTogYWN0aW9uLnBheWxvYWQuaW5kZXhcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pXHJcbiAgICB9XHJcbn0pO1xyXG5leHBvcnRzLnNldEN1cnNvclBvc2l0aW9uID0gZXhwb3J0cy5JdGVtcy5hY3Rpb25zLnNldEN1cnNvclBvc2l0aW9uO1xyXG5leHBvcnRzLmRlZmF1bHQgPSBleHBvcnRzLkl0ZW1zLnJlZHVjZXI7XHJcbiIsIlwidXNlIHN0cmljdFwiO1xyXG52YXIgX2E7XHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcclxuZXhwb3J0cy5zZXRQYXJhbWV0ZXJWYWx1ZSA9IGV4cG9ydHMuc2V0T3ZlcnJpZGUgPSBleHBvcnRzLlBhcmFtZXRlcnMgPSBleHBvcnRzLnNsaWRlUGFyYW1ldGVyID0gZXhwb3J0cy50b2dnbGVPdmVycmlkZSA9IGV4cG9ydHMuUGFyYW1ldGVyID0gdm9pZCAwO1xyXG5jb25zdCB0b29sa2l0XzEgPSByZXF1aXJlKFwiQHJlZHV4anMvdG9vbGtpdFwiKTtcclxuY29uc3QgYXN1bmFfd2ViX2xpdmUyZF8xID0gcmVxdWlyZShcImFzdW5hLXdlYi1saXZlMmRcIik7XHJcbmNvbnN0IG1lc3Nlbmdlcl8xID0gcmVxdWlyZShcIi4uL21lc3NlbmdlclwiKTtcclxudmFyIFBhcmFtZXRlcjtcclxuKGZ1bmN0aW9uIChQYXJhbWV0ZXIpIHtcclxuICAgIFBhcmFtZXRlcltQYXJhbWV0ZXJbXCJGYWNlWFwiXSA9IDBdID0gXCJGYWNlWFwiO1xyXG4gICAgUGFyYW1ldGVyW1BhcmFtZXRlcltcIkZhY2VZXCJdID0gMV0gPSBcIkZhY2VZXCI7XHJcbiAgICBQYXJhbWV0ZXJbUGFyYW1ldGVyW1wiQm9keVhcIl0gPSAyXSA9IFwiQm9keVhcIjtcclxuICAgIFBhcmFtZXRlcltQYXJhbWV0ZXJbXCJCb2R5WVwiXSA9IDNdID0gXCJCb2R5WVwiO1xyXG59KShQYXJhbWV0ZXIgPSBleHBvcnRzLlBhcmFtZXRlciB8fCAoZXhwb3J0cy5QYXJhbWV0ZXIgPSB7fSkpO1xyXG5leHBvcnRzLnRvZ2dsZU92ZXJyaWRlID0gKDAsIHRvb2xraXRfMS5jcmVhdGVBc3luY1RodW5rKSgncGFyYW1ldGVycy9zbGlkZScsIGFzeW5jICh7IHZhbHVlIH0sIHsgZGlzcGF0Y2gsIGdldFN0YXRlIH0pID0+IHtcclxuICAgIGRpc3BhdGNoKCgwLCBleHBvcnRzLnNldE92ZXJyaWRlKSh2YWx1ZSkpO1xyXG4gICAgKDAsIG1lc3Nlbmdlcl8xLnNlbmRNZXNzYWdlKShhc3VuYV93ZWJfbGl2ZTJkXzEuTWVzc2FnZVR5cGUuU0NfU2V0UGFyYW1ldGVyT3ZlcnJpZGUsIHtcclxuICAgICAgICBvdmVycmlkZTogdmFsdWVcclxuICAgIH0pO1xyXG59KTtcclxuZXhwb3J0cy5zbGlkZVBhcmFtZXRlciA9ICgwLCB0b29sa2l0XzEuY3JlYXRlQXN5bmNUaHVuaykoJ3BhcmFtZXRlcnMvc2xpZGUnLCBhc3luYyAoeyBwYXJhbSwgdmFsdWUgfSwgeyBkaXNwYXRjaCwgZ2V0U3RhdGUgfSkgPT4ge1xyXG4gICAgZGlzcGF0Y2goKDAsIGV4cG9ydHMuc2V0UGFyYW1ldGVyVmFsdWUpKHsgcGFyYW0sIHZhbHVlIH0pKTtcclxuICAgIGNvbnN0IHBhcmFtcyA9IGdldFN0YXRlKCkucGFyYW1ldGVycy52YWx1ZTtcclxuICAgICgwLCBtZXNzZW5nZXJfMS5zZW5kTWVzc2FnZSkoYXN1bmFfd2ViX2xpdmUyZF8xLk1lc3NhZ2VUeXBlLlNDX1NldFBhcmFtZXRlcnMsIHtcclxuICAgICAgICBmYWNlWDogcGFyYW1zW1BhcmFtZXRlci5GYWNlWF0sXHJcbiAgICAgICAgZmFjZVk6IHBhcmFtc1tQYXJhbWV0ZXIuRmFjZVldLFxyXG4gICAgICAgIGJvZHlYOiBwYXJhbXNbUGFyYW1ldGVyLkJvZHlYXSxcclxuICAgICAgICBib2R5WTogcGFyYW1zW1BhcmFtZXRlci5Cb2R5WV1cclxuICAgIH0pO1xyXG59KTtcclxuZXhwb3J0cy5QYXJhbWV0ZXJzID0gKDAsIHRvb2xraXRfMS5jcmVhdGVTbGljZSkoe1xyXG4gICAgbmFtZTogJ3BhcmFtZXRlcnMnLFxyXG4gICAgaW5pdGlhbFN0YXRlOiB7XHJcbiAgICAgICAgb3ZlcnJpZGU6IGZhbHNlLFxyXG4gICAgICAgIHZhbHVlOiB7XHJcbiAgICAgICAgICAgIFtQYXJhbWV0ZXIuRmFjZVhdOiA1MCxcclxuICAgICAgICAgICAgW1BhcmFtZXRlci5GYWNlWV06IDUwLFxyXG4gICAgICAgICAgICBbUGFyYW1ldGVyLkJvZHlYXTogNTAsXHJcbiAgICAgICAgICAgIFtQYXJhbWV0ZXIuQm9keVldOiA1MFxyXG4gICAgICAgIH1cclxuICAgIH0sXHJcbiAgICByZWR1Y2Vyczoge1xyXG4gICAgICAgIHNldE92ZXJyaWRlOiAoc3RhdGUsIGFjdGlvbikgPT4ge1xyXG4gICAgICAgICAgICBzdGF0ZS5vdmVycmlkZSA9IGFjdGlvbi5wYXlsb2FkO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgc2V0UGFyYW1ldGVyVmFsdWU6IChzdGF0ZSwgYWN0aW9uKSA9PiB7XHJcbiAgICAgICAgICAgIGNvbnN0IHNuYXBUaHJlc2hvbGQgPSAzO1xyXG4gICAgICAgICAgICBsZXQgdmFsdWUgPSBNYXRoLm1heCgwLCBNYXRoLm1pbigxMDAsIGFjdGlvbi5wYXlsb2FkLnZhbHVlKSk7XHJcbiAgICAgICAgICAgIGlmICh2YWx1ZSA8IHNuYXBUaHJlc2hvbGQpIHtcclxuICAgICAgICAgICAgICAgIHZhbHVlID0gMDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIGlmICh2YWx1ZSA+IDEwMCAtIHNuYXBUaHJlc2hvbGQpIHtcclxuICAgICAgICAgICAgICAgIHZhbHVlID0gMTAwO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2UgaWYgKHZhbHVlID4gNTAgLSBzbmFwVGhyZXNob2xkICYmIHZhbHVlIDwgNTAgKyBzbmFwVGhyZXNob2xkKVxyXG4gICAgICAgICAgICAgICAgKHZhbHVlID0gNTApO1xyXG4gICAgICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICAgICAgLi4uc3RhdGUsXHJcbiAgICAgICAgICAgICAgICB2YWx1ZToge1xyXG4gICAgICAgICAgICAgICAgICAgIC4uLnN0YXRlLnZhbHVlLFxyXG4gICAgICAgICAgICAgICAgICAgIFthY3Rpb24ucGF5bG9hZC5wYXJhbV06IHZhbHVlXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59KTtcclxuX2EgPSBleHBvcnRzLlBhcmFtZXRlcnMuYWN0aW9ucywgZXhwb3J0cy5zZXRPdmVycmlkZSA9IF9hLnNldE92ZXJyaWRlLCBleHBvcnRzLnNldFBhcmFtZXRlclZhbHVlID0gX2Euc2V0UGFyYW1ldGVyVmFsdWU7XHJcbmV4cG9ydHMuZGVmYXVsdCA9IGV4cG9ydHMuUGFyYW1ldGVycy5yZWR1Y2VyO1xyXG4iLCJcInVzZSBzdHJpY3RcIjtcclxudmFyIF9faW1wb3J0RGVmYXVsdCA9ICh0aGlzICYmIHRoaXMuX19pbXBvcnREZWZhdWx0KSB8fCBmdW5jdGlvbiAobW9kKSB7XHJcbiAgICByZXR1cm4gKG1vZCAmJiBtb2QuX19lc01vZHVsZSkgPyBtb2QgOiB7IFwiZGVmYXVsdFwiOiBtb2QgfTtcclxufTtcclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xyXG5jb25zdCB0b29sa2l0XzEgPSByZXF1aXJlKFwiQHJlZHV4anMvdG9vbGtpdFwiKTtcclxuY29uc3QgdGFiXzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcIi4vdGFiXCIpKTtcclxuY29uc3QgaWZyYW1lXzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcIi4vaWZyYW1lXCIpKTtcclxuY29uc3QgaXRlbXNfMSA9IF9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwiLi9pdGVtc1wiKSk7XHJcbmNvbnN0IHBhcmFtZXRlcnNfMSA9IF9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwiLi9wYXJhbWV0ZXJzXCIpKTtcclxuY29uc3Qgc3RvcmUgPSAoMCwgdG9vbGtpdF8xLmNvbmZpZ3VyZVN0b3JlKSh7XHJcbiAgICByZWR1Y2VyOiB7XHJcbiAgICAgICAgdGFiOiB0YWJfMS5kZWZhdWx0LFxyXG4gICAgICAgIGlmcmFtZTogaWZyYW1lXzEuZGVmYXVsdCxcclxuICAgICAgICBpdGVtczogaXRlbXNfMS5kZWZhdWx0LFxyXG4gICAgICAgIHBhcmFtZXRlcnM6IHBhcmFtZXRlcnNfMS5kZWZhdWx0XHJcbiAgICB9XHJcbn0pO1xyXG5leHBvcnRzLmRlZmF1bHQgPSBzdG9yZTtcclxuIiwiXCJ1c2Ugc3RyaWN0XCI7XHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcclxuZXhwb3J0cy5zZXRBY3RpdmVUYWIgPSBleHBvcnRzLlRhYiA9IGV4cG9ydHMuVGFiSWQgPSB2b2lkIDA7XHJcbmNvbnN0IHRvb2xraXRfMSA9IHJlcXVpcmUoXCJAcmVkdXhqcy90b29sa2l0XCIpO1xyXG52YXIgVGFiSWQ7XHJcbihmdW5jdGlvbiAoVGFiSWQpIHtcclxuICAgIFRhYklkW1RhYklkW1wiT3V0Zml0XCJdID0gMF0gPSBcIk91dGZpdFwiO1xyXG4gICAgVGFiSWRbVGFiSWRbXCJCb2R5XCJdID0gMV0gPSBcIkJvZHlcIjtcclxuICAgIFRhYklkW1RhYklkW1wiRXllXCJdID0gMl0gPSBcIkV5ZVwiO1xyXG4gICAgVGFiSWRbVGFiSWRbXCJIYWlyXCJdID0gM10gPSBcIkhhaXJcIjtcclxuICAgIFRhYklkW1RhYklkW1wiUGFyYW1ldGVyc1wiXSA9IDRdID0gXCJQYXJhbWV0ZXJzXCI7XHJcbn0pKFRhYklkID0gZXhwb3J0cy5UYWJJZCB8fCAoZXhwb3J0cy5UYWJJZCA9IHt9KSk7XHJcbmV4cG9ydHMuVGFiID0gKDAsIHRvb2xraXRfMS5jcmVhdGVTbGljZSkoe1xyXG4gICAgbmFtZTogJ3RhYicsXHJcbiAgICBpbml0aWFsU3RhdGU6IFRhYklkLk91dGZpdCxcclxuICAgIHJlZHVjZXJzOiB7XHJcbiAgICAgICAgc2V0QWN0aXZlVGFiOiAoc3RhdGUsIGFjdGlvbikgPT4ge1xyXG4gICAgICAgICAgICByZXR1cm4gYWN0aW9uLnBheWxvYWQ7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59KTtcclxuZXhwb3J0cy5zZXRBY3RpdmVUYWIgPSBleHBvcnRzLlRhYi5hY3Rpb25zLnNldEFjdGl2ZVRhYjtcclxuZXhwb3J0cy5kZWZhdWx0ID0gZXhwb3J0cy5UYWIucmVkdWNlcjtcclxuIiwiLy8gVGhlIG1vZHVsZSBjYWNoZVxudmFyIF9fd2VicGFja19tb2R1bGVfY2FjaGVfXyA9IHt9O1xuXG4vLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcblx0dmFyIGNhY2hlZE1vZHVsZSA9IF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF07XG5cdGlmIChjYWNoZWRNb2R1bGUgIT09IHVuZGVmaW5lZCkge1xuXHRcdHJldHVybiBjYWNoZWRNb2R1bGUuZXhwb3J0cztcblx0fVxuXHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuXHR2YXIgbW9kdWxlID0gX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXSA9IHtcblx0XHQvLyBubyBtb2R1bGUuaWQgbmVlZGVkXG5cdFx0Ly8gbm8gbW9kdWxlLmxvYWRlZCBuZWVkZWRcblx0XHRleHBvcnRzOiB7fVxuXHR9O1xuXG5cdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuXHRfX3dlYnBhY2tfbW9kdWxlc19fW21vZHVsZUlkXS5jYWxsKG1vZHVsZS5leHBvcnRzLCBtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuXHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuXHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG59XG5cbiIsIi8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb25zIGZvciBoYXJtb255IGV4cG9ydHNcbl9fd2VicGFja19yZXF1aXJlX18uZCA9IGZ1bmN0aW9uKGV4cG9ydHMsIGRlZmluaXRpb24pIHtcblx0Zm9yKHZhciBrZXkgaW4gZGVmaW5pdGlvbikge1xuXHRcdGlmKF9fd2VicGFja19yZXF1aXJlX18ubyhkZWZpbml0aW9uLCBrZXkpICYmICFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywga2V5KSkge1xuXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIGtleSwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGRlZmluaXRpb25ba2V5XSB9KTtcblx0XHR9XG5cdH1cbn07IiwiX193ZWJwYWNrX3JlcXVpcmVfXy5nID0gKGZ1bmN0aW9uKCkge1xuXHRpZiAodHlwZW9mIGdsb2JhbFRoaXMgPT09ICdvYmplY3QnKSByZXR1cm4gZ2xvYmFsVGhpcztcblx0dHJ5IHtcblx0XHRyZXR1cm4gdGhpcyB8fCBuZXcgRnVuY3Rpb24oJ3JldHVybiB0aGlzJykoKTtcblx0fSBjYXRjaCAoZSkge1xuXHRcdGlmICh0eXBlb2Ygd2luZG93ID09PSAnb2JqZWN0JykgcmV0dXJuIHdpbmRvdztcblx0fVxufSkoKTsiLCJfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSBmdW5jdGlvbihvYmosIHByb3ApIHsgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIHByb3ApOyB9IiwiLy8gZGVmaW5lIF9fZXNNb2R1bGUgb24gZXhwb3J0c1xuX193ZWJwYWNrX3JlcXVpcmVfXy5yID0gZnVuY3Rpb24oZXhwb3J0cykge1xuXHRpZih0eXBlb2YgU3ltYm9sICE9PSAndW5kZWZpbmVkJyAmJiBTeW1ib2wudG9TdHJpbmdUYWcpIHtcblx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiAnTW9kdWxlJyB9KTtcblx0fVxuXHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xufTsiLCIvLyBzdGFydHVwXG4vLyBMb2FkIGVudHJ5IG1vZHVsZSBhbmQgcmV0dXJuIGV4cG9ydHNcbi8vIFRoaXMgZW50cnkgbW9kdWxlIGlzIHJlZmVyZW5jZWQgYnkgb3RoZXIgbW9kdWxlcyBzbyBpdCBjYW4ndCBiZSBpbmxpbmVkXG52YXIgX193ZWJwYWNrX2V4cG9ydHNfXyA9IF9fd2VicGFja19yZXF1aXJlX18oMjYyOSk7XG4iXSwibmFtZXMiOlsibiIsInIiLCJhcmd1bWVudHMiLCJsZW5ndGgiLCJ0IiwiQXJyYXkiLCJlIiwiRXJyb3IiLCJtYXAiLCJqb2luIiwiUSIsIk9iamVjdCIsImdldFByb3RvdHlwZU9mIiwiaGFzT3duUHJvcGVydHkiLCJjYWxsIiwiY29uc3RydWN0b3IiLCJGdW5jdGlvbiIsInRvU3RyaW5nIiwiWiIsImlzQXJyYXkiLCJMIiwicyIsInYiLCJpIiwibyIsImtleXMiLCJubiIsImZvckVhY2giLCJ1IiwiaGFzIiwicHJvdG90eXBlIiwiZiIsInNldCIsImRlbGV0ZSIsImFkZCIsImMiLCJYIiwiTWFwIiwicSIsIlNldCIsInAiLCJsIiwic2xpY2UiLCJybiIsIndyaXRhYmxlIiwiY29uZmlndXJhYmxlIiwiZ2V0IiwiZW51bWVyYWJsZSIsInZhbHVlIiwiY3JlYXRlIiwiZCIsInkiLCJjbGVhciIsImgiLCJmcmVlemUiLCJpc0Zyb3plbiIsImIiLCJ0biIsIl8iLCJVIiwiaiIsIk8iLCJnIiwiUyIsInciLCJtIiwiUCIsIk0iLCJ4IiwiSCIsIkEiLCJJIiwiayIsIlIiLCJhIiwiRCIsImNvbmNhdCIsIkYiLCJ6IiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIiwiRSIsIk4iLCJUIiwiQyIsImVuIiwib24iLCJQcm94eSIsInJldm9jYWJsZSIsInJldm9rZSIsInByb3h5IiwiSiIsInB1c2giLCJLIiwiZnJvbSIsIkciLCJXIiwiU3ltYm9sIiwiQiIsIlJlZmxlY3QiLCJmb3IiLCJpdGVyYXRvciIsIm93bktleXMiLCJnZXRPd25Qcm9wZXJ0eVN5bWJvbHMiLCJnZXRPd25Qcm9wZXJ0eU5hbWVzIiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyIsImRlbGV0ZVByb3BlcnR5IiwiZGVmaW5lUHJvcGVydHkiLCJzZXRQcm90b3R5cGVPZiIsImFwcGx5IiwidGhpcyIsInVuIiwicHJvZHVjZSIsIlByb21pc2UiLCJ0aGVuIiwicHJvZHVjZVdpdGhQYXRjaGVzIiwidXNlUHJveGllcyIsInNldFVzZVByb3hpZXMiLCJhdXRvRnJlZXplIiwic2V0QXV0b0ZyZWV6ZSIsImNyZWF0ZURyYWZ0IiwiZmluaXNoRHJhZnQiLCJhcHBseVBhdGNoZXMiLCJwYXRoIiwib3AiLCIkIiwiYW4iLCJmbiIsImJpbmQiLCJfZGVmaW5lUHJvcGVydHkiLCJvYmoiLCJrZXkiLCJvYmplY3QiLCJlbnVtZXJhYmxlT25seSIsInN5bWJvbHMiLCJmaWx0ZXIiLCJzeW0iLCJfb2JqZWN0U3ByZWFkMiIsInRhcmdldCIsInNvdXJjZSIsImRlZmluZVByb3BlcnRpZXMiLCJmb3JtYXRQcm9kRXJyb3JNZXNzYWdlIiwiY29kZSIsIiQkb2JzZXJ2YWJsZSIsIm9ic2VydmFibGUiLCJyYW5kb21TdHJpbmciLCJNYXRoIiwicmFuZG9tIiwic3Vic3RyaW5nIiwic3BsaXQiLCJBY3Rpb25UeXBlcyIsIklOSVQiLCJSRVBMQUNFIiwiUFJPQkVfVU5LTk9XTl9BQ1RJT04iLCJjcmVhdGVTdG9yZSIsInJlZHVjZXIiLCJwcmVsb2FkZWRTdGF0ZSIsImVuaGFuY2VyIiwiX3JlZjIiLCJ1bmRlZmluZWQiLCJjdXJyZW50UmVkdWNlciIsImN1cnJlbnRTdGF0ZSIsImN1cnJlbnRMaXN0ZW5lcnMiLCJuZXh0TGlzdGVuZXJzIiwiaXNEaXNwYXRjaGluZyIsImVuc3VyZUNhbk11dGF0ZU5leHRMaXN0ZW5lcnMiLCJnZXRTdGF0ZSIsInN1YnNjcmliZSIsImxpc3RlbmVyIiwiaXNTdWJzY3JpYmVkIiwiaW5kZXgiLCJpbmRleE9mIiwic3BsaWNlIiwiZGlzcGF0Y2giLCJhY3Rpb24iLCJwcm90byIsImlzUGxhaW5PYmplY3QiLCJ0eXBlIiwibGlzdGVuZXJzIiwicmVwbGFjZVJlZHVjZXIiLCJuZXh0UmVkdWNlciIsIl9yZWYiLCJvdXRlclN1YnNjcmliZSIsIm9ic2VydmVyIiwib2JzZXJ2ZVN0YXRlIiwibmV4dCIsInVuc3Vic2NyaWJlIiwiY29tYmluZVJlZHVjZXJzIiwicmVkdWNlcnMiLCJyZWR1Y2VyS2V5cyIsImZpbmFsUmVkdWNlcnMiLCJzaGFwZUFzc2VydGlvbkVycm9yIiwiZmluYWxSZWR1Y2VyS2V5cyIsImFzc2VydFJlZHVjZXJTaGFwZSIsInN0YXRlIiwiaGFzQ2hhbmdlZCIsIm5leHRTdGF0ZSIsIl9pIiwiX2tleSIsInByZXZpb3VzU3RhdGVGb3JLZXkiLCJuZXh0U3RhdGVGb3JLZXkiLCJiaW5kQWN0aW9uQ3JlYXRvciIsImFjdGlvbkNyZWF0b3IiLCJiaW5kQWN0aW9uQ3JlYXRvcnMiLCJhY3Rpb25DcmVhdG9ycyIsImJvdW5kQWN0aW9uQ3JlYXRvcnMiLCJjb21wb3NlIiwiX2xlbiIsImZ1bmNzIiwiYXJnIiwicmVkdWNlIiwiYXBwbHlNaWRkbGV3YXJlIiwibWlkZGxld2FyZXMiLCJzdG9yZSIsIl9kaXNwYXRjaCIsIm1pZGRsZXdhcmVBUEkiLCJjaGFpbiIsIm1pZGRsZXdhcmUiLCJOT1RfRk9VTkQiLCJkZWZhdWx0RXF1YWxpdHlDaGVjayIsImRlZmF1bHRNZW1vaXplIiwiZnVuYyIsImVxdWFsaXR5Q2hlY2tPck9wdGlvbnMiLCJlcXVhbHMiLCJlbnRyeSIsInByb3ZpZGVkT3B0aW9ucyIsImVxdWFsaXR5Q2hlY2siLCJfcHJvdmlkZWRPcHRpb25zJGVxdWEiLCJfcHJvdmlkZWRPcHRpb25zJG1heFMiLCJtYXhTaXplIiwicmVzdWx0RXF1YWxpdHlDaGVjayIsImNvbXBhcmF0b3IiLCJwcmV2IiwiY3JlYXRlQ2FjaGVLZXlDb21wYXJhdG9yIiwiY2FjaGUiLCJwdXQiLCJnZXRFbnRyaWVzIiwiZW50cmllcyIsImNhY2hlSW5kZXgiLCJmaW5kSW5kZXgiLCJ1bnNoaWZ0IiwicG9wIiwiY3JlYXRlTHJ1Q2FjaGUiLCJtZW1vaXplZCIsIm1hdGNoaW5nRW50cnkiLCJmaW5kIiwiY2xlYXJDYWNoZSIsImNyZWF0ZVNlbGVjdG9yQ3JlYXRvciIsIm1lbW9pemUiLCJtZW1vaXplT3B0aW9uc0Zyb21BcmdzIiwiX2xlbjIiLCJfa2V5MiIsIl9sYXN0UmVzdWx0IiwiX3JlY29tcHV0YXRpb25zIiwiZGlyZWN0bHlQYXNzZWRPcHRpb25zIiwibWVtb2l6ZU9wdGlvbnMiLCJyZXN1bHRGdW5jIiwiX2RpcmVjdGx5UGFzc2VkT3B0aW9uMiIsImZpbmFsTWVtb2l6ZU9wdGlvbnMiLCJkZXBlbmRlbmNpZXMiLCJldmVyeSIsImRlcCIsImRlcGVuZGVuY3lUeXBlcyIsIm5hbWUiLCJnZXREZXBlbmRlbmNpZXMiLCJtZW1vaXplZFJlc3VsdEZ1bmMiLCJzZWxlY3RvciIsInBhcmFtcyIsImFzc2lnbiIsImxhc3RSZXN1bHQiLCJyZWNvbXB1dGF0aW9ucyIsInJlc2V0UmVjb21wdXRhdGlvbnMiLCJjcmVhdGVTZWxlY3RvciIsImNyZWF0ZVRodW5rTWlkZGxld2FyZSIsImV4dHJhQXJndW1lbnQiLCJ0aHVuayIsIndpdGhFeHRyYUFyZ3VtZW50IiwiZXh0ZW5kU3RhdGljcyIsIl9fZXh0ZW5kcyIsIl9fcHJvdG9fXyIsIlR5cGVFcnJvciIsIlN0cmluZyIsIl9fIiwiX19nZW5lcmF0b3IiLCJ0aGlzQXJnIiwiYm9keSIsImxhYmVsIiwic2VudCIsInRyeXMiLCJvcHMiLCJ2ZXJiIiwiZG9uZSIsInN0ZXAiLCJfX3NwcmVhZEFycmF5IiwidG8iLCJpbCIsIl9fZGVmUHJvcCIsIl9fZGVmUHJvcHMiLCJfX2dldE93blByb3BEZXNjcyIsIl9fZ2V0T3duUHJvcFN5bWJvbHMiLCJfX2hhc093blByb3AiLCJfX3Byb3BJc0VudW0iLCJwcm9wZXJ0eUlzRW51bWVyYWJsZSIsIl9fZGVmTm9ybWFsUHJvcCIsIl9fc3ByZWFkVmFsdWVzIiwicHJvcCIsIl9jIiwiX19zcHJlYWRQcm9wcyIsIl9fYXN5bmMiLCJfX3RoaXMiLCJfX2FyZ3VtZW50cyIsImdlbmVyYXRvciIsInJlc29sdmUiLCJyZWplY3QiLCJmdWxmaWxsZWQiLCJyZWplY3RlZCIsInRocm93IiwiY3JlYXRlRHJhZnRTYWZlU2VsZWN0b3IiLCJhcmdzIiwicmVzdCIsImNvbXBvc2VXaXRoRGV2VG9vbHMiLCJ3aW5kb3ciLCJfX1JFRFVYX0RFVlRPT0xTX0VYVEVOU0lPTl9DT01QT1NFX18iLCJiYXNlUHJvdG8iLCJfX1JFRFVYX0RFVlRPT0xTX0VYVEVOU0lPTl9fIiwiTWlkZGxld2FyZUFycmF5IiwiX3N1cGVyIiwiX3RoaXMiLCJzcGVjaWVzIiwiYXJyIiwicHJlcGVuZCIsImlzSW1tdXRhYmxlRGVmYXVsdCIsImNyZWF0ZUltbXV0YWJsZVN0YXRlSW52YXJpYW50TWlkZGxld2FyZSIsIm9wdGlvbnMiLCJpc1BsYWluIiwidmFsIiwiZmluZE5vblNlcmlhbGl6YWJsZVZhbHVlIiwiaXNTZXJpYWxpemFibGUiLCJpZ25vcmVkUGF0aHMiLCJmb3VuZE5lc3RlZFNlcmlhbGl6YWJsZSIsImtleVBhdGgiLCJoYXNJZ25vcmVkUGF0aHMiLCJlbnRyaWVzXzEiLCJuZXN0ZWRWYWx1ZSIsIm5lc3RlZFBhdGgiLCJjcmVhdGVTZXJpYWxpemFibGVTdGF0ZUludmFyaWFudE1pZGRsZXdhcmUiLCJnZXREZWZhdWx0TWlkZGxld2FyZSIsIm1pZGRsZXdhcmVBcnJheSIsImltbXV0YWJsZUNoZWNrIiwic2VyaWFsaXphYmxlQ2hlY2siLCJpc0Jvb2xlYW4iLCJJU19QUk9EVUNUSU9OIiwiY29uZmlndXJlU3RvcmUiLCJyb290UmVkdWNlciIsImN1cnJpZWRHZXREZWZhdWx0TWlkZGxld2FyZSIsIl9kIiwiX2UiLCJfZiIsImRldlRvb2xzIiwiX2ciLCJfaCIsImVuaGFuY2VycyIsImZpbmFsTWlkZGxld2FyZSIsInNvbWUiLCJpdGVtIiwibWlkZGxld2FyZUVuaGFuY2VyIiwiZmluYWxDb21wb3NlIiwidHJhY2UiLCJzdG9yZUVuaGFuY2VycyIsImNyZWF0ZUFjdGlvbiIsInByZXBhcmVBY3Rpb24iLCJwcmVwYXJlZCIsInBheWxvYWQiLCJtZXRhIiwiZXJyb3IiLCJtYXRjaCIsImlzVmFsaWRLZXkiLCJnZXRUeXBlIiwiZXhlY3V0ZVJlZHVjZXJCdWlsZGVyQ2FsbGJhY2siLCJidWlsZGVyQ2FsbGJhY2siLCJkZWZhdWx0Q2FzZVJlZHVjZXIiLCJhY3Rpb25zTWFwIiwiYWN0aW9uTWF0Y2hlcnMiLCJidWlsZGVyIiwiYWRkQ2FzZSIsInR5cGVPckFjdGlvbkNyZWF0b3IiLCJhZGRNYXRjaGVyIiwibWF0Y2hlciIsImFkZERlZmF1bHRDYXNlIiwiY3JlYXRlUmVkdWNlciIsImluaXRpYWxTdGF0ZSIsIm1hcE9yQnVpbGRlckNhbGxiYWNrIiwiZ2V0SW5pdGlhbFN0YXRlIiwiZmluYWxBY3Rpb25NYXRjaGVycyIsImZpbmFsRGVmYXVsdENhc2VSZWR1Y2VyIiwiaXNTdGF0ZUZ1bmN0aW9uIiwiZnJvemVuSW5pdGlhbFN0YXRlXzEiLCJjYXNlUmVkdWNlcnMiLCJjciIsInByZXZpb3VzU3RhdGUiLCJjYXNlUmVkdWNlciIsInJlc3VsdCIsImRyYWZ0IiwiY3JlYXRlU2xpY2UiLCJfcmVkdWNlciIsInJlZHVjZXJOYW1lcyIsInNsaWNlQ2FzZVJlZHVjZXJzQnlOYW1lIiwic2xpY2VDYXNlUmVkdWNlcnNCeVR5cGUiLCJidWlsZFJlZHVjZXIiLCJleHRyYVJlZHVjZXJzIiwiZmluYWxDYXNlUmVkdWNlcnMiLCJyZWR1Y2VyTmFtZSIsInByZXBhcmVDYWxsYmFjayIsIm1heWJlUmVkdWNlcldpdGhQcmVwYXJlIiwicHJlcGFyZSIsImFjdGlvbnMiLCJjcmVhdGVTdGF0ZU9wZXJhdG9yIiwibXV0YXRvciIsInJ1bk11dGF0b3IiLCJzZWxlY3RJZFZhbHVlIiwiZW50aXR5Iiwic2VsZWN0SWQiLCJlbnN1cmVFbnRpdGllc0FycmF5IiwiZW50aXRpZXMiLCJ2YWx1ZXMiLCJzcGxpdEFkZGVkVXBkYXRlZEVudGl0aWVzIiwibmV3RW50aXRpZXMiLCJhZGRlZCIsInVwZGF0ZWQiLCJuZXdFbnRpdGllc18xIiwiaWQiLCJjaGFuZ2VzIiwiY3JlYXRlVW5zb3J0ZWRTdGF0ZUFkYXB0ZXIiLCJhZGRPbmVNdXRhYmx5IiwiaWRzIiwiYWRkTWFueU11dGFibHkiLCJuZXdFbnRpdGllc18yIiwic2V0T25lTXV0YWJseSIsInJlbW92ZU1hbnlNdXRhYmx5IiwiZGlkTXV0YXRlIiwidXBkYXRlTWFueU11dGFibHkiLCJ1cGRhdGVzIiwibmV3S2V5cyIsInVwZGF0ZXNQZXJFbnRpdHkiLCJ1cGRhdGUiLCJkaWRNdXRhdGVJZHMiLCJvcmlnaW5hbDIiLCJuZXdLZXkiLCJoYXNOZXdLZXkiLCJ0YWtlTmV3S2V5IiwidXBzZXJ0TWFueU11dGFibHkiLCJyZW1vdmVBbGwiLCJvcGVyYXRvciIsImFkZE9uZSIsImFkZE1hbnkiLCJzZXRPbmUiLCJzZXRNYW55IiwibmV3RW50aXRpZXNfMyIsInNldEFsbCIsInVwZGF0ZU9uZSIsInVwZGF0ZU1hbnkiLCJ1cHNlcnRPbmUiLCJ1cHNlcnRNYW55IiwicmVtb3ZlT25lIiwicmVtb3ZlTWFueSIsImNyZWF0ZUVudGl0eUFkYXB0ZXIiLCJzb3J0Q29tcGFyZXIiLCJpbnN0YW5jZSIsInN0YXRlRmFjdG9yeSIsImFkZGl0aW9uYWxTdGF0ZSIsInNlbGVjdG9yc0ZhY3RvcnkiLCJnZXRTZWxlY3RvcnMiLCJzZWxlY3RTdGF0ZSIsInNlbGVjdElkcyIsInNlbGVjdEVudGl0aWVzIiwic2VsZWN0QWxsIiwic2VsZWN0QnlJZCIsInNlbGVjdFRvdGFsIiwic2VsZWN0R2xvYmFsaXplZEVudGl0aWVzIiwic3RhdGVBZGFwdGVyIiwic29ydCIsIm1vZGVscyIsIm1vZGVsIiwibWVyZ2UiLCJzZXRNYW55TXV0YWJseSIsInRha2VVcGRhdGVkTW9kZWwiLCJhbGxFbnRpdGllcyIsIm5ld1NvcnRlZElkcyIsImFyZUFycmF5c0VxdWFsIiwiY3JlYXRlU29ydGVkU3RhdGVBZGFwdGVyIiwibmFub2lkIiwic2l6ZSIsImNvbW1vblByb3BlcnRpZXMiLCJSZWplY3RXaXRoVmFsdWUiLCJGdWxmaWxsV2l0aE1ldGEiLCJtaW5pU2VyaWFsaXplRXJyb3IiLCJzaW1wbGVFcnJvciIsImNvbW1vblByb3BlcnRpZXNfMSIsInByb3BlcnR5IiwibWVzc2FnZSIsImNyZWF0ZUFzeW5jVGh1bmsiLCJ0eXBlUHJlZml4IiwicGF5bG9hZENyZWF0b3IiLCJyZXF1ZXN0SWQiLCJyZXF1ZXN0U3RhdHVzIiwicGVuZGluZyIsInNlcmlhbGl6ZUVycm9yIiwicmVqZWN0ZWRXaXRoVmFsdWUiLCJhYm9ydGVkIiwiY29uZGl0aW9uIiwiQUMiLCJBYm9ydENvbnRyb2xsZXIiLCJjbGFzc18xIiwic2lnbmFsIiwiYWRkRXZlbnRMaXN0ZW5lciIsImRpc3BhdGNoRXZlbnQiLCJvbmFib3J0IiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsImFib3J0IiwiZXh0cmEiLCJhYm9ydFJlYXNvbiIsImlkR2VuZXJhdG9yIiwiYWJvcnRDb250cm9sbGVyIiwiYWJvcnRlZFByb21pc2UiLCJzdGFydGVkIiwicHJvbWlzZSIsIl9hIiwiX2IiLCJmaW5hbEFjdGlvbiIsImNvbmRpdGlvblJlc3VsdCIsImVycl8xIiwiZ2V0UGVuZGluZ01ldGEiLCJyYWNlIiwicmVqZWN0V2l0aFZhbHVlIiwiZnVsZmlsbFdpdGhWYWx1ZSIsImRpc3BhdGNoQ29uZGl0aW9uUmVqZWN0aW9uIiwicmVhc29uIiwidW53cmFwIiwidW53cmFwUmVzdWx0IiwibWF0Y2hlcyIsImhhc01hdGNoRnVuY3Rpb24iLCJpc0FueU9mIiwibWF0Y2hlcnMiLCJpc0FsbE9mIiwiaGFzRXhwZWN0ZWRSZXF1ZXN0TWV0YWRhdGEiLCJ2YWxpZFN0YXR1cyIsImhhc1ZhbGlkUmVxdWVzdElkIiwiaGFzVmFsaWRSZXF1ZXN0U3RhdHVzIiwiaXNBc3luY1RodW5rQXJyYXkiLCJpc1BlbmRpbmciLCJhc3luY1RodW5rcyIsImFzeW5jVGh1bmsiLCJjb21iaW5lZE1hdGNoZXIiLCJpc1JlamVjdGVkIiwiaXNSZWplY3RlZFdpdGhWYWx1ZSIsImhhc0ZsYWciLCJpc0Z1bGZpbGxlZCIsImlzQXN5bmNUaHVua0FjdGlvbiIsImFzeW5jVGh1bmtzXzEiLCJhc3NlcnRGdW5jdGlvbiIsImV4cGVjdGVkIiwibm9vcCIsImNhdGNoUmVqZWN0aW9uIiwib25FcnJvciIsImNhdGNoIiwiYWRkQWJvcnRTaWduYWxMaXN0ZW5lciIsImFib3J0U2lnbmFsIiwiY2FsbGJhY2siLCJvbmNlIiwiYWJvcnRDb250cm9sbGVyV2l0aFJlYXNvbiIsImNvbXBsZXRlZCIsImNhbmNlbGxlZCIsInRhc2tDYW5jZWxsZWQiLCJ0YXNrQ29tcGxldGVkIiwibGlzdGVuZXJDYW5jZWxsZWQiLCJsaXN0ZW5lckNvbXBsZXRlZCIsIlRhc2tBYm9ydEVycm9yIiwidGFzayIsInZhbGlkYXRlQWN0aXZlIiwicHJvbWlzaWZ5QWJvcnRTaWduYWwiLCJub3RpZnlSZWplY3Rpb24iLCJjcmVhdGVQYXVzZSIsIm91dHB1dCIsImNyZWF0ZURlbGF5IiwicGF1c2UiLCJ0aW1lb3V0TXMiLCJzZXRUaW1lb3V0IiwiSU5URVJOQUxfTklMX1RPS0VOIiwiYWxtIiwiY3JlYXRlRm9yayIsInBhcmVudEFib3J0U2lnbmFsIiwidGFza0V4ZWN1dG9yIiwiY29udHJvbGxlciIsImNoaWxkQWJvcnRDb250cm9sbGVyIiwidGFzazIiLCJjbGVhblVwIiwicmVzdWx0MiIsImRlbGF5IiwiZXJyb3JfMSIsInN0YXR1cyIsImNhbmNlbCIsImNyZWF0ZVRha2VQYXR0ZXJuIiwic3RhcnRMaXN0ZW5pbmciLCJwcmVkaWNhdGUiLCJ0aW1lb3V0IiwidHVwbGVQcm9taXNlIiwicHJvbWlzZXMiLCJlZmZlY3QiLCJsaXN0ZW5lckFwaSIsImdldE9yaWdpbmFsU3RhdGUiLCJ0YWtlIiwiZ2V0TGlzdGVuZXJFbnRyeVByb3BzRnJvbSIsImNyZWF0ZUxpc3RlbmVyRW50cnkiLCJjcmVhdGVDbGVhckxpc3RlbmVyTWlkZGxld2FyZSIsImxpc3RlbmVyTWFwIiwiY2FuY2VsQWN0aXZlTGlzdGVuZXJzIiwic2FmZWx5Tm90aWZ5RXJyb3IiLCJlcnJvckhhbmRsZXIiLCJlcnJvclRvTm90aWZ5IiwiZXJyb3JJbmZvIiwiZXJyb3JIYW5kbGVyRXJyb3IiLCJhZGRMaXN0ZW5lciIsImNsZWFyQWxsTGlzdGVuZXJzIiwicmVtb3ZlTGlzdGVuZXIiLCJkZWZhdWx0RXJyb3JIYW5kbGVyIiwiY29uc29sZSIsImNyZWF0ZUxpc3RlbmVyTWlkZGxld2FyZSIsIm1pZGRsZXdhcmVPcHRpb25zIiwiZmluZExpc3RlbmVyRW50cnkiLCJleGlzdGluZ0VudHJ5IiwiY2FuY2VsT3B0aW9ucyIsImNhbmNlbEFjdGl2ZSIsImluc2VydEVudHJ5Iiwic3RvcExpc3RlbmluZyIsImVudHJ5MiIsIm5vdGlmeUxpc3RlbmVyIiwiYXBpIiwiaW50ZXJuYWxUYXNrQ29udHJvbGxlciIsImxpc3RlbmVyRXJyb3JfMSIsIkJvb2xlYW4iLCJmb3JrIiwicmFpc2VkQnkiLCJjbGVhckxpc3RlbmVyTWlkZGxld2FyZSIsIm9yaWdpbmFsU3RhdGUiLCJsaXN0ZW5lckVudHJpZXMiLCJsaXN0ZW5lckVudHJpZXNfMSIsInJ1bkxpc3RlbmVyIiwicHJlZGljYXRlRXJyb3IiLCJjbGVhckxpc3RlbmVycyIsIm1pbiIsImV4cG9ydHMiLCJNaXRocmlsVHN4Q29tcG9uZW50IiwiVm5vZGUiLCJtb2R1bGUiLCJyZW5kZXIiLCJzY2hlZHVsZSIsInN1YnNjcmlwdGlvbnMiLCJyZW5kZXJpbmciLCJzeW5jIiwicmVkcmF3IiwibW91bnQiLCJyb290IiwiY29tcG9uZW50IiwidmlldyIsImJ1aWxkUGF0aG5hbWUiLCJwYXJzZVBhdGhuYW1lIiwiY29tcGlsZVRlbXBsYXRlIiwic2VudGluZWwiLCIkd2luZG93IiwibW91bnRSZWRyYXciLCJmaXJlQXN5bmMiLCJzZXRQYXRoIiwiZGF0YSIsInRpdGxlIiwicmVwbGFjZSIsImhpc3RvcnkiLCJyZXBsYWNlU3RhdGUiLCJyb3V0ZSIsInByZWZpeCIsInB1c2hTdGF0ZSIsImxvY2F0aW9uIiwiaHJlZiIsImF0dHJzIiwiY3VycmVudFBhdGgiLCJsYXN0VXBkYXRlIiwiY3VycmVudFJlc29sdmVyIiwiU0tJUCIsImRlZmF1bHRSb3V0ZSIsInJvdXRlcyIsIm9ucmVtb3ZlIiwiY29tcGlsZWQiLCJTeW50YXhFcnJvciIsInRlc3QiLCJjaGVjayIsImNhbGxBc3luYyIsInNldEltbWVkaWF0ZSIsInNjaGVkdWxlZCIsImRlZmF1bHREYXRhIiwiUmVmZXJlbmNlRXJyb3IiLCJyZXNvbHZlUm91dGUiLCJoYXNoIiwic2VhcmNoIiwicGF0aG5hbWUiLCJkZWNvZGVVUklDb21wb25lbnQiLCJmYWlsIiwibG9vcCIsIm1hdGNoZWRSb3V0ZSIsImxvY2FsQ29tcCIsImNvbXAiLCJvbm1hdGNoIiwib25iZWZvcmV1cGRhdGUiLCJvbmNyZWF0ZSIsInZub2RlIiwiTGluayIsIm9uY2xpY2siLCJvbmluaXQiLCJvbnVwZGF0ZSIsIm9uYmVmb3JlcmVtb3ZlIiwiY2hpbGQiLCJjaGlsZHJlbiIsImRpc2FibGVkIiwiY3VycmVudFRhcmdldCIsImhhbmRsZUV2ZW50IiwiZGVmYXVsdFByZXZlbnRlZCIsImJ1dHRvbiIsIndoaWNoIiwiY3RybEtleSIsIm1ldGFLZXkiLCJzaGlmdEtleSIsImFsdEtleSIsInByZXZlbnREZWZhdWx0IiwicGFyYW0iLCJoeXBlcnNjcmlwdCIsInRydXN0IiwiZnJhZ21lbnQiLCJyZXF1ZXN0IiwianNvbnAiLCJwYXJzZVF1ZXJ5U3RyaW5nIiwiYnVpbGRRdWVyeVN0cmluZyIsIlByb21pc2VQb2x5ZmlsbCIsInJlcXVlc3RBbmltYXRpb25GcmFtZSIsInRlbXBsYXRlIiwicXVlcnlJbmRleCIsImhhc2hJbmRleCIsInF1ZXJ5RW5kIiwicGF0aEVuZCIsInF1ZXJ5IiwicmVzb2x2ZWQiLCJ2YXJpYWRpYyIsImVuY29kZVVSSUNvbXBvbmVudCIsIm5ld1F1ZXJ5SW5kZXgiLCJuZXdIYXNoSW5kZXgiLCJuZXdRdWVyeUVuZCIsIm5ld1BhdGhFbmQiLCJxdWVyeXN0cmluZyIsInRlbXBsYXRlRGF0YSIsInRlbXBsYXRlS2V5cyIsInJlZ2V4cCIsIlJlZ0V4cCIsImV4ZWMiLCJ1cmwiLCJleGVjdXRvciIsInNlbGYiLCJyZXNvbHZlcnMiLCJyZWplY3RvcnMiLCJyZXNvbHZlQ3VycmVudCIsImhhbmRsZXIiLCJyZWplY3RDdXJyZW50IiwiX2luc3RhbmNlIiwibGlzdCIsInNob3VsZEFic29yYiIsImV4ZWN1dGUiLCJyZXRyeSIsImV4ZWN1dGVPbmNlIiwicnVucyIsInJ1biIsIm9uZXJyb3IiLCJvbkZ1bGZpbGxlZCIsIm9uUmVqZWN0aW9uIiwicmVzb2x2ZU5leHQiLCJyZWplY3ROZXh0IiwiaGFuZGxlIiwiZmluYWxseSIsImFsbCIsInRvdGFsIiwiY291bnQiLCJjb25zdW1lIiwiZGVzdHJ1Y3R1cmUiLCJzdHJpbmciLCJjaGFyQXQiLCJjb3VudGVycyIsImxldmVscyIsImN1cnNvciIsImxldmVsIiwibmV4dExldmVsIiwiaXNOdW1iZXIiLCJpc05hTiIsInBhcnNlSW50IiwiZGVzYyIsImh5cGVyc2NyaXB0Vm5vZGUiLCJ0YWciLCJub3JtYWxpemVDaGlsZHJlbiIsInNlbGVjdG9yUGFyc2VyIiwic2VsZWN0b3JDYWNoZSIsImhhc093biIsImlzRW1wdHkiLCJoYXNDbGFzcyIsImNsYXNzTmFtZSIsImNsYXNzIiwibmV3QXR0cnMiLCJ0ZXh0IiwiZXhlY1NlbGVjdG9yIiwiY2xhc3NlcyIsImF0dHJWYWx1ZSIsImNvbXBpbGVTZWxlY3RvciIsInN0YXJ0IiwiY3VycmVudFJlZHJhdyIsIiRkb2MiLCJkb2N1bWVudCIsIm5hbWVTcGFjZSIsInN2ZyIsIm1hdGgiLCJnZXROYW1lU3BhY2UiLCJ4bWxucyIsImNoZWNrU3RhdGUiLCJvcmlnaW5hbCIsImNhbGxIb29rIiwiYWN0aXZlRWxlbWVudCIsImNyZWF0ZU5vZGVzIiwicGFyZW50Iiwidm5vZGVzIiwiZW5kIiwiaG9va3MiLCJuZXh0U2libGluZyIsIm5zIiwiY3JlYXRlTm9kZSIsImluaXRMaWZlY3ljbGUiLCJkb20iLCJjcmVhdGVUZXh0Tm9kZSIsImluc2VydE5vZGUiLCJjcmVhdGVUZXh0IiwiY3JlYXRlSFRNTCIsImNyZWF0ZURvY3VtZW50RnJhZ21lbnQiLCJmaXJzdENoaWxkIiwiZG9tU2l6ZSIsImNoaWxkTm9kZXMiLCJjcmVhdGVGcmFnbWVudCIsImlzIiwiZWxlbWVudCIsImNyZWF0ZUVsZW1lbnROUyIsImNyZWF0ZUVsZW1lbnQiLCJzZXRBdHRyIiwic2V0QXR0cnMiLCJtYXliZVNldENvbnRlbnRFZGl0YWJsZSIsInRleHRDb250ZW50Iiwic2VsZWN0ZWRJbmRleCIsIm5vcm1hbGl6ZWQiLCJzZXRMYXRlU2VsZWN0QXR0cnMiLCIkJHJlZW50cmFudExvY2skJCIsIm5vcm1hbGl6ZSIsImluaXRDb21wb25lbnQiLCJjcmVhdGVDb21wb25lbnQiLCJwb3NzaWJsZVBhcmVudHMiLCJjYXB0aW9uIiwidGhlYWQiLCJ0Ym9keSIsInRmb290IiwidHIiLCJ0aCIsInRkIiwiY29sZ3JvdXAiLCJjb2wiLCJ0ZW1wIiwiaW5uZXJIVE1MIiwiYXBwZW5kQ2hpbGQiLCJ1cGRhdGVOb2RlcyIsIm9sZCIsInJlbW92ZU5vZGVzIiwiaXNPbGRLZXllZCIsImlzS2V5ZWQiLCJvbGRTdGFydCIsIm9lIiwidmUiLCJ0b3BTaWJsaW5nIiwib2xkRW5kIiwidXBkYXRlTm9kZSIsImdldE5leHRTaWJsaW5nIiwibW92ZU5vZGVzIiwibGlzSW5kaWNlcyIsIm9yaWdpbmFsTmV4dFNpYmxpbmciLCJ2bm9kZXNMZW5ndGgiLCJvbGRJbmRpY2VzIiwibGkiLCJwb3MiLCJtYXRjaGVkIiwiZ2V0S2V5TWFwIiwib2xkSW5kZXgiLCJsaXNUZW1wIiwibWFrZUxpc0luZGljZXMiLCJjb21tb25MZW5ndGgiLCJyZW1vdmVOb2RlIiwib2xkVGFnIiwiZXZlbnRzIiwiZm9yY2UiLCJzaG91bGROb3RVcGRhdGUiLCJ1cGRhdGVMaWZlY3ljbGUiLCJub2RlVmFsdWUiLCJ1cGRhdGVUZXh0IiwicmVtb3ZlSFRNTCIsInVwZGF0ZUhUTUwiLCJ1cGRhdGVGcmFnbWVudCIsInJlbW92ZUF0dHIiLCJ1cGRhdGVBdHRycyIsInVwZGF0ZUVsZW1lbnQiLCJ1cGRhdGVDb21wb25lbnQiLCJmcmFnIiwibW92ZUNoaWxkVG9GcmFnIiwicGFyZW50Tm9kZSIsImluc2VydEJlZm9yZSIsImNvbnRlbnRlZGl0YWJsZSIsImNvbnRlbnRFZGl0YWJsZSIsImNvbnRlbnQiLCJzdGF0ZVJlc3VsdCIsImF0dHJzUmVzdWx0IiwibWFzayIsInJlYWxseVJlbW92ZSIsInJlbW92ZUNoaWxkIiwiaXNMaWZlY3ljbGVNZXRob2QiLCJhdHRyIiwiaXNGb3JtQXR0cmlidXRlIiwidXBkYXRlRXZlbnQiLCJzZXRBdHRyaWJ1dGVOUyIsInVwZGF0ZVN0eWxlIiwiaGFzUHJvcGVydHlLZXkiLCJzZXRBdHRyaWJ1dGUiLCJyZW1vdmVBdHRyaWJ1dGUiLCJuc0xhc3RJbmRleCIsInVwcGVyY2FzZVJlZ2V4IiwidG9Mb3dlckNhc2UiLCJjYXBpdGFsIiwibm9ybWFsaXplS2V5Iiwic3R5bGUiLCJjc3NUZXh0Iiwic2V0UHJvcGVydHkiLCJyZW1vdmVQcm9wZXJ0eSIsIkV2ZW50RGljdCIsImV2Iiwic3RvcFByb3BhZ2F0aW9uIiwiYWN0aXZlIiwibmFtZXNwYWNlIiwibmFtZXNwYWNlVVJJIiwicHJldlJlZHJhdyIsImZvY3VzIiwiaHRtbCIsIm5vZGUiLCJpbnB1dCIsIm9uY29tcGxldGlvbiIsImNhbGxiYWNrQ291bnQiLCJQcm9taXNlUHJveHkiLCJtYWtlUmVxdWVzdCIsImZhY3RvcnkiLCJiYWNrZ3JvdW5kIiwiY29tcGxldGUiLCJ3cmFwIiwiaGFzSGVhZGVyIiwiaGVhZGVycyIsInJlcGxhY2VkQWJvcnQiLCJtZXRob2QiLCJ0b1VwcGVyQ2FzZSIsImFzc3VtZUpTT04iLCJzZXJpYWxpemUiLCJKU09OIiwiRm9ybURhdGEiLCJyZXNwb25zZVR5cGUiLCJleHRyYWN0IiwieGhyIiwiWE1MSHR0cFJlcXVlc3QiLCJvcGVuIiwiYXN5bmMiLCJ1c2VyIiwicGFzc3dvcmQiLCJzZXRSZXF1ZXN0SGVhZGVyIiwiZGVzZXJpYWxpemUiLCJ3aXRoQ3JlZGVudGlhbHMiLCJvbnJlYWR5c3RhdGVjaGFuZ2UiLCJyZWFkeVN0YXRlIiwic3VjY2VzcyIsInJlc3BvbnNlIiwicGFyc2UiLCJyZXNwb25zZVRleHQiLCJjb25maWciLCJzZW5kIiwic3RyaW5naWZ5IiwiY2FsbGJhY2tOYW1lIiwicm91bmQiLCJzY3JpcHQiLCJzcmMiLCJjYWxsYmFja0tleSIsImRvY3VtZW50RWxlbWVudCIsIk1vZGVsXzEiLCJQQVJFTlRfT1JJR0lOIiwib3JpZ2luIiwiTWVzc2FnZVR5cGUiLCJsb2FkZXIiLCJhc3NldFN0b3JlIiwicGFyZW50V2luZG93IiwiZXZlbnQiLCJsb2ciLCJtc2ciLCJTQ19Td2FwTW9kZWwiLCJyZWluaXRpYWxpemUiLCJsb2FkTW9kZWxBc3NldCIsIk1vZGVsIiwibGF5ZXIiLCJzZW5kTWVzc2FnZSIsIkNTX0NvbXBsZXRlIiwiU0NfU3dhcFRleHR1cmUiLCJtb2RlbElkIiwiYXNzZXQiLCJ0ZXh0dXJlSWQiLCJ2YXJpYW50IiwicGFkU3RhcnQiLCJ0ZXh0dXJlIiwibG9hZFRleHR1cmUiLCJyZW5kZXJlciIsImJpbmRUZXh0dXJlIiwiU0NfU2V0UGFyYW1ldGVyT3ZlcnJpZGUiLCJleHRlcm5hbCIsIm92ZXJyaWRlIiwiU0NfU2V0UGFyYW1ldGVycyIsImZhY2VYIiwiZmFjZVkiLCJib2R5WCIsImJvZHlZIiwicG9zdE1lc3NhZ2UiLCJNb2RlbExheWVyIiwiTW9kZWxTdGF0ZSIsImFzc2V0cyIsIkJhY2tIYWlyIiwiQm9keSIsIkV5ZXMiLCJGcm9udEhhaXIiLCJPdXRmaXQiLCJzeW5jUGFyYW1zIiwiX19pbXBvcnREZWZhdWx0IiwibW9kIiwiX19lc01vZHVsZSIsIm1pdGhyaWxfMSIsIm1pdGhyaWxfdHN4X2NvbXBvbmVudF8xIiwiaWZyYW1lXzEiLCJ1cGdyYWRlXzEiLCJFbWJlZCIsInNldElGcmFtZUVsZW1lbnQiLCJnZXRFbGVtZW50QnlJZCIsImRlZmF1bHQiLCJhbGxvdyIsImZyYW1lYm9yZGVyIiwiaGVpZ2h0Iiwid2lkdGgiLCJzYW5kYm94IiwiY29ubmVjdCIsIkVtYmVkXzEiLCJQYW5lbF8xIiwiTGF5b3V0IiwidGFiXzEiLCJQYW5lbFRhYl8xIiwiVGFiT3V0Zml0XzEiLCJUYWJCb2R5XzEiLCJUYWJFeWVfMSIsIlRhYkhhaXJfMSIsIlRhYlBhcmFtZXRlcnNfMSIsIlRhYkNvbXBvbmVudHMiLCJUYWJJZCIsIkV5ZSIsIkhhaXIiLCJQYXJhbWV0ZXJzIiwiUGFuZWwiLCJUYWJDb21wbmVudCIsImFjdGl2ZVRhYiIsInRhYiIsIlRhYiIsImFjdGl2ZUNsYXNzIiwic2V0QWN0aXZlVGFiIiwiaXRlbXNfMSIsIkl0ZW1fMSIsIml0ZW1zIiwiY29sb3IiLCJUYWJCb2R5IiwiaXRlbUdyb3VwIiwiSXRlbUdyb3VwIiwiQm9keUNvbG9yIiwiaXRlbUlkeCIsImFjdGl2ZUl0ZW0iLCJjdXJzb3JQb3NpdGlvbiIsIlRhYkV5ZSIsIkV5ZUNvbG9yIiwiaWNvblNyYyIsIlRhYkhhaXIiLCJIYWlyQ29sb3IiLCJNb2RlbFN0YXRlXzEiLCJUYWJPdXRmaXQiLCJtb2RlbExheWVyIiwicGFyYW1ldGVyc18xIiwiU2xpZGVyXzEiLCJwYXJhbWV0ZXJzIiwiUGFyYW1ldGVyIiwiRmFjZVgiLCJGYWNlWSIsIkJvZHlYIiwiQm9keVkiLCJUYWJQYXJhbWV0ZXJzIiwiZGlzYWJsZWRDbGFzcyIsInRvZ2dsZU92ZXJyaWRlIiwiY2hlY2tlZCIsIkl0ZW0iLCJjb2xvclN0eWxlIiwiaWNvblN0eWxlIiwibW9kZWxJZHgiLCJzZWxlY3RJdGVtIiwiZ3JvdXAiLCJpRnJhbWVBY3Rpb25zIiwic3dhcE1vZGVsIiwiaWR4Iiwic3dhcFRleHR1cmUiLCJTbGlkZXIiLCJzdXBlciIsImRyYWciLCJoYW5kbGVNb3VzZURvd24iLCJoYW5kbGVNb3VzZVVwIiwiaGFuZGxlTW91c2VNb3ZlIiwiZ2V0Qm91bmRpbmdDbGllbnRSZWN0Iiwib2Zmc2V0V2lkdGgiLCJ2YWx1ZVN0eWxlIiwib25tb3VzZWRvd24iLCJzbGlkZVBhcmFtZXRlciIsInBhZ2VYIiwic3RvcmVfMSIsIkNvbXBvbmVudCIsIm1hcEF0dHJzIiwiV3JhcHBlZENvbXBvbmVudCIsInN0b3JlQXR0cnMiLCJjb25uZWN0XzEiLCJ3cmFwcGVycyIsInVwZ3JhZGUiLCJ3cmFwcGVkIiwiTGF5b3V0XzEiLCJJRlJBTUVfT1JJR0lOIiwicHJldklkIiwiY2FsbGJhY2tzIiwiZWxlbSIsImlmcmFtZSIsImlGcmFtZUVsZW1lbnQiLCJ0YXJnZXRXaW5kb3ciLCJjb250ZW50V2luZG93Iiwic2V0U3RhdHVzIiwiSUZyYW1lIiwiSUZyYW1lU3RhdHVzIiwidG9vbGtpdF8xIiwiYXN1bmFfd2ViX2xpdmUyZF8xIiwibWVzc2VuZ2VyXzEiLCJQZW5kaW5nIiwiUmVhZHkiLCJzZXRDdXJzb3JQb3NpdGlvbiIsIkl0ZW1zIiwic2V0UGFyYW1ldGVyVmFsdWUiLCJzZXRPdmVycmlkZSIsIm1heCIsIl9fd2VicGFja19tb2R1bGVfY2FjaGVfXyIsIl9fd2VicGFja19yZXF1aXJlX18iLCJtb2R1bGVJZCIsImNhY2hlZE1vZHVsZSIsIl9fd2VicGFja19tb2R1bGVzX18iLCJkZWZpbml0aW9uIiwiZ2xvYmFsVGhpcyIsInRvU3RyaW5nVGFnIl0sInNvdXJjZVJvb3QiOiIifQ==